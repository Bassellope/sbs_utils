{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"about/","title":"About","text":"<p>Stuff about whow this was created, how to contribute code or documentation</p>"},{"location":"api/dispatch/console_dispatcher/","title":"Console Dispatcher","text":"<p>The ConsoleDispatcher is used to route console related messages to callback functions. Generally this is done to classes.</p>"},{"location":"api/dispatch/console_dispatcher/#artemis-cosmos-console-system","title":"Artemis Cosmos console system","text":"<p>Artemis Cosmos calls the script function HandleConsoleObjectSelection when an item is selected on a console.</p> <p>Artemis Cosmos calls the script function HandleCommsButton when a button is pressed on a comms console.</p>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils-console-system","title":"sbs_utils console system","text":"<p>The ConsoleDispatcher is intended receive these and route them to callback functions. This can further be used to direct these to classes that represent the ships enabling the handling of this code to be handled in context of the ship(s) involved.</p> <p>The HandleConsoleObjectSelection should call meth:<code>~sbs_utils.consoledispatcher.ConsoleDispatcher.dispatch_select</code> The HandleCommsButton should call meth:<code>~sbs_utils.consoledispatcher.ConsoleDispatcher.dispatch_comms_message</code></p> Python <pre><code>def HandleConsoleObjectSelection(sim, console, obj_selected_id, ship_id):\n   ConsoleDispatcher.dispatch_select(sim,ship_id, console,obj_selected_id)\n\ndef HandleCommsButton(sim, button_tag, ship_id, obj_selected_id):\n   ConsoleDispatcher.dispatch_comms_message(sim, button_tag, ship_id, obj_selected_id)\n</code></pre> <p>Importing the hookhandlers module it does by default.</p> <p>=== \"Python\"    <pre><code>from sbs_utils.handlerhooks import *\n# no longer need to implement handlers in script.py\n</code></pre></p>"},{"location":"api/dispatch/console_dispatcher/#example-adding-comms-to-a-class","title":"Example: Adding Comms to a class","text":"<p>The best way to use the ConsoleDispatcher is to add comms to a class:<code>~sbs_utils.spaceobject.SpaceObject</code> using the class:<code>~sbs_utils.consoledispatcher.ConsoleDispatcher</code> and class:<code>~sbs_utils.consoledispatcher.MCommunications</code> mixin class. and provide an implementation of  meth:<code>~sbs_utils.consoledispatcher.MCommunications.comms_selected</code> and meth:<code>~sbs_utils.consoledispatcher.MCommunications.comms_message</code> methods.</p> <p>To enable comms call meth:<code>~sbs_utils.consoledispatcher.MCommunications.enable_comms</code>. This should be called after the SpaceObject has spawned and has an id.</p> <p>meth:<code>~sbs_utils.consoledispatcher.MCommunications.enable_comms</code> takes a face description and it will set self.face_desc. </p> <p>You can use :doc:<code>faces</code> to get some face descriptions.</p> <p>This can be done on a non-player ship and a PlayerShip. The system will send the proper information.</p> <p>For a non-player ship the player id is sent.</p> Python <p>``` py    class Harvester(SpaceObject, MSpawnActive, MCommunications):       def some_method(self):          self.enable_comms(some_face_desc)</p> <pre><code>  def comms_selected(self, sim, player_id):\n     pass\n\n  def comms_message(self, sim, message, player_id):\n     pass\n</code></pre> <p>For a PlayerShip the other ship id is sent.</p> Python <pre><code>class Player(PlayerShip, MCommunications):\n   def some_method(self):\n      self.enable_comms(some_face_desc)\n\n   def comms_selected(self, sim, other_id):\n      pass\n\n   def comms_message(self, sim, message, other_id):\n      pass\n</code></pre>"},{"location":"api/dispatch/console_dispatcher/#example-sending-selection-info","title":"Example: Sending selection info","text":"<p>A non player ship should send its selection info in comms_selected. This will update the comms to show the name and face of the ship when selected. The self.face_desc can be used, or the face can be altered based on game conditions e.g. change to angry, changed to new face (change of command) etc.</p> Python <pre><code>class Harvester(SpaceObject, MSpawnActive, MCommunications):\n   def comms_selected(self, sim, player_id):\n      sbs.send_comms_selection_info(player_id, self.face_desc, \"green\", self.comms_id)\n</code></pre>"},{"location":"api/dispatch/console_dispatcher/#example-sending-comms-buttons","title":"Example: Sending comms buttons","text":"<p>comms_select is also the place where comms button could be sent to the comms console. This can be done based on the state of the ship.</p> Python <pre><code>class Harvester(SpaceObject, MSpawnActive, MCommunications):\n   def comms_selected(self, sim, player_id):\n      sbs.send_comms_selection_info(player_id, self.face_desc, \"green\", self.comms_id)\n\n     # if Empty it is waiting for what to harvest\n     if self.state == HarvesterState.EMPTY_WAITING:\n         sbs.send_comms_button_info(player_id, \"blue\", \"Harvest energy\", \"get_energy\")\n         sbs.send_comms_button_info(player_id, \"red\", \"Harvest minerals\", \"get_mineral\")\n         sbs.send_comms_button_info(player_id, \"gold\", \"Harvest rare metals\", \"get_rare\")\n         sbs.send_comms_button_info(player_id, \"silver\", \"Harvest alloys\", \"get_alloy\")\n         sbs.send_comms_button_info(player_id, \"green\", \"Harvest replicator fuel\", \"get_food\")\n\n     if self.state == HarvesterState.FULL_WAITING:\n         for base in self.find_close_list(sim, 'Spacedock'):\n             sbs.send_comms_button_info(player_id, \"yellow\", f\"Head to {base.obj.comms_id}\", f\"{base.obj.id}\")\n</code></pre>"},{"location":"api/dispatch/console_dispatcher/#example-handling-comms-button-messages","title":"Example: handling comms button messages","text":"<p>comms_message is called when a comms button is pressed. The message is the button_tag.</p> Python <pre><code>class Harvester(SpaceObject, MSpawnActive, MCommunications):\n  def comms_message(self, sim, message, player_id):\n\n     if message.isnumeric():\n         other_id = int(message)\n         self.target(sim,other_id, False)\n         # every ten seconds r\n         self.tsk = TickDispatcher.do_interval(sim,self.think, 5)\n         self.tsk.base_id = other_id\n         self.state = HarvesterState.RETURNING\n         return\n\n     match message:\n         case 'get_energy':\n             self.resource_type = ResourceTypes.ENERGY\n             self.send_comms('Gathering energy', 'green', player_id)\n             self.state = HarvesterState.HARVESTING\n             self.find_target(sim)\n         case 'get_mineral':\n             self.resource_type = ResourceTypes.MINERAL\n             self.send_comms('Gathering minerals', 'green', player_id)\n             self.state = HarvesterState.HARVESTING\n             self.find_target(sim)\n         case 'get_rare':\n             self.resource_type = ResourceTypes.RARE_METAL\n             self.send_comms('Gathering rare metals', 'green', player_id)\n             self.state = HarvesterState.HARVESTING\n             self.find_target(sim)\n         case 'get_alloy':\n             self.resource_type = ResourceTypes.ALLOY\n             self.send_comms('Gathering alloys', 'green', player_id)\n             self.state = HarvesterState.HARVESTING\n             self.find_target(sim)\n         case 'get_food':\n             self.resource_type = ResourceTypes.FOOD\n             self.send_comms('Gathering replicator fuel', 'green', player_id)\n             self.state = HarvesterState.HARVESTING\n             self.find_target(sim)\n         case '_':\n             return\n\n     # Clear buttons?\n     sbs.send_comms_selection_info(player_id, self.face_desc, \"green\", self.comms_id)\n</code></pre>"},{"location":"api/dispatch/console_dispatcher/#non-class-console-handling","title":"non class console handling","text":"<p>MCommunications is useful for any class. However, if their is another way desired to handle console messages.</p> <p>meth:<code>~sbs_utils.consoledispatcher.ConsoleDispatcher.add_select</code> adds any callback to the console dispatcher system for handling selection.</p> <p>meth:<code>~sbs_utils.consoledispatcher.ConsoleDispatcher.add_message</code> adds any callback to the console dispatcher system for handling messages.</p> Python <pre><code>def some_select_handler(self, sim, other_id):\n   pass\n\ndef some_message_handler(self, sim, message, other_id):\n   pass\n\ndef some_function(self, sim, message, player_id):\n   ConsoleDispatcher.add_select(some_id, 'comms_targetUID', some_select_handler)\n   ConsoleDispatcher.add_message(some_id, 'comms_targetUID', some_message_handler)\n</code></pre>"},{"location":"api/dispatch/console_dispatcher/#api-consoledispatcher-module","title":"API consoledispatcher module","text":""},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.ConsoleDispatcher","title":"<code>ConsoleDispatcher</code>","text":"Source code in <code>sbs_utils\\consoledispatcher.py</code> <pre><code>class ConsoleDispatcher:\n    _dispatch_select = {}\n    _dispatch_messages = {}\n    # tick dispatch\n    convert_to_console_id = None\n\n    def add_default_select(console: str, cb: typing.Callable):\n        \"\"\" add a target for console selection\n        :param console: The consoles unique ID\n        :type console: string\n        :param cb: call back function\n        :type cb:  should have arguments of other ctx and object's id\n        \"\"\"\n        ConsoleDispatcher.add_select(0, console, cb)\n\n    def add_always_select(console: str, cb: typing.Callable):\n        \"\"\" add a target for console selection\n        :param console: The consoles unique ID\n        :type console: string\n        :param cb: call back function\n        :type cb:  should have arguments of other ctx and object's id\n        \"\"\"\n        ConsoleDispatcher.add_select(None, console, cb)\n\n    def add_select(an_id: int, console: str, cb: typing.Callable):\n        \"\"\" add a target for console selection\n\n        :param an_id: A ships ID player or non-player\n        :type an_id: int\n        :param console: The consoles unique ID\n        :type console: string\n        :param cb: call back function\n        :type cb:  should have arguments of other ctx and object's id\n        \"\"\"\n        key = (an_id, console)\n        collection = ConsoleDispatcher._dispatch_select.get(key, list())\n        # Using a list in a set like fashion, but so there is a known order\n        if cb in collection:\n            # Make sure it is in only once\n            # but allow it to move to the front \n            collection.remove(cb)\n        collection.insert(0,cb)\n        ConsoleDispatcher._dispatch_select[key] = collection\n\n    def add_select_pair(an_id: int, another_id: int, console: str, cb: typing.Callable):\n        \"\"\" add a target for console selection\n\n        :param an_id: A ships ID player or non-player\n        :type an_id: int\n        :param console: The consoles unique ID\n        :type console: string\n        :param cb: call back function\n        :type cb:  should have arguments of other ctx and object's id\n        \"\"\"\n        ConsoleDispatcher._dispatch_select[(an_id, another_id, console)] = cb\n\n    def add_default_message(console: str, cb: typing.Callable):\n        \"\"\" add a target for console message\n\n        :param console: The consoles unique ID\n        :type console: string\n        :param cb: call back function\n        :type cb:  should have arguments of other ctx, message and object's id\n        \"\"\"\n        ConsoleDispatcher.add_message(0, console, cb)\n\n    def add_message(an_id: int, console: str, cb: typing.Callable):\n        \"\"\" add a target for console message\n\n        :param an_id: A ships ID player or non-player\n        :type an_id: int\n        :param console: The consoles unique ID\n        :type console: string\n        :param cb: call back function\n        :type cb:  should have arguments of other ctx, message and object's id\n        \"\"\"\n        key = (an_id, console)\n        collection = ConsoleDispatcher._dispatch_messages.get(key, list())\n        if cb in collection:\n            # Make sure it is in only once\n            # but allow it to move to the front \n            collection.remove(cb)\n        collection.insert(0,cb)\n        ConsoleDispatcher._dispatch_messages[key] = collection\n\n\n    def add_message_pair(an_id: int, another, console: str, cb: typing.Callable):\n        \"\"\" add a target for console message\n\n        :param an_id: A ships ID player or non-player\n        :type an_id: int\n        :param console: The consoles unique ID\n        :type console: string\n        :param cb: call back function\n        :type cb:  should have arguments of other ctx, message and object's id\n        \"\"\"\n        ConsoleDispatcher._dispatch_messages[(an_id, another, console)] = cb\n\n\n    def remove_select(an_id: int, console: str, cb=None):\n        \"\"\" remove a target for console selection\n\n        :param an_id: A ships ID player or non-player\n        :type an_id: int\n        :param console: The consoles unique ID\n        :type console: string\n        \"\"\"\n        key = (an_id, console)\n        if not key in ConsoleDispatcher._dispatch_select:\n            return\n        if cb is None:\n            ConsoleDispatcher._dispatch_select.pop((an_id, console))\n        else:\n            collection = ConsoleDispatcher._dispatch_select.get(key, set())\n            collection.discard(cb)\n            if len(collection) == 0:\n                ConsoleDispatcher._dispatch_select.pop((an_id, console))\n            else:\n                ConsoleDispatcher._dispatch_select[key] = collection\n\n    def remove_select_pair(an_id: int, another_id:int, console: str):\n        \"\"\" remove a target for console selection\n\n        :param an_id: A ships ID player or non-player\n        :type an_id: int\n        :param console: The consoles unique ID\n        :type console: string\n        \"\"\"\n        ConsoleDispatcher._dispatch_select.pop((an_id, another_id, console))\n\n    def remove_message(an_id: int, console: str, cb=None):\n        \"\"\" remove a target for console messages\n\n        :param an_id: A ships ID player or non-player\n        :type an_id: int\n        :param console: The consoles unique ID\n        :type console: string\n        \"\"\"\n        key = (an_id, console)\n        if not key in ConsoleDispatcher._dispatch_messages:\n            return\n        if cb is None:\n            ConsoleDispatcher._dispatch_messages.pop((an_id, console))\n        else:\n            collection = ConsoleDispatcher._dispatch_messages.get(key, set())\n            collection.discard(cb)\n            if len(collection) == 0:\n                ConsoleDispatcher._dispatch_messages.pop((an_id, console))\n            else:\n                ConsoleDispatcher._dispatch_messages[key] = collection\n\n    def remove_message_pair(an_id: int, another_id:int, console: str):\n        \"\"\" remove a target for console messages\n\n        :param an_id: A ships ID player or non-player\n        :type an_id: int\n        :param console: The consoles unique ID\n        :type console: string\n        \"\"\"\n        ConsoleDispatcher._dispatch_messages.pop((an_id, another_id, console))\n\n    def dispatch_select(event):\n        \"\"\" dispatches a console selection\n\n        :param player_id: A player ship ID\n        :type player_id: int\n        :param console: The consoles unique ID\n        :type console: string\n        :param other_id: A non player ship ID player\n        :type other_id: int\n        \"\"\"\n        console = ConsoleDispatcher.convert_to_console_id(event)\n        if console is None:\n            return False\n        ConsoleDispatcher.do_select(event, console)\n\n        #\n        # Allow to route to always\n        #\n        cb_set = ConsoleDispatcher._dispatch_select.get((None, console))\n        if cb_set is not None:\n            for cb in cb_set:\n                cb(event.origin_id, event)\n\n        #handled = False\n        cb = ConsoleDispatcher._dispatch_select.get((event.origin_id, event.selected_id, console))\n        if cb is not None:\n            cb(event.selected_id, event)\n            return True\n\n        # Allow to route to the selected ship too\n        cb = ConsoleDispatcher._dispatch_select.get((event.selected_id, event.origin_id, console))\n        if cb is not None:\n            cb(event.origin_id, event)\n            return True\n\n        cb_set = ConsoleDispatcher._dispatch_select.get((event.origin_id, console))\n        if cb_set is not None:\n            for cb in cb_set:\n                cb(event.selected_id, event)\n            return True\n\n        # Allow to route to the selected ship too\n        cb_set = ConsoleDispatcher._dispatch_select.get((event.selected_id, console))\n        if cb_set is not None:\n            for cb in cb_set:\n                cb(event.origin_id, event)\n            return True\n\n        # Allow to route to defaults too\n        cb_set = ConsoleDispatcher._dispatch_select.get((0, console))\n        if cb_set is not None:\n            for cb in cb_set:\n                cb(event.origin_id, event)\n            return True\n\n        return False\n\n\n    def dispatch_message(event, console):\n        \"\"\" dispatches a console message\n\n        :param message_tag: The message\n        :type message_tag: string\n        :param player_id: A player ship ID\n        :type player_id: int\n        :param console: The consoles unique ID\n        :type console: string\n        :param other_id: A non player ship ID player\n        :type other_id: int\n        \"\"\"\n        cb = ConsoleDispatcher._dispatch_messages.get((event.origin_id, event.selected_id, console))\n        if cb is not None:\n            cb(event.sub_tag, event.selected_id, event)\n            return\n\n        cb = ConsoleDispatcher._dispatch_messages.get((event.selected_id, event.origin_id, console))\n        # Allow the target to process\n        if cb is not None:\n            cb(event.sub_tag, event.origin_id, event)\n            return\n\n        cb_set = ConsoleDispatcher._dispatch_messages.get((event.origin_id, console))\n        if cb_set is not None:\n            for cb in cb_set:\n                cb(event.sub_tag, event.selected_id, event)\n            return True\n\n        # Allow to route to the selected ship too\n        cb_set = ConsoleDispatcher._dispatch_messages.get((event.selected_id, console))\n        if cb_set is not None:\n            for cb in cb_set:\n                cb(event.sub_tag, event.origin_id, event)\n            return True\n\n        # Allow to route to the default too\n        cb_set = ConsoleDispatcher._dispatch_messages.get((0, console))\n        if cb_set is not None:\n            for cb in cb_set:\n                cb(event.sub_tag, event.origin_id, event)\n            return True\n\n\n    def convert(event):\n        if \"science_sorted_list\" in event.value_tag or event.sub_tag == \"science_target_UID\":\n            return \"science_target_UID\"\n        if \"comms_sorted_list\" == event.value_tag or event.sub_tag == \"comms_target_UID\":\n            return \"comms_target_UID\"\n        if \"grid_object_list\" == event.value_tag or event.sub_tag == \"grid_selected_UID\":\n            return \"grid_selected_UID\"\n\n        # Catch the 2dview\n        if \"weap\" in event.sub_tag or event.sub_tag == \"weapon_target_UID\":\n            return \"weapon_target_UID\"\n        if \"sci\" in event.sub_tag or event.sub_tag == \"science_target_UID\":\n            return \"science_target_UID\"\n\n        return None\n\n\n    def do_select(event, console):\n        #\n        # This was from a follow route, don't select\n        #\n        if event.extra_tag==\"__init__\":\n            return\n        my_ship = FrameContext.context.sim.get_space_object(event.origin_id)\n\n        blob = my_ship.data_set\n        target = event.selected_id\n\n        disabled_count = get_inventory_value(event.origin_id, console, 0)\n        # if the console selection is disable don't allow selection\n        if disabled_count &gt; 0: \n            target = 0\n\n        blob.set(console, target,0)\n\n\n        co = Agent.get(event.client_id)\n        # Set the selection as inventory\n        if co:\n            co.set_inventory_value(console.upper(), event.selected_id)\n        if \"grid\" in console:\n            blob.set(\"grid_selected_ship_UID\", event.parent_id,0)\n            if co:\n                co.set_inventory_value(\"grid_selected_ship_UID\".upper(), event.parent_id)\n</code></pre>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.ConsoleDispatcher.add_always_select","title":"<code>add_always_select(console, cb)</code>","text":"<p>add a target for console selection :param console: The consoles unique ID :type console: string :param cb: call back function :type cb:  should have arguments of other ctx and object's id</p> Source code in <code>sbs_utils\\consoledispatcher.py</code> <pre><code>def add_always_select(console: str, cb: typing.Callable):\n    \"\"\" add a target for console selection\n    :param console: The consoles unique ID\n    :type console: string\n    :param cb: call back function\n    :type cb:  should have arguments of other ctx and object's id\n    \"\"\"\n    ConsoleDispatcher.add_select(None, console, cb)\n</code></pre>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.ConsoleDispatcher.add_default_message","title":"<code>add_default_message(console, cb)</code>","text":"<p>add a target for console message</p> <p>:param console: The consoles unique ID :type console: string :param cb: call back function :type cb:  should have arguments of other ctx, message and object's id</p> Source code in <code>sbs_utils\\consoledispatcher.py</code> <pre><code>def add_default_message(console: str, cb: typing.Callable):\n    \"\"\" add a target for console message\n\n    :param console: The consoles unique ID\n    :type console: string\n    :param cb: call back function\n    :type cb:  should have arguments of other ctx, message and object's id\n    \"\"\"\n    ConsoleDispatcher.add_message(0, console, cb)\n</code></pre>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.ConsoleDispatcher.add_default_select","title":"<code>add_default_select(console, cb)</code>","text":"<p>add a target for console selection :param console: The consoles unique ID :type console: string :param cb: call back function :type cb:  should have arguments of other ctx and object's id</p> Source code in <code>sbs_utils\\consoledispatcher.py</code> <pre><code>def add_default_select(console: str, cb: typing.Callable):\n    \"\"\" add a target for console selection\n    :param console: The consoles unique ID\n    :type console: string\n    :param cb: call back function\n    :type cb:  should have arguments of other ctx and object's id\n    \"\"\"\n    ConsoleDispatcher.add_select(0, console, cb)\n</code></pre>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.ConsoleDispatcher.add_message","title":"<code>add_message(an_id, console, cb)</code>","text":"<p>add a target for console message</p> <p>:param an_id: A ships ID player or non-player :type an_id: int :param console: The consoles unique ID :type console: string :param cb: call back function :type cb:  should have arguments of other ctx, message and object's id</p> Source code in <code>sbs_utils\\consoledispatcher.py</code> <pre><code>def add_message(an_id: int, console: str, cb: typing.Callable):\n    \"\"\" add a target for console message\n\n    :param an_id: A ships ID player or non-player\n    :type an_id: int\n    :param console: The consoles unique ID\n    :type console: string\n    :param cb: call back function\n    :type cb:  should have arguments of other ctx, message and object's id\n    \"\"\"\n    key = (an_id, console)\n    collection = ConsoleDispatcher._dispatch_messages.get(key, list())\n    if cb in collection:\n        # Make sure it is in only once\n        # but allow it to move to the front \n        collection.remove(cb)\n    collection.insert(0,cb)\n    ConsoleDispatcher._dispatch_messages[key] = collection\n</code></pre>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.ConsoleDispatcher.add_message_pair","title":"<code>add_message_pair(an_id, another, console, cb)</code>","text":"<p>add a target for console message</p> <p>:param an_id: A ships ID player or non-player :type an_id: int :param console: The consoles unique ID :type console: string :param cb: call back function :type cb:  should have arguments of other ctx, message and object's id</p> Source code in <code>sbs_utils\\consoledispatcher.py</code> <pre><code>def add_message_pair(an_id: int, another, console: str, cb: typing.Callable):\n    \"\"\" add a target for console message\n\n    :param an_id: A ships ID player or non-player\n    :type an_id: int\n    :param console: The consoles unique ID\n    :type console: string\n    :param cb: call back function\n    :type cb:  should have arguments of other ctx, message and object's id\n    \"\"\"\n    ConsoleDispatcher._dispatch_messages[(an_id, another, console)] = cb\n</code></pre>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.ConsoleDispatcher.add_select","title":"<code>add_select(an_id, console, cb)</code>","text":"<p>add a target for console selection</p> <p>:param an_id: A ships ID player or non-player :type an_id: int :param console: The consoles unique ID :type console: string :param cb: call back function :type cb:  should have arguments of other ctx and object's id</p> Source code in <code>sbs_utils\\consoledispatcher.py</code> <pre><code>def add_select(an_id: int, console: str, cb: typing.Callable):\n    \"\"\" add a target for console selection\n\n    :param an_id: A ships ID player or non-player\n    :type an_id: int\n    :param console: The consoles unique ID\n    :type console: string\n    :param cb: call back function\n    :type cb:  should have arguments of other ctx and object's id\n    \"\"\"\n    key = (an_id, console)\n    collection = ConsoleDispatcher._dispatch_select.get(key, list())\n    # Using a list in a set like fashion, but so there is a known order\n    if cb in collection:\n        # Make sure it is in only once\n        # but allow it to move to the front \n        collection.remove(cb)\n    collection.insert(0,cb)\n    ConsoleDispatcher._dispatch_select[key] = collection\n</code></pre>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.ConsoleDispatcher.add_select_pair","title":"<code>add_select_pair(an_id, another_id, console, cb)</code>","text":"<p>add a target for console selection</p> <p>:param an_id: A ships ID player or non-player :type an_id: int :param console: The consoles unique ID :type console: string :param cb: call back function :type cb:  should have arguments of other ctx and object's id</p> Source code in <code>sbs_utils\\consoledispatcher.py</code> <pre><code>def add_select_pair(an_id: int, another_id: int, console: str, cb: typing.Callable):\n    \"\"\" add a target for console selection\n\n    :param an_id: A ships ID player or non-player\n    :type an_id: int\n    :param console: The consoles unique ID\n    :type console: string\n    :param cb: call back function\n    :type cb:  should have arguments of other ctx and object's id\n    \"\"\"\n    ConsoleDispatcher._dispatch_select[(an_id, another_id, console)] = cb\n</code></pre>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.ConsoleDispatcher.dispatch_message","title":"<code>dispatch_message(event, console)</code>","text":"<p>dispatches a console message</p> <p>:param message_tag: The message :type message_tag: string :param player_id: A player ship ID :type player_id: int :param console: The consoles unique ID :type console: string :param other_id: A non player ship ID player :type other_id: int</p> Source code in <code>sbs_utils\\consoledispatcher.py</code> <pre><code>def dispatch_message(event, console):\n    \"\"\" dispatches a console message\n\n    :param message_tag: The message\n    :type message_tag: string\n    :param player_id: A player ship ID\n    :type player_id: int\n    :param console: The consoles unique ID\n    :type console: string\n    :param other_id: A non player ship ID player\n    :type other_id: int\n    \"\"\"\n    cb = ConsoleDispatcher._dispatch_messages.get((event.origin_id, event.selected_id, console))\n    if cb is not None:\n        cb(event.sub_tag, event.selected_id, event)\n        return\n\n    cb = ConsoleDispatcher._dispatch_messages.get((event.selected_id, event.origin_id, console))\n    # Allow the target to process\n    if cb is not None:\n        cb(event.sub_tag, event.origin_id, event)\n        return\n\n    cb_set = ConsoleDispatcher._dispatch_messages.get((event.origin_id, console))\n    if cb_set is not None:\n        for cb in cb_set:\n            cb(event.sub_tag, event.selected_id, event)\n        return True\n\n    # Allow to route to the selected ship too\n    cb_set = ConsoleDispatcher._dispatch_messages.get((event.selected_id, console))\n    if cb_set is not None:\n        for cb in cb_set:\n            cb(event.sub_tag, event.origin_id, event)\n        return True\n\n    # Allow to route to the default too\n    cb_set = ConsoleDispatcher._dispatch_messages.get((0, console))\n    if cb_set is not None:\n        for cb in cb_set:\n            cb(event.sub_tag, event.origin_id, event)\n        return True\n</code></pre>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.ConsoleDispatcher.dispatch_select","title":"<code>dispatch_select(event)</code>","text":"<p>dispatches a console selection</p> <p>:param player_id: A player ship ID :type player_id: int :param console: The consoles unique ID :type console: string :param other_id: A non player ship ID player :type other_id: int</p> Source code in <code>sbs_utils\\consoledispatcher.py</code> <pre><code>def dispatch_select(event):\n    \"\"\" dispatches a console selection\n\n    :param player_id: A player ship ID\n    :type player_id: int\n    :param console: The consoles unique ID\n    :type console: string\n    :param other_id: A non player ship ID player\n    :type other_id: int\n    \"\"\"\n    console = ConsoleDispatcher.convert_to_console_id(event)\n    if console is None:\n        return False\n    ConsoleDispatcher.do_select(event, console)\n\n    #\n    # Allow to route to always\n    #\n    cb_set = ConsoleDispatcher._dispatch_select.get((None, console))\n    if cb_set is not None:\n        for cb in cb_set:\n            cb(event.origin_id, event)\n\n    #handled = False\n    cb = ConsoleDispatcher._dispatch_select.get((event.origin_id, event.selected_id, console))\n    if cb is not None:\n        cb(event.selected_id, event)\n        return True\n\n    # Allow to route to the selected ship too\n    cb = ConsoleDispatcher._dispatch_select.get((event.selected_id, event.origin_id, console))\n    if cb is not None:\n        cb(event.origin_id, event)\n        return True\n\n    cb_set = ConsoleDispatcher._dispatch_select.get((event.origin_id, console))\n    if cb_set is not None:\n        for cb in cb_set:\n            cb(event.selected_id, event)\n        return True\n\n    # Allow to route to the selected ship too\n    cb_set = ConsoleDispatcher._dispatch_select.get((event.selected_id, console))\n    if cb_set is not None:\n        for cb in cb_set:\n            cb(event.origin_id, event)\n        return True\n\n    # Allow to route to defaults too\n    cb_set = ConsoleDispatcher._dispatch_select.get((0, console))\n    if cb_set is not None:\n        for cb in cb_set:\n            cb(event.origin_id, event)\n        return True\n\n    return False\n</code></pre>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.ConsoleDispatcher.remove_message","title":"<code>remove_message(an_id, console, cb=None)</code>","text":"<p>remove a target for console messages</p> <p>:param an_id: A ships ID player or non-player :type an_id: int :param console: The consoles unique ID :type console: string</p> Source code in <code>sbs_utils\\consoledispatcher.py</code> <pre><code>def remove_message(an_id: int, console: str, cb=None):\n    \"\"\" remove a target for console messages\n\n    :param an_id: A ships ID player or non-player\n    :type an_id: int\n    :param console: The consoles unique ID\n    :type console: string\n    \"\"\"\n    key = (an_id, console)\n    if not key in ConsoleDispatcher._dispatch_messages:\n        return\n    if cb is None:\n        ConsoleDispatcher._dispatch_messages.pop((an_id, console))\n    else:\n        collection = ConsoleDispatcher._dispatch_messages.get(key, set())\n        collection.discard(cb)\n        if len(collection) == 0:\n            ConsoleDispatcher._dispatch_messages.pop((an_id, console))\n        else:\n            ConsoleDispatcher._dispatch_messages[key] = collection\n</code></pre>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.ConsoleDispatcher.remove_message_pair","title":"<code>remove_message_pair(an_id, another_id, console)</code>","text":"<p>remove a target for console messages</p> <p>:param an_id: A ships ID player or non-player :type an_id: int :param console: The consoles unique ID :type console: string</p> Source code in <code>sbs_utils\\consoledispatcher.py</code> <pre><code>def remove_message_pair(an_id: int, another_id:int, console: str):\n    \"\"\" remove a target for console messages\n\n    :param an_id: A ships ID player or non-player\n    :type an_id: int\n    :param console: The consoles unique ID\n    :type console: string\n    \"\"\"\n    ConsoleDispatcher._dispatch_messages.pop((an_id, another_id, console))\n</code></pre>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.ConsoleDispatcher.remove_select","title":"<code>remove_select(an_id, console, cb=None)</code>","text":"<p>remove a target for console selection</p> <p>:param an_id: A ships ID player or non-player :type an_id: int :param console: The consoles unique ID :type console: string</p> Source code in <code>sbs_utils\\consoledispatcher.py</code> <pre><code>def remove_select(an_id: int, console: str, cb=None):\n    \"\"\" remove a target for console selection\n\n    :param an_id: A ships ID player or non-player\n    :type an_id: int\n    :param console: The consoles unique ID\n    :type console: string\n    \"\"\"\n    key = (an_id, console)\n    if not key in ConsoleDispatcher._dispatch_select:\n        return\n    if cb is None:\n        ConsoleDispatcher._dispatch_select.pop((an_id, console))\n    else:\n        collection = ConsoleDispatcher._dispatch_select.get(key, set())\n        collection.discard(cb)\n        if len(collection) == 0:\n            ConsoleDispatcher._dispatch_select.pop((an_id, console))\n        else:\n            ConsoleDispatcher._dispatch_select[key] = collection\n</code></pre>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.ConsoleDispatcher.remove_select_pair","title":"<code>remove_select_pair(an_id, another_id, console)</code>","text":"<p>remove a target for console selection</p> <p>:param an_id: A ships ID player or non-player :type an_id: int :param console: The consoles unique ID :type console: string</p> Source code in <code>sbs_utils\\consoledispatcher.py</code> <pre><code>def remove_select_pair(an_id: int, another_id:int, console: str):\n    \"\"\" remove a target for console selection\n\n    :param an_id: A ships ID player or non-player\n    :type an_id: int\n    :param console: The consoles unique ID\n    :type console: string\n    \"\"\"\n    ConsoleDispatcher._dispatch_select.pop((an_id, another_id, console))\n</code></pre>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.MCommunications","title":"<code>MCommunications</code>","text":"Source code in <code>sbs_utils\\consoledispatcher.py</code> <pre><code>class MCommunications:\n    def enable_comms(self, face_desc=None):\n        \"\"\" includes in ConsoleDispatch system\n\n        :param face_desc: Face Description\n        :type face_desc: string\n        \"\"\"\n        self.face_desc = face_desc if face_desc is not None \\\n            else f\"ter #964b00 8 1;ter #968b00 3 0;ter #968b00 4 0;ter #968b00 5 2;ter #fff 3 5;ter #964b00 8 4;\"\n\n        ConsoleDispatcher.add_select(self.id, 'comms_target_UID', self.comms_selected)\n        ConsoleDispatcher.add_message(self.id, 'comms_target_UID', self.comms_message)\n\n    def comms_selected(self, an_id, event):\n        \"\"\" handle a comms selection\n        :param an_id: The other ship involved\n        :type an_id: int\n        \"\"\"\n        pass\n\n    def comms_message(self, message, an_id, event):\n        \"\"\" handle a comms message\n\n        :param message_tag: The message\n        :type message_tag: string\n        :param an_id: The other ship involved\n        :type an_id: int\n        \"\"\"\n        pass\n</code></pre>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.MCommunications.comms_message","title":"<code>comms_message(message, an_id, event)</code>","text":"<p>handle a comms message</p> <p>:param message_tag: The message :type message_tag: string :param an_id: The other ship involved :type an_id: int</p> Source code in <code>sbs_utils\\consoledispatcher.py</code> <pre><code>def comms_message(self, message, an_id, event):\n    \"\"\" handle a comms message\n\n    :param message_tag: The message\n    :type message_tag: string\n    :param an_id: The other ship involved\n    :type an_id: int\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.MCommunications.comms_selected","title":"<code>comms_selected(an_id, event)</code>","text":"<p>handle a comms selection :param an_id: The other ship involved :type an_id: int</p> Source code in <code>sbs_utils\\consoledispatcher.py</code> <pre><code>def comms_selected(self, an_id, event):\n    \"\"\" handle a comms selection\n    :param an_id: The other ship involved\n    :type an_id: int\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api/dispatch/console_dispatcher/#sbs_utils.consoledispatcher.MCommunications.enable_comms","title":"<code>enable_comms(face_desc=None)</code>","text":"<p>includes in ConsoleDispatch system</p> <p>:param face_desc: Face Description :type face_desc: string</p> Source code in <code>sbs_utils\\consoledispatcher.py</code> <pre><code>def enable_comms(self, face_desc=None):\n    \"\"\" includes in ConsoleDispatch system\n\n    :param face_desc: Face Description\n    :type face_desc: string\n    \"\"\"\n    self.face_desc = face_desc if face_desc is not None \\\n        else f\"ter #964b00 8 1;ter #968b00 3 0;ter #968b00 4 0;ter #968b00 5 2;ter #fff 3 5;ter #964b00 8 4;\"\n\n    ConsoleDispatcher.add_select(self.id, 'comms_target_UID', self.comms_selected)\n    ConsoleDispatcher.add_message(self.id, 'comms_target_UID', self.comms_message)\n</code></pre>"},{"location":"api/dispatch/damage_dispatcher/","title":"The Damage Dispatcher","text":"<p>The DamageDispatcher is used to route damage events to an object interested in the damage.</p>"},{"location":"api/dispatch/damage_dispatcher/#artemis-cosmos-damage-system","title":"Artemis Cosmos damage system","text":"<p>Artemis Cosmos calls the script function HandleDamageEvent when an item receives damage.</p>"},{"location":"api/dispatch/damage_dispatcher/#sbs_utils-damage-system","title":"sbs_utils damage system","text":"<p>The DispatcherDispatcher is intended receive these and route them to callback functions. This can further be used to direct these to classes that represent the ships enabling the handling of this code to be handled in context of the ship(s) involved.</p> <p>The HandleDamage should call </p> Python <pre><code>def HandleDamageEvent(sim, damage_event):\n DamageDispatcher.dispatch_damage(sim,damage_event)\n</code></pre> <p>Importing the hookhandlers module it does by default.</p> Python <pre><code>from sbs_utils.handlerhooks import *\n# no longer need to implement handlers in script.py\n</code></pre>"},{"location":"api/dispatch/damage_dispatcher/#being-notified-of-damage","title":"Being notified of damage","text":""},{"location":"api/dispatch/damage_dispatcher/#source-of-damage","title":"Source of damage","text":"Python <pre><code>class Harvester(SpaceObject, MSpawnActive):\n\n   def spawn(self, sim, v, side):\n      ship = super().spawn_v(sim,v, None, side,  \"Cargo\", \"behav_npcship\")\n      DamageDispatcher.add_source(self.id, self.on_damage_source)\n      return ship\n\n   def on_damage_source(self, sim, damage_event):\n      pass\n</code></pre>"},{"location":"api/dispatch/damage_dispatcher/#target-of-damage","title":"Target of damage","text":"Python <pre><code>class Asteroid(SpaceObject, MSpawnActive):\n\n   def spawn(self, sim, v, side):\n      ship = super().spawn_v(sim,v, None, side,  \"Asteroid 1\", \"behav_asteroid\")\n      DamageDispatcher.add_target(self.id, self.on_damage_target)\n      return ship\n\n   def on_damage_target(self, sim, damage_event):\n      pass\n</code></pre> <p>damage_amount: float, how much damage was done  damage_type: string, tag of damage type. 'destroyed' means that this event is really a dead event, not a damage event  event_time: long int, time this damage occured, compare to simulation.time_tick_counter  source_id: int, ID of unit that caused the damage.  Might be zero.  source_parent_id: int, ID of PARENT of unit that caused the damage.  Might be zero.  target_id: int, ID of unit that suffered the damage</p>"},{"location":"api/dispatch/damage_dispatcher/#api-damagedispatcher-module","title":"API: damagedispatcher module","text":""},{"location":"api/dispatch/tick_dispatcher/","title":"TickDispatcher","text":"<p>Artemis Cosmos runs the python script at a set interval (currently once a second). This is done via the HandleSimulationTick method.</p>"},{"location":"api/dispatch/tick_dispatcher/#usage","title":"Usage","text":"<p>The TickDispatcher is used to create tasks that are called when the HandleSimulationTick is called. The function meth:<code>~sbs_utils.tickdispatcher.TickDispatcher.dispatch_tick</code> should be called in HandleSimulationTick, and ideally this is the only code that is needed.</p> Python <pre><code>   def  HandleSimulationTick(sim):\n      TickDispatcher.dispatch_tick(sim)\n</code></pre> <p>Importing the hookhandlers module it does by default.</p> Python <pre><code>   from sbs_utils.handlerhooks import *\n   # no longer need to implement handlers in script.py\n</code></pre> <p>One could implement their own way of handling time and tick related code, the goal of the TickDispatcher is to have a common way to organize this logic.</p> <p>A TickTask is similar to Artemis XML's timer events and are ideally more efficient since they only live while they are relevant.</p> <p>To create a TickTask you can use one of two functions.</p> <p> will schedule a task that is run only one time.</p> <p> will schedule to run multiple times or continuously.</p> <p>Both methods take the simulation used to track the start time, a callback function, a delay time. do_interval additionally optionally takes the number of times it should run. The default is None, which is meant to indicate run continuously.</p> <p>The callback functions will receive the simulation and the task as arguments. Class methods used as a callback will receive 'self' as the first argument.</p>"},{"location":"api/dispatch/tick_dispatcher/#example-run-a-function-once","title":"Example: run a function once","text":"<p>The following will run the function after 5 seconds.</p> Python <pre><code>from sbs_utils.tickdispatcher import TickDispatcher\n\ndef call_me_later(sim, task):\n   print('Hello, Tick Tasks')\n\n# Some other place\nTickDispatcher.do_once(sim, call_me_later, 5)   \n</code></pre> <p>The following will run a class method on an object after 5 seconds.</p> Python <pre><code>from sbs_utils.tickdispatcher import TickDispatcher\n\nclass MyPlayer(PlayerShip):\n   def call_me_later(self, sim, task):\n      print('Hello, Tick Tasks')\n\n# Some other place\nplayer_one = MyPlayer()\nTickDispatcher.do_once(sim, player_one.call_me_later, 5)   \n</code></pre> <p>The following will run a class method on an object after 5 seconds. This one show using self.</p> Python <pre><code>from sbs_utils.tickdispatcher import TickDispatcher\n\nclass MyPlayer(PlayerShip):\n   def call_me_later(self, sim, task):\n      print('Hello, Tick Tasks')\n\n   def some_other_method(self):      \n      TickDispatcher.do_once(sim, self.call_me_later, 5)   \n</code></pre>"},{"location":"api/dispatch/tick_dispatcher/#example-run-a-function-multiple-times","title":"Example: run a function multiple times","text":"<p>The following will run the function every 5 seconds, 4 times</p> Python <pre><code>from sbs_utils.tickdispatcher import TickDispatcher\n\ndef call_me_later(sim, task):\n   print('Hello, Tick Tasks')\n\n# Some other place\nTickDispatcher.do_interval(sim, call_me_later, 5, 4)   \n</code></pre> <p>The following will run a class method on an object after 5 seconds four times. This one show using self.</p> Python <pre><code>from sbs_utils.tickdispatcher import TickDispatcher\n\nclass MyPlayer(PlayerShip):\n   def call_me_later(self, sim, task):\n      print('Hello, Tick Tasks')\n\n   def some_other_method(self):      \n      TickDispatcher.do_interval(sim, self.call_me_later, 5,4)   \n</code></pre>"},{"location":"api/dispatch/tick_dispatcher/#example-run-continuously","title":"Example: run continuously","text":"<p>The following will run the function every tick. This can be done with classes as well, those examples will be similar to above.</p> Python <pre><code>from sbs_utils.tickdispatcher import TickDispatcher\n\ndef call_me_later(sim, task):\n   print('Hello, Tick Tasks')\n\n# Some other place\nTickDispatcher.do_interval(sim, call_me_later, 0)   \n</code></pre>"},{"location":"api/dispatch/tick_dispatcher/#example-stopping-a-task","title":"Example: Stopping a task","text":"<p>The following will run as task and stop it when a condition is met.</p> Python <pre><code>from sbs_utils.tickdispatcher import TickDispatcher\n\nclass MyPlayer(PlayerShip):\n   def call_me_later(self, sim, task):\n      print('Hello, Tick Tasks')\n      if some_thing_that_stops_it:\n         task.stop()\n\n   def some_other_method(self):      \n      TickDispatcher.do_interval(sim, self.call_me_later, 5)   \n</code></pre>"},{"location":"api/dispatch/tick_dispatcher/#example-passing-data","title":"Example: passing data","text":"<p>The following will run will pass data to the callback.</p> Python <pre><code>from sbs_utils.tickdispatcher import TickDispatcher\n\ndef call_me_later(sim, task):\n   print('Hello, Tick Tasks')\n   # use the data attached to the task\n   print(task.data)\n\n# Some other place\nthetask = TickDispatcher.do_interval(sim, call_me_later, 0)\n# attach data to the task\nthetask.data = 42\n</code></pre> <p>For completeness: using the object 'self' data</p> Python <pre><code>from sbs_utils.tickdispatcher import TickDispatcher\n\nclass MyPlayer(PlayerShip):\n   data = 42\n   def call_me_later(self, sim, task):\n      print('Hello, Tick Tasks')\n      print(self.data)\n\n   def some_other_method(self):      \n      TickDispatcher.do_interval(sim, self.call_me_later, 5)   \n</code></pre>"},{"location":"api/dispatch/tick_dispatcher/#api-tickdispatcher-module","title":"API: tickdispatcher module","text":""},{"location":"api/dispatch/tick_dispatcher/#sbs_utils.tickdispatcher.TickDispatcher","title":"<code>TickDispatcher</code>","text":"<p>The Tick Dispatcher is used to manager timed items via the HandleSimulationTick</p> Source code in <code>sbs_utils\\tickdispatcher.py</code> <pre><code>class TickDispatcher:\n    \"\"\"\n    The Tick Dispatcher is used to manager timed items via the HandleSimulationTick\n    \"\"\"\n    _dispatch_tick = set()\n    _new_this_tick = set()\n    completed = set()\n    current = 0\n    # ticks per second\n    tps = 30\n\n    def do_once(cb: callable, delay: int):\n        \"\"\" Create and return a task that executes once\n\n        :param delay: the time in seconds for the task to delay\n        :type delay: int\n        :return: The task is returned and can be used to attach data for future use.\n        :rtype: TickTask\n\n        example:\n            def some_use():\n                t = TickDispatcher.do_once(the_callback, 5)\n                t.data = some_data\n\n            def the_callback(t):\n                print(t.some_data)\n        \"\"\"\n        t = TickTask(cb, delay, 1)\n        TickDispatcher._new_this_tick.add(t)\n        return t\n\n    def do_interval(cb: callable, delay: int, count: int = None):\n        \"\"\" Create and return a task that executes more than once\n\n        :param ctx: The Artemis Cosmos simulation\n        :param cb: call back function\n        :param delay: the time in seconds for the task to delay\n        :type delay: int\n        :param count: The number of times to run None mean infinite\n        :type count: int or None\n        :return: The task is returned and can be used to attach data for future use.\n        :rtype: TickFTask\n\n        example:\n\n        .. code-block:: python\n\n            def some_use():\n                t = TickDispatcher.do_interval(the_callback, 5)\n                t.data = some_data\n\n            def the_callback(t):\n                print(t.some_data)\n                if t.some_data.some_condition:\n                    t.stop()\n        \"\"\"\n        t = TickTask(cb, delay, count)\n        TickDispatcher._new_this_tick.add(t)\n        return t\n\n    def dispatch_tick():\n        \"\"\" Process all the tasks\n        The task is updated to see if it should be triggered, \n        and if it is completed\n        \"\"\"\n        TickDispatcher.current = FrameContext.context.sim.time_tick_counter\n        TickDispatcher.completed = set()\n        # Before running add items that are new\n        # these would have been added last time\n        # this was run\n        for a in TickDispatcher._new_this_tick:\n            TickDispatcher._dispatch_tick.add(a)\n\n        TickDispatcher._new_this_tick = set()\n        # process all the tasks\n        for t in TickDispatcher._dispatch_tick:\n            if t._update():\n                TickDispatcher.completed.add(t)\n\n        # Remove tasks are completed\n        for c in TickDispatcher.completed:\n            TickDispatcher._dispatch_tick.remove(c)\n</code></pre>"},{"location":"api/dispatch/tick_dispatcher/#sbs_utils.tickdispatcher.TickDispatcher.dispatch_tick","title":"<code>dispatch_tick()</code>","text":"<p>Process all the tasks The task is updated to see if it should be triggered,  and if it is completed</p> Source code in <code>sbs_utils\\tickdispatcher.py</code> <pre><code>def dispatch_tick():\n    \"\"\" Process all the tasks\n    The task is updated to see if it should be triggered, \n    and if it is completed\n    \"\"\"\n    TickDispatcher.current = FrameContext.context.sim.time_tick_counter\n    TickDispatcher.completed = set()\n    # Before running add items that are new\n    # these would have been added last time\n    # this was run\n    for a in TickDispatcher._new_this_tick:\n        TickDispatcher._dispatch_tick.add(a)\n\n    TickDispatcher._new_this_tick = set()\n    # process all the tasks\n    for t in TickDispatcher._dispatch_tick:\n        if t._update():\n            TickDispatcher.completed.add(t)\n\n    # Remove tasks are completed\n    for c in TickDispatcher.completed:\n        TickDispatcher._dispatch_tick.remove(c)\n</code></pre>"},{"location":"api/dispatch/tick_dispatcher/#sbs_utils.tickdispatcher.TickDispatcher.do_interval","title":"<code>do_interval(cb, delay, count=None)</code>","text":"<p>Create and return a task that executes more than once</p> <p>:param ctx: The Artemis Cosmos simulation :param cb: call back function :param delay: the time in seconds for the task to delay :type delay: int :param count: The number of times to run None mean infinite :type count: int or None :return: The task is returned and can be used to attach data for future use. :rtype: TickFTask</p> <p>example:</p> <p>.. code-block:: python</p> <pre><code>def some_use():\n    t = TickDispatcher.do_interval(the_callback, 5)\n    t.data = some_data\n\ndef the_callback(t):\n    print(t.some_data)\n    if t.some_data.some_condition:\n        t.stop()\n</code></pre> Source code in <code>sbs_utils\\tickdispatcher.py</code> <pre><code>def do_interval(cb: callable, delay: int, count: int = None):\n    \"\"\" Create and return a task that executes more than once\n\n    :param ctx: The Artemis Cosmos simulation\n    :param cb: call back function\n    :param delay: the time in seconds for the task to delay\n    :type delay: int\n    :param count: The number of times to run None mean infinite\n    :type count: int or None\n    :return: The task is returned and can be used to attach data for future use.\n    :rtype: TickFTask\n\n    example:\n\n    .. code-block:: python\n\n        def some_use():\n            t = TickDispatcher.do_interval(the_callback, 5)\n            t.data = some_data\n\n        def the_callback(t):\n            print(t.some_data)\n            if t.some_data.some_condition:\n                t.stop()\n    \"\"\"\n    t = TickTask(cb, delay, count)\n    TickDispatcher._new_this_tick.add(t)\n    return t\n</code></pre>"},{"location":"api/dispatch/tick_dispatcher/#sbs_utils.tickdispatcher.TickDispatcher.do_once","title":"<code>do_once(cb, delay)</code>","text":"<p>Create and return a task that executes once</p> <p>:param delay: the time in seconds for the task to delay :type delay: int :return: The task is returned and can be used to attach data for future use. :rtype: TickTask</p> example <p>def some_use():     t = TickDispatcher.do_once(the_callback, 5)     t.data = some_data</p> <p>def the_callback(t):     print(t.some_data)</p> Source code in <code>sbs_utils\\tickdispatcher.py</code> <pre><code>def do_once(cb: callable, delay: int):\n    \"\"\" Create and return a task that executes once\n\n    :param delay: the time in seconds for the task to delay\n    :type delay: int\n    :return: The task is returned and can be used to attach data for future use.\n    :rtype: TickTask\n\n    example:\n        def some_use():\n            t = TickDispatcher.do_once(the_callback, 5)\n            t.data = some_data\n\n        def the_callback(t):\n            print(t.some_data)\n    \"\"\"\n    t = TickTask(cb, delay, 1)\n    TickDispatcher._new_this_tick.add(t)\n    return t\n</code></pre>"},{"location":"api/dispatch/tick_dispatcher/#sbs_utils.tickdispatcher.TickTask","title":"<code>TickTask</code>","text":"<p>             Bases: <code>Agent</code></p> <p>A task that is managed by the TickDispatcher</p> Source code in <code>sbs_utils\\tickdispatcher.py</code> <pre><code>class TickTask(Agent):\n    \"\"\"\n    A task that is managed by the TickDispatcher\n    \"\"\"\n\n    def __init__(self, cb, delay, count):\n        \"\"\" new TickTask\n\n        :param sim: The Artemis Cosmos simulation\n        :param cb: call back function\n        :param delay: the time in seconds for the task to delay\n        :type delay: int\n        :param count: The number of times to run None mean infinite\n        :type count: int or None\n        \"\"\"\n        super().__init__()\n        self.cb = cb\n        self.delay = delay\n        self.id = get_task_id()\n\n        # capture the start time\n\n        self.start = FrameContext.context.sim.time_tick_counter\n\n        self.count = count\n\n\n    def stop(self):\n        \"\"\" Stop a tasks\n        The task is removed\n        \"\"\"\n        TickDispatcher.completed.add(self)\n\n    def _update(self):\n        if (FrameContext.context.sim.time_tick_counter - self.start)/TickDispatcher.tps &gt;= self.delay:\n            # one could not supply a callback\n            if self.cb is not None:\n                # call the function\n                self.cb(self)\n            else:\n                # this does nothing so remove it\n                self.stop()\n\n            if self.count is not None:\n                self.count = self.count - 1\n            if self.count is None or self.count &gt; 0:\n                # reschedule\n                self.start = FrameContext.context.sim.time_tick_counter\n                return False\n            else:\n                return True\n        return False\n\n    @property\n    def done(self)-&gt;bool:\n        \"\"\" returns if this is the task will not run in the future\n        \"\"\"\n        return self.count &lt;= 0\n</code></pre>"},{"location":"api/dispatch/tick_dispatcher/#sbs_utils.tickdispatcher.TickTask.done","title":"<code>done: bool</code>  <code>property</code>","text":"<p>returns if this is the task will not run in the future</p>"},{"location":"api/dispatch/tick_dispatcher/#sbs_utils.tickdispatcher.TickTask.__init__","title":"<code>__init__(cb, delay, count)</code>","text":"<p>new TickTask</p> <p>:param sim: The Artemis Cosmos simulation :param cb: call back function :param delay: the time in seconds for the task to delay :type delay: int :param count: The number of times to run None mean infinite :type count: int or None</p> Source code in <code>sbs_utils\\tickdispatcher.py</code> <pre><code>def __init__(self, cb, delay, count):\n    \"\"\" new TickTask\n\n    :param sim: The Artemis Cosmos simulation\n    :param cb: call back function\n    :param delay: the time in seconds for the task to delay\n    :type delay: int\n    :param count: The number of times to run None mean infinite\n    :type count: int or None\n    \"\"\"\n    super().__init__()\n    self.cb = cb\n    self.delay = delay\n    self.id = get_task_id()\n\n    # capture the start time\n\n    self.start = FrameContext.context.sim.time_tick_counter\n\n    self.count = count\n</code></pre>"},{"location":"api/dispatch/tick_dispatcher/#sbs_utils.tickdispatcher.TickTask.stop","title":"<code>stop()</code>","text":"<p>Stop a tasks The task is removed</p> Source code in <code>sbs_utils\\tickdispatcher.py</code> <pre><code>def stop(self):\n    \"\"\" Stop a tasks\n    The task is removed\n    \"\"\"\n    TickDispatcher.completed.add(self)\n</code></pre>"},{"location":"api/engine/sbs/","title":"The sbs module","text":"<p>The SBS Module is provided by the Artemis cosmos engine</p>"},{"location":"api/engine/sbs/#overview","title":"Overview","text":""},{"location":"api/engine/sbs/#api-sbs","title":"API: SBS","text":""},{"location":"api/engine/sbs/#mock.sbs.SHPSYS","title":"<code>SHPSYS</code>","text":"<p>             Bases: <code>object</code></p> <p>One of four ship systems to track damage</p> <p>Members:</p> <p>WEAPONS : the weapons index for system_damage</p> <p>ENGINES : the engines index for system_damage</p> <p>SENSORS : the sensors index for system_damage</p> <p>SHIELDS : the shields index for system_damage</p> Source code in <code>mock\\sbs.py</code> <pre><code>class SHPSYS(object): ### from pybind\n    \"\"\"One of four ship systems to track damage\n\n    Members:\n\n      WEAPONS : the weapons index for *system_damage*\n\n      ENGINES : the engines index for *system_damage*\n\n      SENSORS : the sensors index for *system_damage*\n\n      SHIELDS : the shields index for *system_damage*\"\"\"\n    ENGINES : 1\n    SENSORS : 2\n    SHIELDS : 3\n    WEAPONS : 0\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.TORPEDO","title":"<code>TORPEDO</code>","text":"<p>             Bases: <code>object</code></p> <p>enum of torpedo types</p> <p>Members:</p> <p>HOMING : a torpedo type index</p> <p>NUKE : a torpedo type index</p> <p>EMP : a torpedo type index</p> <p>MINE : a torpedo type index</p> <p>TORPTYPECOUNT : number of torpedo types</p> Source code in <code>mock\\sbs.py</code> <pre><code>class TORPEDO(object): ### from pybind\n    \"\"\"enum of torpedo types\n\n    Members:\n\n      HOMING : a torpedo type index\n\n      NUKE : a torpedo type index\n\n      EMP : a torpedo type index\n\n      MINE : a torpedo type index\n\n      TORPTYPECOUNT : number of torpedo types\"\"\"\n    EMP : 2\n    HOMING : 0\n    MINE : 3\n    NUKE : 1\n    TORPTYPECOUNT : 4\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.Writer","title":"<code>Writer</code>","text":"<p>             Bases: <code>object</code></p> <p>class Writer</p> Source code in <code>mock\\sbs.py</code> <pre><code>class Writer(object): ### from pybind\n    \"\"\"class Writer\"\"\"\n    def flush(self: Writer) -&gt; None:\n        ...\n    def write(self: Writer, arg0: str) -&gt; None:\n        ...\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.event","title":"<code>event</code>","text":"<p>             Bases: <code>object</code></p> <p>class event</p> Source code in <code>mock\\sbs.py</code> <pre><code>class event(object): ### from pybind\n    \"\"\"class event\"\"\"\n    @property\n    def client_id (self: event) -&gt; int:\n        \"\"\"id of computer this event came from.\"\"\"\n    @property\n    def event_time (self: event) -&gt; int:\n        \"\"\"long int, time this damage occured, compare to simulation.time_tick_counter\"\"\"\n    @property\n    def origin_id (self: event) -&gt; int:\n        \"\"\"id of space object this event came from\"\"\"\n    @property\n    def parent_id (self: event) -&gt; int:\n        \"\"\"id of owner/creator of space object this event came from (like the ship that fired the missile)\"\"\"\n    @property\n    def selected_id (self: event) -&gt; int:\n        \"\"\"id of space object this event is talking about, or doing something to\"\"\"\n    @property\n    def source_point (self: event) -&gt; vec3:\n        \"\"\"vec3, 3d point this event originated from\"\"\"\n    @property\n    def sub_float (self: event) -&gt; float:\n        \"\"\"float, numeric information\"\"\"\n    @property\n    def sub_tag (self: event) -&gt; str:\n        \"\"\"string describing message sub-type\"\"\"\n    @property\n    def tag (self: event) -&gt; str:\n        \"\"\"string describing message type\"\"\"\n    @property\n    def value_tag (self: event) -&gt; str:\n        \"\"\"string, more information\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.event.client_id","title":"<code>client_id: int</code>  <code>property</code>","text":"<p>id of computer this event came from.</p>"},{"location":"api/engine/sbs/#mock.sbs.event.event_time","title":"<code>event_time: int</code>  <code>property</code>","text":"<p>long int, time this damage occured, compare to simulation.time_tick_counter</p>"},{"location":"api/engine/sbs/#mock.sbs.event.origin_id","title":"<code>origin_id: int</code>  <code>property</code>","text":"<p>id of space object this event came from</p>"},{"location":"api/engine/sbs/#mock.sbs.event.parent_id","title":"<code>parent_id: int</code>  <code>property</code>","text":"<p>id of owner/creator of space object this event came from (like the ship that fired the missile)</p>"},{"location":"api/engine/sbs/#mock.sbs.event.selected_id","title":"<code>selected_id: int</code>  <code>property</code>","text":"<p>id of space object this event is talking about, or doing something to</p>"},{"location":"api/engine/sbs/#mock.sbs.event.source_point","title":"<code>source_point: vec3</code>  <code>property</code>","text":"<p>vec3, 3d point this event originated from</p>"},{"location":"api/engine/sbs/#mock.sbs.event.sub_float","title":"<code>sub_float: float</code>  <code>property</code>","text":"<p>float, numeric information</p>"},{"location":"api/engine/sbs/#mock.sbs.event.sub_tag","title":"<code>sub_tag: str</code>  <code>property</code>","text":"<p>string describing message sub-type</p>"},{"location":"api/engine/sbs/#mock.sbs.event.tag","title":"<code>tag: str</code>  <code>property</code>","text":"<p>string describing message type</p>"},{"location":"api/engine/sbs/#mock.sbs.event.value_tag","title":"<code>value_tag: str</code>  <code>property</code>","text":"<p>string, more information</p>"},{"location":"api/engine/sbs/#mock.sbs.grid_object","title":"<code>grid_object</code>","text":"<p>             Bases: <code>object</code></p> <p>class grid_object</p> Source code in <code>mock\\sbs.py</code> <pre><code>class grid_object(object): ### from pybind\n    \"\"\"class grid_object\"\"\"\n    def __init__(self) -&gt; None:\n        self._data_set = object_data_set()\n        self._name = \"\"\n        self._tag = \"\"\n        self._type = \"\"\n        self._id = 0\n    @property\n    def data_set (self: grid_object) -&gt; object_data_set:\n        \"\"\"object_data_set, read only, reference to the object_data_set of this particular grid object\"\"\"\n        return self._data_set\n    @property\n    def name (self: grid_object) -&gt; str:\n        \"\"\"string, text name\"\"\"\n        return self._name\n    @name.setter\n    def name (self: grid_object, arg0: str) -&gt; None:\n        \"\"\"string, text name\"\"\"\n        self._name = arg0\n    @property\n    def tag (self: grid_object) -&gt; str:\n        \"\"\"string, text tag\"\"\"\n        return self._tag\n    @tag.setter\n    def tag (self: grid_object, arg0: str) -&gt; None:\n        \"\"\"string, text tag\"\"\"\n        self._tag = arg0\n    @property\n    def type (self: grid_object) -&gt; str:\n        \"\"\"string, text value, broad type of object\"\"\"\n        return self._type\n    @type.setter\n    def type (self: grid_object, arg0: str) -&gt; None:\n        \"\"\"string, text value, broad type of object\"\"\"\n        self._type = arg0\n    @property\n    def unique_ID (self: grid_object) -&gt; int:\n        \"\"\"int32, read only, id of this particular grid object\"\"\"\n        return self._id\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.grid_object.data_set","title":"<code>data_set: object_data_set</code>  <code>property</code>","text":"<p>object_data_set, read only, reference to the object_data_set of this particular grid object</p>"},{"location":"api/engine/sbs/#mock.sbs.grid_object.name","title":"<code>name: str</code>  <code>property</code> <code>writable</code>","text":"<p>string, text name</p>"},{"location":"api/engine/sbs/#mock.sbs.grid_object.tag","title":"<code>tag: str</code>  <code>property</code> <code>writable</code>","text":"<p>string, text tag</p>"},{"location":"api/engine/sbs/#mock.sbs.grid_object.type","title":"<code>type: str</code>  <code>property</code> <code>writable</code>","text":"<p>string, text value, broad type of object</p>"},{"location":"api/engine/sbs/#mock.sbs.grid_object.unique_ID","title":"<code>unique_ID: int</code>  <code>property</code>","text":"<p>int32, read only, id of this particular grid object</p>"},{"location":"api/engine/sbs/#mock.sbs.hullmap","title":"<code>hullmap</code>","text":"<p>             Bases: <code>object</code></p> <p>class hullmap</p> Source code in <code>mock\\sbs.py</code> <pre><code>class hullmap(object): ### from pybind\n    \"\"\"class hullmap\"\"\"\n\n    def __init__(self) -&gt; None:\n        self._art_file_root = \"\"\n        self._desc = \"\"\n        self._name = \"\"\n        self.grid_items = []\n        self._grid_scale = 1\n        self._h = 0\n        self._w = 0\n        self._sym = 0\n\n    @property\n    def art_file_root (self: hullmap) -&gt; str:\n        \"\"\"string, file name, used to get top-down image from disk\"\"\"\n        return self._art_file_root \n    @art_file_root.setter\n    def art_file_root (self: hullmap, arg0: str) -&gt; None:\n        \"\"\"string, file name, used to get top-down image from disk\"\"\"\n        self._art_file_root = arg0\n    def create_grid_object(self: hullmap, arg0: str, arg1: str, arg2: str) -&gt; grid_object:\n        \"\"\"returns a gridobject, after creating it\"\"\"\n        go = grid_object()\n        go._name = arg0\n        go._tag = arg1\n        go._type = arg2\n        sim.grid_object_ids+=1\n        go._id = sim.grid_object_ids\n        sim.grid_objects[go._id] = go\n        self.grid_items.append(go)\n\n    def delete_grid_object(self: hullmap, arg0: grid_object) -&gt; bool:\n        \"\"\"deletes the grid object, returns true if deletion actually occured\"\"\"\n        go = sim.grid_objects.pop(arg0._id, None)\n        if go is not None:\n            self.grid_items.remove(arg0)\n            return True\n        return False\n    @property\n    def desc (self: hullmap) -&gt; str:\n        \"\"\"string, description text\"\"\"\n        return self._desc\n    @desc.setter\n    def desc (self: hullmap, arg0: str) -&gt; None:\n        \"\"\"string, description text\"\"\"\n        self._desc = arg0\n    def get_grid_object_by_id(self: hullmap, arg0: int) -&gt; grid_object:\n        \"\"\"returns a gridobject, by int32 ID\"\"\"\n        return sim.grid_objects.get(arg0)\n    def get_grid_object_by_index(self: hullmap, arg0: int) -&gt; grid_object:\n        \"\"\"returns a gridobject, by position in the list\"\"\"\n    def get_grid_object_by_name(*args, **kwargs):\n        \"\"\"Overloaded function.\n\n        1. get_grid_object_by_name(self: hullmap, arg0: str) -&gt; grid_object\n\n        returns a gridobject, by name\n\n        2. get_grid_object_by_name(self: hullmap, arg0: str) -&gt; grid_object\n\n        returns a gridobject, by text tag\"\"\"\n    def get_grid_object_count(self: hullmap) -&gt; int:\n        \"\"\"get the number of grid objects in the list, within this hullmap\"\"\"\n    @property\n    def grid_scale (self: hullmap) -&gt; float:\n        \"\"\"float, space between grid points\"\"\"\n        return self._grid_scale\n    @grid_scale.setter\n    def grid_scale (self: hullmap, arg0: float) -&gt; None:\n        \"\"\"float, space between grid points\"\"\"\n        self._grid_scale = arg0\n    @property\n    def h (self: hullmap) -&gt; int:\n        \"\"\"int, total grid hieght\"\"\"\n        return self._h\n    @h.setter\n    def h (self: hullmap, arg0: int) -&gt; None:\n        \"\"\"int, total grid hieght\"\"\"\n        self._h\n    def is_grid_point_open(self: hullmap, arg0: int, arg1: int) -&gt; int:\n        \"\"\"is the x/y point within this hullmap open (traversable)? 0 == no\"\"\"\n    @property\n    def name (self: hullmap) -&gt; str:\n        \"\"\"string, text name\"\"\"\n        return self._name\n    @name.setter\n    def name (self: hullmap, arg0: str) -&gt; None:\n        \"\"\"string, text name\"\"\"\n        self._name = arg0\n    @property\n    def symmetrical_flag (self: hullmap) -&gt; int:\n        \"\"\"int, non-zero if the map is symmetrical\"\"\"\n        return self._sym\n    @symmetrical_flag.setter\n    def symmetrical_flag (self: hullmap, arg0: int) -&gt; None:\n        \"\"\"int, non-zero if the map is symmetrical\"\"\"\n        self._sym = arg0\n    @property\n    def w (self: hullmap) -&gt; int:\n        \"\"\"int, total grid width\"\"\"\n        return self._w\n    @w.setter\n    def w (self: hullmap, arg0: int) -&gt; None:\n        \"\"\"int, total grid width\"\"\"\n        self._w = arg0\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.hullmap.art_file_root","title":"<code>art_file_root: str</code>  <code>property</code> <code>writable</code>","text":"<p>string, file name, used to get top-down image from disk</p>"},{"location":"api/engine/sbs/#mock.sbs.hullmap.desc","title":"<code>desc: str</code>  <code>property</code> <code>writable</code>","text":"<p>string, description text</p>"},{"location":"api/engine/sbs/#mock.sbs.hullmap.grid_scale","title":"<code>grid_scale: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, space between grid points</p>"},{"location":"api/engine/sbs/#mock.sbs.hullmap.h","title":"<code>h: int</code>  <code>property</code> <code>writable</code>","text":"<p>int, total grid hieght</p>"},{"location":"api/engine/sbs/#mock.sbs.hullmap.name","title":"<code>name: str</code>  <code>property</code> <code>writable</code>","text":"<p>string, text name</p>"},{"location":"api/engine/sbs/#mock.sbs.hullmap.symmetrical_flag","title":"<code>symmetrical_flag: int</code>  <code>property</code> <code>writable</code>","text":"<p>int, non-zero if the map is symmetrical</p>"},{"location":"api/engine/sbs/#mock.sbs.hullmap.w","title":"<code>w: int</code>  <code>property</code> <code>writable</code>","text":"<p>int, total grid width</p>"},{"location":"api/engine/sbs/#mock.sbs.hullmap.create_grid_object","title":"<code>create_grid_object(arg0, arg1, arg2)</code>","text":"<p>returns a gridobject, after creating it</p> Source code in <code>mock\\sbs.py</code> <pre><code>def create_grid_object(self: hullmap, arg0: str, arg1: str, arg2: str) -&gt; grid_object:\n    \"\"\"returns a gridobject, after creating it\"\"\"\n    go = grid_object()\n    go._name = arg0\n    go._tag = arg1\n    go._type = arg2\n    sim.grid_object_ids+=1\n    go._id = sim.grid_object_ids\n    sim.grid_objects[go._id] = go\n    self.grid_items.append(go)\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.hullmap.delete_grid_object","title":"<code>delete_grid_object(arg0)</code>","text":"<p>deletes the grid object, returns true if deletion actually occured</p> Source code in <code>mock\\sbs.py</code> <pre><code>def delete_grid_object(self: hullmap, arg0: grid_object) -&gt; bool:\n    \"\"\"deletes the grid object, returns true if deletion actually occured\"\"\"\n    go = sim.grid_objects.pop(arg0._id, None)\n    if go is not None:\n        self.grid_items.remove(arg0)\n        return True\n    return False\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.hullmap.get_grid_object_by_id","title":"<code>get_grid_object_by_id(arg0)</code>","text":"<p>returns a gridobject, by int32 ID</p> Source code in <code>mock\\sbs.py</code> <pre><code>def get_grid_object_by_id(self: hullmap, arg0: int) -&gt; grid_object:\n    \"\"\"returns a gridobject, by int32 ID\"\"\"\n    return sim.grid_objects.get(arg0)\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.hullmap.get_grid_object_by_index","title":"<code>get_grid_object_by_index(arg0)</code>","text":"<p>returns a gridobject, by position in the list</p> Source code in <code>mock\\sbs.py</code> <pre><code>def get_grid_object_by_index(self: hullmap, arg0: int) -&gt; grid_object:\n    \"\"\"returns a gridobject, by position in the list\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.hullmap.get_grid_object_by_name","title":"<code>get_grid_object_by_name(*args, **kwargs)</code>","text":"<p>Overloaded function.</p> <ol> <li>get_grid_object_by_name(self: hullmap, arg0: str) -&gt; grid_object</li> </ol> <p>returns a gridobject, by name</p> <ol> <li>get_grid_object_by_name(self: hullmap, arg0: str) -&gt; grid_object</li> </ol> <p>returns a gridobject, by text tag</p> Source code in <code>mock\\sbs.py</code> <pre><code>def get_grid_object_by_name(*args, **kwargs):\n    \"\"\"Overloaded function.\n\n    1. get_grid_object_by_name(self: hullmap, arg0: str) -&gt; grid_object\n\n    returns a gridobject, by name\n\n    2. get_grid_object_by_name(self: hullmap, arg0: str) -&gt; grid_object\n\n    returns a gridobject, by text tag\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.hullmap.get_grid_object_count","title":"<code>get_grid_object_count()</code>","text":"<p>get the number of grid objects in the list, within this hullmap</p> Source code in <code>mock\\sbs.py</code> <pre><code>def get_grid_object_count(self: hullmap) -&gt; int:\n    \"\"\"get the number of grid objects in the list, within this hullmap\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.hullmap.is_grid_point_open","title":"<code>is_grid_point_open(arg0, arg1)</code>","text":"<p>is the x/y point within this hullmap open (traversable)? 0 == no</p> Source code in <code>mock\\sbs.py</code> <pre><code>def is_grid_point_open(self: hullmap, arg0: int, arg1: int) -&gt; int:\n    \"\"\"is the x/y point within this hullmap open (traversable)? 0 == no\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.navpoint","title":"<code>navpoint</code>","text":"<p>             Bases: <code>object</code></p> Source code in <code>mock\\sbs.py</code> <pre><code>class navpoint(object): ### from pybind\n    def __init__(self) -&gt; None:\n        self._text = \"\"\n        self._color = vec4()\n        self._pos = vec3()\n\n    \"\"\"class navpoint\"\"\"\n    def SetColor(self: navpoint, arg0: str) -&gt; None:\n        \"\"\"use a string color description to set the color\"\"\"\n        self._color = vec4()\n\n    @property\n    def color (self: navpoint) -&gt; vec4:\n        \"\"\"vec4, color on 2d radar\"\"\"\n        return self._color\n    @color.setter\n    def color (self: navpoint, arg0: vec4) -&gt; None:\n        \"\"\"vec4, color on 2d radar\"\"\"\n        self._color = arg0\n    @property\n    def pos (self: navpoint) -&gt; vec3:\n        \"\"\"vec3, position in space\"\"\"\n        return self._pos\n    @pos.setter\n    def pos (self: navpoint, arg0: vec3) -&gt; None:\n        \"\"\"vec3, position in space\"\"\"\n        self._pos = arg0\n    @property\n    def text (self: navpoint) -&gt; str:\n        \"\"\"string, text label\"\"\"\n        return self._text\n    @text.setter\n    def text (self: navpoint, arg0: str) -&gt; None:\n        \"\"\"string, text label\"\"\"\n        sim.nav_points.pop(self._text, None)\n        self._text = arg0\n        sim.nav_points[arg0] = self\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.navpoint.color","title":"<code>color: vec4</code>  <code>property</code> <code>writable</code>","text":"<p>vec4, color on 2d radar</p>"},{"location":"api/engine/sbs/#mock.sbs.navpoint.pos","title":"<code>pos: vec3</code>  <code>property</code> <code>writable</code>","text":"<p>vec3, position in space</p>"},{"location":"api/engine/sbs/#mock.sbs.navpoint.text","title":"<code>text: str</code>  <code>property</code> <code>writable</code>","text":"<p>string, text label</p>"},{"location":"api/engine/sbs/#mock.sbs.navpoint.SetColor","title":"<code>SetColor(arg0)</code>","text":"<p>use a string color description to set the color</p> Source code in <code>mock\\sbs.py</code> <pre><code>def SetColor(self: navpoint, arg0: str) -&gt; None:\n    \"\"\"use a string color description to set the color\"\"\"\n    self._color = vec4()\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.object_data_set","title":"<code>object_data_set</code>","text":"<p>             Bases: <code>object</code></p> <p>class object_data_set</p> Source code in <code>mock\\sbs.py</code> <pre><code>class object_data_set(object): ### from pybind\n    \"\"\"class object_data_set\"\"\"\n    def get(*args, **kwargs):\n        \"\"\"Overloaded function.\n\n        1. get(self: object_data_set, arg0: str, arg1: int) -&gt; object\n\n        Get a value, by name\n\n        2. get(self: object_data_set, arg0: int, arg1: int) -&gt; object\n\n        Get a value, by ID\"\"\"\n    def set(*args, **kwargs):\n        \"\"\"Overloaded function.\n\n        1. set(self: object_data_set, tag: str, in: int, index: int = 0, extraDocText: str = 'a') -&gt; int\n\n        Set an int value, by name\n\n        2. set(self: object_data_set, tag: str, in: int, index: int = 0, extraDocText: str = 'a') -&gt; int\n\n        Set an int64 value, by name\n\n        3. set(self: object_data_set, tag: str, in: float, index: int = 0, extraDocText: str = 'a') -&gt; int\n\n        Set a float value, by name\n\n        4. set(self: object_data_set, tag: str, in: str, index: int = 0, extraDocText: str = 'a') -&gt; int\n\n        Set a string value, by name\n\n        5. set(self: object_data_set, arg0: int, arg1: int, arg2: int) -&gt; int\n\n        Set an int value, by ID\n\n        6. set(self: object_data_set, arg0: int, arg1: int, arg2: int) -&gt; int\n\n        Set an int64 value, by ID\n\n        7. set(self: object_data_set, arg0: int, arg1: float, arg2: int) -&gt; int\n\n        Set a float value, by ID\n\n        8. set(self: object_data_set, arg0: int, arg1: str, arg2: int) -&gt; int\n\n        Set a string value, by ID\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.object_data_set.get","title":"<code>get(*args, **kwargs)</code>","text":"<p>Overloaded function.</p> <ol> <li>get(self: object_data_set, arg0: str, arg1: int) -&gt; object</li> </ol> <p>Get a value, by name</p> <ol> <li>get(self: object_data_set, arg0: int, arg1: int) -&gt; object</li> </ol> <p>Get a value, by ID</p> Source code in <code>mock\\sbs.py</code> <pre><code>def get(*args, **kwargs):\n    \"\"\"Overloaded function.\n\n    1. get(self: object_data_set, arg0: str, arg1: int) -&gt; object\n\n    Get a value, by name\n\n    2. get(self: object_data_set, arg0: int, arg1: int) -&gt; object\n\n    Get a value, by ID\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.object_data_set.set","title":"<code>set(*args, **kwargs)</code>","text":"<p>Overloaded function.</p> <ol> <li>set(self: object_data_set, tag: str, in: int, index: int = 0, extraDocText: str = 'a') -&gt; int</li> </ol> <p>Set an int value, by name</p> <ol> <li>set(self: object_data_set, tag: str, in: int, index: int = 0, extraDocText: str = 'a') -&gt; int</li> </ol> <p>Set an int64 value, by name</p> <ol> <li>set(self: object_data_set, tag: str, in: float, index: int = 0, extraDocText: str = 'a') -&gt; int</li> </ol> <p>Set a float value, by name</p> <ol> <li>set(self: object_data_set, tag: str, in: str, index: int = 0, extraDocText: str = 'a') -&gt; int</li> </ol> <p>Set a string value, by name</p> <ol> <li>set(self: object_data_set, arg0: int, arg1: int, arg2: int) -&gt; int</li> </ol> <p>Set an int value, by ID</p> <ol> <li>set(self: object_data_set, arg0: int, arg1: int, arg2: int) -&gt; int</li> </ol> <p>Set an int64 value, by ID</p> <ol> <li>set(self: object_data_set, arg0: int, arg1: float, arg2: int) -&gt; int</li> </ol> <p>Set a float value, by ID</p> <ol> <li>set(self: object_data_set, arg0: int, arg1: str, arg2: int) -&gt; int</li> </ol> <p>Set a string value, by ID</p> Source code in <code>mock\\sbs.py</code> <pre><code>def set(*args, **kwargs):\n    \"\"\"Overloaded function.\n\n    1. set(self: object_data_set, tag: str, in: int, index: int = 0, extraDocText: str = 'a') -&gt; int\n\n    Set an int value, by name\n\n    2. set(self: object_data_set, tag: str, in: int, index: int = 0, extraDocText: str = 'a') -&gt; int\n\n    Set an int64 value, by name\n\n    3. set(self: object_data_set, tag: str, in: float, index: int = 0, extraDocText: str = 'a') -&gt; int\n\n    Set a float value, by name\n\n    4. set(self: object_data_set, tag: str, in: str, index: int = 0, extraDocText: str = 'a') -&gt; int\n\n    Set a string value, by name\n\n    5. set(self: object_data_set, arg0: int, arg1: int, arg2: int) -&gt; int\n\n    Set an int value, by ID\n\n    6. set(self: object_data_set, arg0: int, arg1: int, arg2: int) -&gt; int\n\n    Set an int64 value, by ID\n\n    7. set(self: object_data_set, arg0: int, arg1: float, arg2: int) -&gt; int\n\n    Set a float value, by ID\n\n    8. set(self: object_data_set, arg0: int, arg1: str, arg2: int) -&gt; int\n\n    Set a string value, by ID\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.quaternion","title":"<code>quaternion</code>","text":"<p>             Bases: <code>object</code></p> <p>class quaternion</p> Source code in <code>mock\\sbs.py</code> <pre><code>class quaternion(object): ### from pybind\n    \"\"\"class quaternion\"\"\"\n    def __init__(self, w, x=None, y=None, z=None, **kwargs):\n        \"\"\"Overloaded function.\n\n        1. __init__(self: quaternion, arg0: float, arg1: float, arg2: float, arg3: float) -&gt; None\n\n        2. __init__(self: quaternion, arg0: quaternion) -&gt; None\n\n        3. __init__(self: quaternion) -&gt; None\"\"\"\n        if isinstance(w, quaternion):\n            self._w = w._w\n            self._x = w._x\n            self._y = w._y\n            self._z = w._z\n        elif x is not None:\n            self._w = w\n            self._x = x\n            self._y = y\n            self._z = z\n        else:\n            self._w = 0\n            self._x = 0\n            self._y = 0\n            self._z = 0\n    @property\n    def w (self: quaternion) -&gt; float:\n        \"\"\"float, component value\"\"\"\n        return self._w\n    @w.setter\n    def w (self: quaternion, arg0: float) -&gt; None:\n        \"\"\"float, component value\"\"\"\n        self._w = arg0\n    @property\n    def x (self: quaternion) -&gt; float:\n        \"\"\"float, component value\"\"\"\n        return self._x\n    @x.setter\n    def x (self: quaternion, arg0: float) -&gt; None:\n        \"\"\"float, component value\"\"\"\n        self._x = arg0\n    @property\n    def y (self: quaternion) -&gt; float:\n        \"\"\"float, component value\"\"\"\n        return self._y\n    @y.setter\n    def y (self: quaternion, arg0: float) -&gt; None:\n        \"\"\"float, component value\"\"\"\n        self._y = arg0\n    @property\n    def z (self: quaternion) -&gt; float:\n        \"\"\"float, component value\"\"\"\n        return self._z\n    @z.setter\n    def z (self: quaternion, arg0: float) -&gt; None:\n        \"\"\"float, component value\"\"\"\n        self._z = arg0\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.quaternion.w","title":"<code>w: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, component value</p>"},{"location":"api/engine/sbs/#mock.sbs.quaternion.x","title":"<code>x: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, component value</p>"},{"location":"api/engine/sbs/#mock.sbs.quaternion.y","title":"<code>y: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, component value</p>"},{"location":"api/engine/sbs/#mock.sbs.quaternion.z","title":"<code>z: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, component value</p>"},{"location":"api/engine/sbs/#mock.sbs.quaternion.__init__","title":"<code>__init__(w, x=None, y=None, z=None, **kwargs)</code>","text":"<p>Overloaded function.</p> <ol> <li> <p>init(self: quaternion, arg0: float, arg1: float, arg2: float, arg3: float) -&gt; None</p> </li> <li> <p>init(self: quaternion, arg0: quaternion) -&gt; None</p> </li> <li> <p>init(self: quaternion) -&gt; None</p> </li> </ol> Source code in <code>mock\\sbs.py</code> <pre><code>def __init__(self, w, x=None, y=None, z=None, **kwargs):\n    \"\"\"Overloaded function.\n\n    1. __init__(self: quaternion, arg0: float, arg1: float, arg2: float, arg3: float) -&gt; None\n\n    2. __init__(self: quaternion, arg0: quaternion) -&gt; None\n\n    3. __init__(self: quaternion) -&gt; None\"\"\"\n    if isinstance(w, quaternion):\n        self._w = w._w\n        self._x = w._x\n        self._y = w._y\n        self._z = w._z\n    elif x is not None:\n        self._w = w\n        self._x = x\n        self._y = y\n        self._z = z\n    else:\n        self._w = 0\n        self._x = 0\n        self._y = 0\n        self._z = 0\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.simulation","title":"<code>simulation</code>","text":"<p>             Bases: <code>object</code></p> Source code in <code>mock\\sbs.py</code> <pre><code>class simulation(object): ### from pybind\n    def __init__(self):\n\n        self.object_ids = 0\n        self.space_objects = {}\n        self.grid_object_ids = 0\n        self.grid_objects = {}\n        self.nav_points = {}\n        self.hull_map_objects = {}\n        self._time_tick_counter = 0 # increment by 30\n        self.tractor_connections = {}\n\n    \"\"\"class simulation\"\"\"\n    def AddTractorConnection(self: simulation, arg0: int, arg1: int, arg2: vec3, arg3: float) -&gt; tractor_connection:\n        \"\"\"makes a new connection between two space objects.  Args: uint32_t sourceID, uint32_t targetID, sbs::vec3 offsetPoint, float pullDistance\"\"\"\n        con = tractor_connection()\n        con._source_id = arg0\n        con._target_id = arg1\n        con._pull = arg3\n        con._vec = arg2\n        self.tractor_connections[(con.source_id, con.target_id)] = con\n\n    def ClearTractorConnections(self: simulation) -&gt; None:\n        \"\"\"destroys all existing tractor connections right now.\"\"\"\n        self.tractor_connections = {}\n    def DeleteTractorConnection(self: simulation, arg0: int, arg1: int) -&gt; None:\n        \"\"\"finds and deletes an existing tractor connection.  Args: uint32_t sourceID, uint32_t targetID\"\"\"\n        self.tractor_connections.pop((arg0,arg1))\n    def GetTractorConnection(self: simulation, arg0: int, arg1: int) -&gt; tractor_connection:\n        self.tractor_connections.get((arg0,arg1))\n    def add_navpoint(self: simulation, arg0: float, arg1: float, arg2: float, arg3: str, arg4: str) -&gt; navpoint:\n        \"\"\"adds a new navpoint to space; don't hold on to this Navpoint object in a global; \n        keep the name string instead    \n        args:  float x, float y, float z, std::string text, std::string colorDesc\"\"\"\n        nav = navpoint()\n        nav._color = arg4\n        nav._pos = vec3(arg0, arg1, arg2)\n        nav._text = arg3\n\n        self.nav_points[nav._text] = nav\n\n    def clear_navpoints(self: simulation) -&gt; None:\n        \"\"\"deletes all navpoints\"\"\"\n        self.nav_points = {}\n\n    def delete_navpoint_by_name(self: simulation, arg0: str) -&gt; None:\n        \"\"\"deletes navpoint by its name\"\"\"\n        self.nav_points.pop(arg0, None)\n    def delete_navpoint_by_reference(self: simulation, arg0: navpoint) -&gt; None:\n        \"\"\"deletes navpoint by its reference\"\"\"\n        self.nav_points.pop(arg0.text, None)\n\n    def get_hull_map(self: simulation, arg0: int) -&gt; hullmap:\n        \"\"\"gets the hull map object for this space object\"\"\"\n        hull_map = self.hull_map_objects.get(arg0)\n        if not hull_map:\n            hull_map = hullmap()\n            self.hull_map_objects[arg0]=hull_map\n        return hullmap\n\n    def get_navpoint_by_name(self: simulation, arg0: str) -&gt; navpoint:\n        \"\"\"takes a string name, returns the associated Navpoint object\"\"\"\n        return self.nav_points.get(arg0, None)\n\n    def get_space_object(self: simulation, arg0: int) -&gt; space_object:\n        \"\"\"returns the refence to a spaceobject, by ID\"\"\"\n        return self.space_objects.get(arg0)\n\n    def make_new_active(self: simulation, arg0: str, arg1: str) -&gt; int:\n        \"\"\"creates a new spaceobject\"\"\"\n        return self._make_space_object(arg0, arg1, 1)\n    def make_new_passive(self: simulation, arg0: str, arg1: str) -&gt; int:\n        \"\"\"creates a new spaceobject\"\"\"\n        return self._make_space_object(arg0, arg1, 0)\n    def make_new_player(self: simulation, arg0: str, arg1: str) -&gt; int:\n        return self._make_space_object(arg0, arg1, 2)\n\n    def _make_space_object(self: simulation, arg0: str, arg1: str, tick_type:int) -&gt; int:\n        \"\"\"creates a new spaceobject\"\"\"\n        global sim\n        sim.object_ids += 1\n        id = sim.object_ids\n        obj  = space_object()\n        obj._id = id\n        obj._type = tick_type # \"\"\"int, 0=passive, 1=active, 2=playerShip\"\"\" #\n        obj._data_tag = arg1\n        obj._tick_type = arg0\n        sim.space_objects[id] = obj\n        return id\n\n    def navpoint_exists(self: simulation, arg0: str) -&gt; bool:\n        \"\"\"returns true if the navpoint exists, by name\"\"\"\n        return self.nav_points.get(arg0) is not None\n    def reposition_space_object(self: simulation, arg0: space_object, arg1: float, arg2: float, arg3: float) -&gt; None:\n        \"\"\"immedaitely changes the position of a spaceobject\"\"\"\n\n        if arg0:\n            arg0.pos.x = arg1\n            arg0.pos.y = arg2\n            arg0.pos.z = arg3\n\n    def space_object_exists(self: simulation, arg0: int) -&gt; bool:\n        \"\"\"returns true if the spaceobject exists, by ID\"\"\"\n        return (arg0 in self.space_objects)\n\n    @property\n    def time_tick_counter (self: simulation) -&gt; int:\n        \"\"\"get current time value\"\"\"\n        return self._time_tick_counter\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.simulation.time_tick_counter","title":"<code>time_tick_counter: int</code>  <code>property</code>","text":"<p>get current time value</p>"},{"location":"api/engine/sbs/#mock.sbs.simulation.AddTractorConnection","title":"<code>AddTractorConnection(arg0, arg1, arg2, arg3)</code>","text":"<p>makes a new connection between two space objects.  Args: uint32_t sourceID, uint32_t targetID, sbs::vec3 offsetPoint, float pullDistance</p> Source code in <code>mock\\sbs.py</code> <pre><code>def AddTractorConnection(self: simulation, arg0: int, arg1: int, arg2: vec3, arg3: float) -&gt; tractor_connection:\n    \"\"\"makes a new connection between two space objects.  Args: uint32_t sourceID, uint32_t targetID, sbs::vec3 offsetPoint, float pullDistance\"\"\"\n    con = tractor_connection()\n    con._source_id = arg0\n    con._target_id = arg1\n    con._pull = arg3\n    con._vec = arg2\n    self.tractor_connections[(con.source_id, con.target_id)] = con\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.simulation.ClearTractorConnections","title":"<code>ClearTractorConnections()</code>","text":"<p>destroys all existing tractor connections right now.</p> Source code in <code>mock\\sbs.py</code> <pre><code>def ClearTractorConnections(self: simulation) -&gt; None:\n    \"\"\"destroys all existing tractor connections right now.\"\"\"\n    self.tractor_connections = {}\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.simulation.DeleteTractorConnection","title":"<code>DeleteTractorConnection(arg0, arg1)</code>","text":"<p>finds and deletes an existing tractor connection.  Args: uint32_t sourceID, uint32_t targetID</p> Source code in <code>mock\\sbs.py</code> <pre><code>def DeleteTractorConnection(self: simulation, arg0: int, arg1: int) -&gt; None:\n    \"\"\"finds and deletes an existing tractor connection.  Args: uint32_t sourceID, uint32_t targetID\"\"\"\n    self.tractor_connections.pop((arg0,arg1))\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.simulation.add_navpoint","title":"<code>add_navpoint(arg0, arg1, arg2, arg3, arg4)</code>","text":"<p>adds a new navpoint to space; don't hold on to this Navpoint object in a global;  keep the name string instead   args:  float x, float y, float z, std::string text, std::string colorDesc</p> Source code in <code>mock\\sbs.py</code> <pre><code>def add_navpoint(self: simulation, arg0: float, arg1: float, arg2: float, arg3: str, arg4: str) -&gt; navpoint:\n    \"\"\"adds a new navpoint to space; don't hold on to this Navpoint object in a global; \n    keep the name string instead    \n    args:  float x, float y, float z, std::string text, std::string colorDesc\"\"\"\n    nav = navpoint()\n    nav._color = arg4\n    nav._pos = vec3(arg0, arg1, arg2)\n    nav._text = arg3\n\n    self.nav_points[nav._text] = nav\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.simulation.clear_navpoints","title":"<code>clear_navpoints()</code>","text":"<p>deletes all navpoints</p> Source code in <code>mock\\sbs.py</code> <pre><code>def clear_navpoints(self: simulation) -&gt; None:\n    \"\"\"deletes all navpoints\"\"\"\n    self.nav_points = {}\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.simulation.delete_navpoint_by_name","title":"<code>delete_navpoint_by_name(arg0)</code>","text":"<p>deletes navpoint by its name</p> Source code in <code>mock\\sbs.py</code> <pre><code>def delete_navpoint_by_name(self: simulation, arg0: str) -&gt; None:\n    \"\"\"deletes navpoint by its name\"\"\"\n    self.nav_points.pop(arg0, None)\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.simulation.delete_navpoint_by_reference","title":"<code>delete_navpoint_by_reference(arg0)</code>","text":"<p>deletes navpoint by its reference</p> Source code in <code>mock\\sbs.py</code> <pre><code>def delete_navpoint_by_reference(self: simulation, arg0: navpoint) -&gt; None:\n    \"\"\"deletes navpoint by its reference\"\"\"\n    self.nav_points.pop(arg0.text, None)\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.simulation.get_hull_map","title":"<code>get_hull_map(arg0)</code>","text":"<p>gets the hull map object for this space object</p> Source code in <code>mock\\sbs.py</code> <pre><code>def get_hull_map(self: simulation, arg0: int) -&gt; hullmap:\n    \"\"\"gets the hull map object for this space object\"\"\"\n    hull_map = self.hull_map_objects.get(arg0)\n    if not hull_map:\n        hull_map = hullmap()\n        self.hull_map_objects[arg0]=hull_map\n    return hullmap\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.simulation.get_navpoint_by_name","title":"<code>get_navpoint_by_name(arg0)</code>","text":"<p>takes a string name, returns the associated Navpoint object</p> Source code in <code>mock\\sbs.py</code> <pre><code>def get_navpoint_by_name(self: simulation, arg0: str) -&gt; navpoint:\n    \"\"\"takes a string name, returns the associated Navpoint object\"\"\"\n    return self.nav_points.get(arg0, None)\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.simulation.get_space_object","title":"<code>get_space_object(arg0)</code>","text":"<p>returns the refence to a spaceobject, by ID</p> Source code in <code>mock\\sbs.py</code> <pre><code>def get_space_object(self: simulation, arg0: int) -&gt; space_object:\n    \"\"\"returns the refence to a spaceobject, by ID\"\"\"\n    return self.space_objects.get(arg0)\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.simulation.make_new_active","title":"<code>make_new_active(arg0, arg1)</code>","text":"<p>creates a new spaceobject</p> Source code in <code>mock\\sbs.py</code> <pre><code>def make_new_active(self: simulation, arg0: str, arg1: str) -&gt; int:\n    \"\"\"creates a new spaceobject\"\"\"\n    return self._make_space_object(arg0, arg1, 1)\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.simulation.make_new_passive","title":"<code>make_new_passive(arg0, arg1)</code>","text":"<p>creates a new spaceobject</p> Source code in <code>mock\\sbs.py</code> <pre><code>def make_new_passive(self: simulation, arg0: str, arg1: str) -&gt; int:\n    \"\"\"creates a new spaceobject\"\"\"\n    return self._make_space_object(arg0, arg1, 0)\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.simulation.navpoint_exists","title":"<code>navpoint_exists(arg0)</code>","text":"<p>returns true if the navpoint exists, by name</p> Source code in <code>mock\\sbs.py</code> <pre><code>def navpoint_exists(self: simulation, arg0: str) -&gt; bool:\n    \"\"\"returns true if the navpoint exists, by name\"\"\"\n    return self.nav_points.get(arg0) is not None\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.simulation.reposition_space_object","title":"<code>reposition_space_object(arg0, arg1, arg2, arg3)</code>","text":"<p>immedaitely changes the position of a spaceobject</p> Source code in <code>mock\\sbs.py</code> <pre><code>def reposition_space_object(self: simulation, arg0: space_object, arg1: float, arg2: float, arg3: float) -&gt; None:\n    \"\"\"immedaitely changes the position of a spaceobject\"\"\"\n\n    if arg0:\n        arg0.pos.x = arg1\n        arg0.pos.y = arg2\n        arg0.pos.z = arg3\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.simulation.space_object_exists","title":"<code>space_object_exists(arg0)</code>","text":"<p>returns true if the spaceobject exists, by ID</p> Source code in <code>mock\\sbs.py</code> <pre><code>def space_object_exists(self: simulation, arg0: int) -&gt; bool:\n    \"\"\"returns true if the spaceobject exists, by ID\"\"\"\n    return (arg0 in self.space_objects)\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.space_object","title":"<code>space_object</code>","text":"<p>             Bases: <code>object</code></p> Source code in <code>mock\\sbs.py</code> <pre><code>class space_object(object): ### from pybind\n    def __init__(self):\n        self. data_set_blob = object_data_set()\n        self._side = \"\"\n        self._cur_speed = 0.0\n        self._data_tag = \"\"\n        self._tick_type = \"\"\n        self._type = 0\n        self._id = 0\n        self._exclusion_radius= 0\n        self._fat_radius= 0\n        self._steer_pitch = 0\n        self._steer_roll = 0\n        self._steer_yaw = 0\n        self._pos = vec3(0,0,0)\n    \"\"\"class space_object\"\"\"\n    @property\n    def cur_speed (self: space_object) -&gt; float:\n        \"\"\"float, speed of object\"\"\"\n        return self._cur_speed\n    @cur_speed.setter\n    def cur_speed (self: space_object, arg0: float) -&gt; None:\n        \"\"\"float, speed of object\"\"\"\n        self._cur_speed = arg0\n    @property\n    def data_set (self: space_object) -&gt; object_data_set:\n        \"\"\"object_data_set, read only, refernce to the object_data_set of this particular object\"\"\"\n        return self. data_set_blob\n    @property\n    def data_tag (self: space_object) -&gt; str:\n        \"\"\"string, name of data entry in shipData.json\"\"\"\n        return self._data_tag\n    @data_tag.setter\n    def data_tag (self: space_object, arg0: str) -&gt; None:\n        \"\"\"string, name of data entry in shipData.json\"\"\"\n        self._data_tag = arg0\n    @property\n    def exclusion_radius (self: space_object) -&gt; float:\n        \"\"\"float, other objects cannot be closer to me than this distance\"\"\"\n        return self._exclusion_radius\n    @exclusion_radius.setter\n    def exclusion_radius (self: space_object, arg0: float) -&gt; None:\n        \"\"\"float, other objects cannot be closer to me than this distance\"\"\"\n        self._exclusion_radius = arg0\n    @property\n    def fat_radius (self: space_object) -&gt; float:\n        \"\"\"float, radius of box for internal sorting calculations\"\"\"\n        return self._fat_radius\n    @fat_radius.setter\n    def fat_radius (self: space_object, arg0: float) -&gt; None:\n        \"\"\"float, radius of box for internal sorting calculations\"\"\"\n        self._fat_radius = arg0\n    @property\n    def pos (self: space_object) -&gt; vec3:\n        \"\"\"vec3, position in space\"\"\"\n        return self._pos\n    @pos.setter\n    def pos (self: space_object, arg0: vec3) -&gt; None:\n        \"\"\"vec3, position in space\"\"\"\n        self._pos = arg0\n    @property\n    def rot_quat (self: space_object) -&gt; quaternion:\n        \"\"\"quaternion, heading and orientation of this object\"\"\"\n    @rot_quat.setter\n    def rot_quat (self: space_object, arg0: quaternion) -&gt; None:\n        \"\"\"quaternion, heading and orientation of this object\"\"\"\n    def set_behavior(self: space_object, arg0: str) -&gt; None:\n        \"\"\"set name of behavior module\n        current available behavior modules : nebula, npcship, asteroid, playership, station\"\"\"\n        self._tick_type = arg0\n    @property\n    def side (self: space_object) -&gt; str:\n        \"\"\"string, friendly to other objects on this same side; leave empty for 'no side'\"\"\"\n        return self._side\n    @side.setter\n    def side (self: space_object, arg0: str) -&gt; None:\n        \"\"\"string, friendly to other objects on this same side; leave empty for 'no side'\"\"\"\n        self._side = arg0\n    @property\n    def steer_pitch (self: space_object) -&gt; float:\n        \"\"\"float, change to heading and orientation of this object, over time\"\"\"\n        return self._steer_pitch\n    @steer_pitch.setter\n    def steer_pitch (self: space_object, arg0: float) -&gt; None:\n        \"\"\"float, change to heading and orientation of this object, over time\"\"\"\n        self._steer_pitch = arg0\n    @property\n    def steer_roll (self: space_object) -&gt; float:\n        \"\"\"float, change to heading and orientation of this object, over time\"\"\"\n        return self._steer_roll\n    @steer_roll.setter\n    def steer_roll (self: space_object, arg0: float) -&gt; None:\n        \"\"\"float, change to heading and orientation of this object, over time\"\"\"\n        self._steer_roll=arg0\n    @property\n    def steer_yaw (self: space_object) -&gt; float:\n        \"\"\"float, change to heading and orientation of this object, over time\"\"\"\n        return self._steer_yaw\n    @steer_yaw.setter\n    def steer_yaw (self: space_object, arg0: float) -&gt; None:\n        \"\"\"float, change to heading and orientation of this object, over time\"\"\"\n        self._steer_yaw = arg0\n    @property\n    def tick_type (self: space_object) -&gt; str:\n        \"\"\"string, name of behavior module\n        current available behavior modules : nebula, npcship, asteroid, playership, station\"\"\"\n        return self._tick_type\n    @property\n    def tick_type_ID (self: space_object) -&gt; int:\n        \"\"\"int32, read only, internal representation of tick_type\"\"\"\n    @property\n    def type (self: space_object) -&gt; int:\n        \"\"\"int, 0=passive, 1=active, 2=playerShip\"\"\"\n        self._type\n    @property\n    def unique_ID (self: space_object) -&gt; int:\n        \"\"\"int32, read only, id of this particular object\"\"\"\n        return self._id\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.space_object.cur_speed","title":"<code>cur_speed: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, speed of object</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.data_set","title":"<code>data_set: object_data_set</code>  <code>property</code>","text":"<p>object_data_set, read only, refernce to the object_data_set of this particular object</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.data_tag","title":"<code>data_tag: str</code>  <code>property</code> <code>writable</code>","text":"<p>string, name of data entry in shipData.json</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.exclusion_radius","title":"<code>exclusion_radius: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, other objects cannot be closer to me than this distance</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.fat_radius","title":"<code>fat_radius: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, radius of box for internal sorting calculations</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.pos","title":"<code>pos: vec3</code>  <code>property</code> <code>writable</code>","text":"<p>vec3, position in space</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.rot_quat","title":"<code>rot_quat: quaternion</code>  <code>property</code> <code>writable</code>","text":"<p>quaternion, heading and orientation of this object</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.side","title":"<code>side: str</code>  <code>property</code> <code>writable</code>","text":"<p>string, friendly to other objects on this same side; leave empty for 'no side'</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.steer_pitch","title":"<code>steer_pitch: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, change to heading and orientation of this object, over time</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.steer_roll","title":"<code>steer_roll: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, change to heading and orientation of this object, over time</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.steer_yaw","title":"<code>steer_yaw: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, change to heading and orientation of this object, over time</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.tick_type","title":"<code>tick_type: str</code>  <code>property</code>","text":"<p>string, name of behavior module current available behavior modules : nebula, npcship, asteroid, playership, station</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.tick_type_ID","title":"<code>tick_type_ID: int</code>  <code>property</code>","text":"<p>int32, read only, internal representation of tick_type</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.type","title":"<code>type: int</code>  <code>property</code>","text":"<p>int, 0=passive, 1=active, 2=playerShip</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.unique_ID","title":"<code>unique_ID: int</code>  <code>property</code>","text":"<p>int32, read only, id of this particular object</p>"},{"location":"api/engine/sbs/#mock.sbs.space_object.set_behavior","title":"<code>set_behavior(arg0)</code>","text":"<p>set name of behavior module current available behavior modules : nebula, npcship, asteroid, playership, station</p> Source code in <code>mock\\sbs.py</code> <pre><code>def set_behavior(self: space_object, arg0: str) -&gt; None:\n    \"\"\"set name of behavior module\n    current available behavior modules : nebula, npcship, asteroid, playership, station\"\"\"\n    self._tick_type = arg0\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.tractor_connection","title":"<code>tractor_connection</code>","text":"<p>             Bases: <code>object</code></p> <p>class tractor_connection</p> Source code in <code>mock\\sbs.py</code> <pre><code>class tractor_connection(object): ### from pybind\n    \"\"\"class tractor_connection\"\"\"\n    def __init__(self) -&gt; None:\n        self._offset = 0\n        self._source_id = 0\n        self._target_id = 0\n        self._vec = vec3()\n        self._pull = 0\n    @property\n    def offset (self: tractor_connection) -&gt; float:\n        \"\"\"float, how much the target is pulled towards the offset every tick. 0 = infinite pull, target locked to boss\"\"\"\n        return self._offset\n    @offset.setter\n    def offset (self: tractor_connection, arg0: float) -&gt; None:\n        \"\"\"float, how much the target is pulled towards the offset every tick. 0 = infinite pull, target locked to boss\"\"\"\n        self._offset - arg0\n    @property\n    def source_id (self: tractor_connection) -&gt; int:\n        \"\"\"int, ID of boss/master/major object\"\"\"\n        return self._source_id\n    @property\n    def target_id (self: tractor_connection) -&gt; int:\n        \"\"\"int, ID of object that is attached to the other\"\"\"\n        return self._target_id\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.tractor_connection.offset","title":"<code>offset: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, how much the target is pulled towards the offset every tick. 0 = infinite pull, target locked to boss</p>"},{"location":"api/engine/sbs/#mock.sbs.tractor_connection.source_id","title":"<code>source_id: int</code>  <code>property</code>","text":"<p>int, ID of boss/master/major object</p>"},{"location":"api/engine/sbs/#mock.sbs.tractor_connection.target_id","title":"<code>target_id: int</code>  <code>property</code>","text":"<p>int, ID of object that is attached to the other</p>"},{"location":"api/engine/sbs/#mock.sbs.vec2","title":"<code>vec2</code>","text":"<p>             Bases: <code>object</code></p> <p>class vec2</p> Source code in <code>mock\\sbs.py</code> <pre><code>class vec2(object): ### from pybind\n    \"\"\"class vec2\"\"\"\n    def __init__(self, x, y=None):\n        \"\"\"Overloaded function.\n\n        1. __init__(self: vec2, arg0: float, arg1: float) -&gt; None\n\n        2. __init__(self: vec2, arg0: vec2) -&gt; None\n\n        3. __init__(self: vec2) -&gt; None\"\"\"\n        if isinstance(x, vec2):\n            self._x = x.x\n            self._y = x.y\n        else:\n            self._x = x\n            self._y = y\n\n    @property\n    def x (self: vec2) -&gt; float:\n        \"\"\"float, component value\"\"\"\n        return self._x\n    @x.setter\n    def x (self: vec2, arg0: float) -&gt; None:\n        \"\"\"float, component value\"\"\"\n        self._x = arg0\n    @property\n    def y (self: vec2) -&gt; float:\n        \"\"\"float, component value\"\"\"\n        return self._y\n    @y.setter\n    def y (self: vec2, arg0: float) -&gt; None:\n        \"\"\"float, component value\"\"\"\n        self._y = arg0\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.vec2.x","title":"<code>x: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, component value</p>"},{"location":"api/engine/sbs/#mock.sbs.vec2.y","title":"<code>y: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, component value</p>"},{"location":"api/engine/sbs/#mock.sbs.vec2.__init__","title":"<code>__init__(x, y=None)</code>","text":"<p>Overloaded function.</p> <ol> <li> <p>init(self: vec2, arg0: float, arg1: float) -&gt; None</p> </li> <li> <p>init(self: vec2, arg0: vec2) -&gt; None</p> </li> <li> <p>init(self: vec2) -&gt; None</p> </li> </ol> Source code in <code>mock\\sbs.py</code> <pre><code>def __init__(self, x, y=None):\n    \"\"\"Overloaded function.\n\n    1. __init__(self: vec2, arg0: float, arg1: float) -&gt; None\n\n    2. __init__(self: vec2, arg0: vec2) -&gt; None\n\n    3. __init__(self: vec2) -&gt; None\"\"\"\n    if isinstance(x, vec2):\n        self._x = x.x\n        self._y = x.y\n    else:\n        self._x = x\n        self._y = y\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.vec3","title":"<code>vec3</code>","text":"<p>             Bases: <code>object</code></p> <p>class vec3</p> Source code in <code>mock\\sbs.py</code> <pre><code>class vec3(object): ### from pybind\n    \"\"\"class vec3\"\"\"\n    def __init__(self, x, y=None, z=None):\n        \"\"\"Overloaded function.\n\n        1. __init__(self: vec3, arg0: float, arg1: float, arg2: float) -&gt; None\n\n        2. __init__(self: vec3, arg0: vec3) -&gt; None\n\n        3. __init__(self: vec3) -&gt; None\"\"\"\n        if isinstance(x, vec3):\n            self._x = x._x\n            self._y = x._y\n            self._z = x._z\n        elif y is not None:\n            self._x = x\n            self._y = y\n            self._z = z\n        else:\n            self._x = 0\n            self._y = 0\n            self._z = 0\n\n\n    @property\n    def x (self: vec3) -&gt; float:\n        \"\"\"float, component value\"\"\"\n        return self._x\n    @x.setter\n    def x (self: vec3, arg0: float) -&gt; None:\n        \"\"\"float, component value\"\"\"\n        self._x = arg0\n    @property\n    def y (self: vec3) -&gt; float:\n        \"\"\"float, component value\"\"\"\n        return self._y\n    @y.setter\n    def y (self: vec3, arg0: float) -&gt; None:\n        \"\"\"float, component value\"\"\"\n        self._y = arg0\n    @property\n    def z (self: vec3) -&gt; float:\n        \"\"\"float, component value\"\"\"\n        return self._z\n    @z.setter\n    def z (self: vec3, arg0: float) -&gt; None:\n        \"\"\"float, component value\"\"\"\n        self._z = arg0\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.vec3.x","title":"<code>x: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, component value</p>"},{"location":"api/engine/sbs/#mock.sbs.vec3.y","title":"<code>y: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, component value</p>"},{"location":"api/engine/sbs/#mock.sbs.vec3.z","title":"<code>z: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, component value</p>"},{"location":"api/engine/sbs/#mock.sbs.vec3.__init__","title":"<code>__init__(x, y=None, z=None)</code>","text":"<p>Overloaded function.</p> <ol> <li> <p>init(self: vec3, arg0: float, arg1: float, arg2: float) -&gt; None</p> </li> <li> <p>init(self: vec3, arg0: vec3) -&gt; None</p> </li> <li> <p>init(self: vec3) -&gt; None</p> </li> </ol> Source code in <code>mock\\sbs.py</code> <pre><code>def __init__(self, x, y=None, z=None):\n    \"\"\"Overloaded function.\n\n    1. __init__(self: vec3, arg0: float, arg1: float, arg2: float) -&gt; None\n\n    2. __init__(self: vec3, arg0: vec3) -&gt; None\n\n    3. __init__(self: vec3) -&gt; None\"\"\"\n    if isinstance(x, vec3):\n        self._x = x._x\n        self._y = x._y\n        self._z = x._z\n    elif y is not None:\n        self._x = x\n        self._y = y\n        self._z = z\n    else:\n        self._x = 0\n        self._y = 0\n        self._z = 0\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.vec4","title":"<code>vec4</code>","text":"<p>             Bases: <code>object</code></p> <p>class vec4</p> Source code in <code>mock\\sbs.py</code> <pre><code>class vec4(object): ### from pybind\n    \"\"\"class vec4\"\"\"\n    def __init__(self, r, g=None, b=None, a=None):\n        \"\"\"Overloaded function.\n\n        1. __init__(self: vec4, arg0: float, arg1: float, arg2: float, arg3: float) -&gt; None\n\n        2. __init__(self: vec4, arg0: vec4) -&gt; None\n\n        3. __init__(self: vec4) -&gt; None\"\"\"\n        if isinstance(r, vec4):\n            self._r = r._r\n            self._g = r._g\n            self._b = r._b\n            self._a = r._a\n        elif r is not None:\n            self._r = r\n            self._g = g\n            self._b = b\n            self._a = a\n        else:\n            self._r = 0\n            self._g = 0\n            self._b = 0\n            self._a = 0\n\n    @property\n    def a (self: vec4) -&gt; float:\n        \"\"\"float, component value (0.0-1.0)\"\"\"\n        return self._a\n    @a.setter\n    def a (self: vec4, arg0: float) -&gt; None:\n        \"\"\"float, component value (0.0-1.0)\"\"\"\n        self._a = arg0\n    @property\n    def b (self: vec4) -&gt; float:\n        \"\"\"float, component value (0.0-1.0)\"\"\"\n        return self._b\n    @b.setter\n    def b (self: vec4, arg0: float) -&gt; None:\n        \"\"\"float, component value (0.0-1.0)\"\"\"\n        self._b = arg0\n    @property\n    def g (self: vec4) -&gt; float:\n        \"\"\"float, component value (0.0-1.0)\"\"\"\n        return self._g\n    @g.setter\n    def g (self: vec4, arg0: float) -&gt; None:\n        \"\"\"float, component value (0.0-1.0)\"\"\"\n        self._g = arg0\n    @property\n    def r (self: vec4) -&gt; float:\n        \"\"\"float, component value (0.0-1.0)\"\"\"\n        return self._r\n    @r.setter\n    def r (self: vec4, arg0: float) -&gt; None:\n        \"\"\"float, component value (0.0-1.0)\"\"\"\n        self._r = arg0\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.vec4.a","title":"<code>a: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, component value (0.0-1.0)</p>"},{"location":"api/engine/sbs/#mock.sbs.vec4.b","title":"<code>b: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, component value (0.0-1.0)</p>"},{"location":"api/engine/sbs/#mock.sbs.vec4.g","title":"<code>g: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, component value (0.0-1.0)</p>"},{"location":"api/engine/sbs/#mock.sbs.vec4.r","title":"<code>r: float</code>  <code>property</code> <code>writable</code>","text":"<p>float, component value (0.0-1.0)</p>"},{"location":"api/engine/sbs/#mock.sbs.vec4.__init__","title":"<code>__init__(r, g=None, b=None, a=None)</code>","text":"<p>Overloaded function.</p> <ol> <li> <p>init(self: vec4, arg0: float, arg1: float, arg2: float, arg3: float) -&gt; None</p> </li> <li> <p>init(self: vec4, arg0: vec4) -&gt; None</p> </li> <li> <p>init(self: vec4) -&gt; None</p> </li> </ol> Source code in <code>mock\\sbs.py</code> <pre><code>def __init__(self, r, g=None, b=None, a=None):\n    \"\"\"Overloaded function.\n\n    1. __init__(self: vec4, arg0: float, arg1: float, arg2: float, arg3: float) -&gt; None\n\n    2. __init__(self: vec4, arg0: vec4) -&gt; None\n\n    3. __init__(self: vec4) -&gt; None\"\"\"\n    if isinstance(r, vec4):\n        self._r = r._r\n        self._g = r._g\n        self._b = r._b\n        self._a = r._a\n    elif r is not None:\n        self._r = r\n        self._g = g\n        self._b = b\n        self._a = a\n    else:\n        self._r = 0\n        self._g = 0\n        self._b = 0\n        self._a = 0\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.add_client_tag","title":"<code>add_client_tag()</code>","text":"<p>return a list of client ids, for the computers that are currently connected to this server.</p> Source code in <code>mock\\sbs.py</code> <pre><code>def add_client_tag() -&gt; None:\n    \"\"\"return a list of client ids, for the computers that are currently connected to this server.\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.assign_client_to_ship","title":"<code>assign_client_to_ship(arg0, arg1)</code>","text":"<p>Tells a client computer which ship it should control.</p> Source code in <code>mock\\sbs.py</code> <pre><code>def assign_client_to_ship(arg0: int, arg1: int) -&gt; None:\n    \"\"\"Tells a client computer which ship it should control.\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.broad_test","title":"<code>broad_test(x1, z1, x2, z2, tick_type)</code>","text":"<p>return a list of space objects that are currently inside an x/z 2d rect  ARGS: 2D bounding rect, and type value (0, 1, or 2, -1 = all)</p> Source code in <code>mock\\sbs.py</code> <pre><code>def broad_test(x1: float, z1: float, x2: float, z2: float, tick_type: int) -&gt; List[space_object]:\n    \"\"\"return a list of space objects that are currently inside an x/z 2d rect  ARGS: 2D bounding rect, and type value (0, 1, or 2, -1 = all)\"\"\"\n    global sim\n    ret = []\n    # make sure things are oriented right\n    if x1&gt; x2:\n        x = x1\n        x1 = x2\n        x2 = x\n    if z1&gt; z2:\n        z = z1\n        z1 = z2\n        z2 = z\n\n    if sim is not None:\n        for v in sim.space_objects.values():\n            if tick_type != -1 and tick_type != v._type:\n                continue\n            pos = v.pos\n            if pos.x &gt;= x1 and pos.x &lt; x2 and pos.z &gt;= z1 and pos.z &lt;= z2:\n                ret.append(v)\n    return ret\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.clear_client_tags","title":"<code>clear_client_tags()</code>","text":"<p>return a list of client ids, for the computers that are currently connected to this server.</p> Source code in <code>mock\\sbs.py</code> <pre><code>def clear_client_tags() -&gt; None:\n    \"\"\"return a list of client ids, for the computers that are currently connected to this server.\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.create_new_sim","title":"<code>create_new_sim()</code>","text":"<p>all space objects are deleted; a blank slate is born.</p> Source code in <code>mock\\sbs.py</code> <pre><code>def create_new_sim() -&gt; None:\n    \"\"\"all space objects are deleted; a blank slate is born.\"\"\"\n    global sim\n    sim = simulation()\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.create_transient","title":"<code>create_transient(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)</code>","text":"<p>Generates a temporary graphical object, like an explosion.</p> Source code in <code>mock\\sbs.py</code> <pre><code>def create_transient(arg0: int, arg1: int, arg2: int, arg3: int, arg4: float, arg5: float, arg6: float, arg7: str) -&gt; None:\n    \"\"\"Generates a temporary graphical object, like an explosion.\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.delete_object","title":"<code>delete_object(arg0)</code>","text":"<p>deletes a space object by its ID</p> Source code in <code>mock\\sbs.py</code> <pre><code>def delete_object(arg0: int) -&gt; None:\n    \"\"\"deletes a space object by its ID\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.distance","title":"<code>distance(arg0, arg1)</code>","text":"<p>returns the distance between two space objects; arguments are two spaceObjects</p> Source code in <code>mock\\sbs.py</code> <pre><code>def distance(arg0: space_object, arg1: space_object) -&gt; float:\n    \"\"\"returns the distance between two space objects; arguments are two spaceObjects\"\"\"\n    one = Vec3(arg0.pos.x, arg0.pos.y,arg0.pos.z)\n    two = Vec3(arg1.pos.x, arg1.pos.y,arg1.pos.z)\n    three = two - one\n    return three.length()\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.distance_between_navpoints","title":"<code>distance_between_navpoints(arg0, arg1)</code>","text":"<p>returns the distance between two nav points; navpoints by name</p> Source code in <code>mock\\sbs.py</code> <pre><code>def distance_between_navpoints(arg0: str, arg1: str) -&gt; float:\n    \"\"\"returns the distance between two nav points; navpoints by name\"\"\"\n    return 1000\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.distance_to_navpoint","title":"<code>distance_to_navpoint(arg0, arg1)</code>","text":"<p>returns the distance between a nav point and a space object; navpoint name, then object ID</p> Source code in <code>mock\\sbs.py</code> <pre><code>def distance_to_navpoint(arg0: str, arg1: int) -&gt; float:\n    \"\"\"returns the distance between a nav point and a space object; navpoint name, then object ID\"\"\"\n    return 1000\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.get_client_ID_list","title":"<code>get_client_ID_list()</code>","text":"<p>return a list of client ids, for the computers that are currently connected to this server.</p> Source code in <code>mock\\sbs.py</code> <pre><code>def get_client_ID_list() -&gt; List[int]:\n    \"\"\"return a list of client ids, for the computers that are currently connected to this server.\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.get_screen_size","title":"<code>get_screen_size()</code>","text":"<p>returns a VEC2, with the width and height of the display in pixels</p> Source code in <code>mock\\sbs.py</code> <pre><code>def get_screen_size() -&gt; vec2:\n    \"\"\"returns a VEC2, with the width and height of the display in pixels\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.pause_sim","title":"<code>pause_sim()</code>","text":"<p>the sim will now pause; HandlePresentGUI() and HandlePresentGUIMessage() are called.</p> Source code in <code>mock\\sbs.py</code> <pre><code>def pause_sim() -&gt; None:\n    \"\"\"the sim will now pause; HandlePresentGUI() and HandlePresentGUIMessage() are called.\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.play_music_file","title":"<code>play_music_file(arg0, arg1, arg2)</code>","text":"<p>Plays a music file now, for the specified ship.</p> Source code in <code>mock\\sbs.py</code> <pre><code>def play_music_file(arg0: str, arg1: int, arg2: int) -&gt; None:\n    \"\"\"Plays a music file now, for the specified ship.\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.query_client_tags","title":"<code>query_client_tags()</code>","text":"<p>return a list of client ids, for the computers that are currently connected to this server.</p> Source code in <code>mock\\sbs.py</code> <pre><code>def query_client_tags() -&gt; None:\n    \"\"\"return a list of client ids, for the computers that are currently connected to this server.\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.resume_sim","title":"<code>resume_sim()</code>","text":"<p>the sim will now run; HandleStartMission() and HandleTickMission() are called.</p> Source code in <code>mock\\sbs.py</code> <pre><code>def resume_sim() -&gt; None:\n    \"\"\"the sim will now run; HandleStartMission() and HandleTickMission() are called.\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.send_client_widget_list","title":"<code>send_client_widget_list(arg0, arg1, arg2)</code>","text":"<p>sends the gameplay widgets to draw, on the targeted client (0 = server screen)</p> Source code in <code>mock\\sbs.py</code> <pre><code>def send_client_widget_list(arg0: int, arg1: str, arg2: str) -&gt; None:\n    \"\"\"sends the gameplay widgets to draw, on the targeted client (0 = server screen)\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.send_comms_button_info","title":"<code>send_comms_button_info(arg0, arg1, arg2, arg3)</code>","text":"<p>sends a complex message to the comms console of a certain ship. args:  uint32_t playerID (0 = all ships), std::string color, std::string bodyText</p> Source code in <code>mock\\sbs.py</code> <pre><code>def send_comms_button_info(arg0: int, arg1: str, arg2: str, arg3: str) -&gt; None:\n    \"\"\"sends a complex message to the comms console of a certain ship. args:  uint32_t playerID (0 = all ships), std::string color, std::string bodyText\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.send_comms_message_to_player_ship","title":"<code>send_comms_message_to_player_ship(playerID, sourceID, colorDesc, faceDesc, titleText, bodyText, messageTagSet='')</code>","text":"<p>sends a complex message to the comms console of a certain ship. args:  uint32_t playerID (0 = all ships), std::string color, std::string bodyText</p> Source code in <code>mock\\sbs.py</code> <pre><code>def send_comms_message_to_player_ship(playerID: int, sourceID: int, colorDesc: str, faceDesc: str, titleText: str, bodyText: str, messageTagSet: str = '') -&gt; None:\n    \"\"\"sends a complex message to the comms console of a certain ship. args:  uint32_t playerID (0 = all ships), std::string color, std::string bodyText\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.send_comms_selection_info","title":"<code>send_comms_selection_info(arg0, arg1, arg2, arg3)</code>","text":"<p>sends a complex message to the comms console of a certain ship. args:  uint32_t playerID (0 = all ships), std::string color, std::string bodyText</p> Source code in <code>mock\\sbs.py</code> <pre><code>def send_comms_selection_info(arg0: int, arg1: str, arg2: str, arg3: str) -&gt; None:\n    \"\"\"sends a complex message to the comms console of a certain ship. args:  uint32_t playerID (0 = all ships), std::string color, std::string bodyText\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.send_gui_3dship","title":"<code>send_gui_3dship(arg0, arg1, arg2, arg3, arg4, arg5, arg6)</code>","text":"<p>Creates a 3D ship box GUI element, on the targeted client (0 = server screen)</p> Source code in <code>mock\\sbs.py</code> <pre><code>def send_gui_3dship(arg0: int, arg1: str, arg2: str, arg3: float, arg4: float, arg5: float, arg6: float) -&gt; None:\n    \"\"\"Creates a 3D ship box GUI element, on the targeted client (0 = server screen)\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.send_gui_button","title":"<code>send_gui_button(arg0, arg1, arg2, arg3, arg4, arg5, arg6)</code>","text":"<p>Creates a button GUI element, on the targeted client (0 = server screen)</p> Source code in <code>mock\\sbs.py</code> <pre><code>def send_gui_button(arg0: int, arg1: str, arg2: str, arg3: float, arg4: float, arg5: float, arg6: float) -&gt; None:\n    \"\"\"Creates a button GUI element, on the targeted client (0 = server screen)\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.send_gui_checkbox","title":"<code>send_gui_checkbox(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)</code>","text":"<p>Creates a checkbox GUI element, on the targeted client (0 = server screen)</p> Source code in <code>mock\\sbs.py</code> <pre><code>def send_gui_checkbox(arg0: int, arg1: str, arg2: str, arg3: int, arg4: float, arg5: float, arg6: float, arg7: float) -&gt; None:\n    \"\"\"Creates a checkbox GUI element, on the targeted client (0 = server screen)\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.send_gui_clear","title":"<code>send_gui_clear(arg0)</code>","text":"<p>Clears all GUI elements from screen, on the targeted client (0 = server screen)</p> Source code in <code>mock\\sbs.py</code> <pre><code>def send_gui_clear(arg0: int) -&gt; None:\n    \"\"\"Clears all GUI elements from screen, on the targeted client (0 = server screen)\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.send_gui_dropdown","title":"<code>send_gui_dropdown(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)</code>","text":"<p>Creates a dropdown GUI element, on the targeted client (0 = server screen)</p> Source code in <code>mock\\sbs.py</code> <pre><code>def send_gui_dropdown(arg0: int, arg1: str, arg2: str, arg3: str, arg4: float, arg5: float, arg6: float, arg7: float) -&gt; None:\n    \"\"\"Creates a dropdown GUI element, on the targeted client (0 = server screen)\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.send_gui_face","title":"<code>send_gui_face(arg0, arg1, arg2, arg3, arg4, arg5, arg6)</code>","text":"<p>Creates a face box GUI element, on the targeted client (0 = server screen)</p> Source code in <code>mock\\sbs.py</code> <pre><code>def send_gui_face(arg0: int, arg1: str, arg2: str, arg3: float, arg4: float, arg5: float, arg6: float) -&gt; None:\n    \"\"\"Creates a face box GUI element, on the targeted client (0 = server screen)\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.send_gui_icon","title":"<code>send_gui_icon(arg0, arg1, arg2, arg3, arg4, arg5, arg6)</code>","text":"<p>Creates an icon art GUI element, on the targeted client (0 = server screen)</p> Source code in <code>mock\\sbs.py</code> <pre><code>def send_gui_icon(arg0: int, arg1: str, arg2: str, arg3: int, arg4: float, arg5: float, arg6: float) -&gt; None:\n    \"\"\"Creates an icon art GUI element, on the targeted client (0 = server screen)\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.send_gui_image","title":"<code>send_gui_image(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)</code>","text":"<p>Creates an icon art GUI element, on the targeted client (0 = server screen)</p> Source code in <code>mock\\sbs.py</code> <pre><code>def send_gui_image(arg0: int, arg1: str, arg2: str, arg3: str, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: float, arg10: float, arg11: float) -&gt; None:\n    \"\"\"Creates an icon art GUI element, on the targeted client (0 = server screen)\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.send_gui_slider","title":"<code>send_gui_slider(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)</code>","text":"<p>Creates a slider bar GUI element, on the targeted client (0 = server screen) (long clientID, std::string tag, float low, float high, float current, float left, float top, float right, float bottom)</p> Source code in <code>mock\\sbs.py</code> <pre><code>def send_gui_slider(arg0: int, arg1: str, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9:bool) -&gt; None:\n    \"\"\"Creates a slider bar GUI element, on the targeted client (0 = server screen) (long clientID, std::string tag, float low, float high, float current, float left, float top, float right, float bottom)\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.send_gui_text","title":"<code>send_gui_text(arg0, arg1, arg2, arg3, arg4, arg5, arg6)</code>","text":"<p>Creates a text box GUI element, on the targeted client (0 = server screen)</p> Source code in <code>mock\\sbs.py</code> <pre><code>def send_gui_text(arg0: int, arg1: str, arg2: str, arg3: float, arg4: float, arg5: float, arg6: float) -&gt; None:\n    \"\"\"Creates a text box GUI element, on the targeted client (0 = server screen)\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.send_gui_typein","title":"<code>send_gui_typein(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)</code>","text":"<p>Creates a text entry GUI element, on the targeted client (0 = server screen)</p> Source code in <code>mock\\sbs.py</code> <pre><code>def send_gui_typein(arg0: int, arg1: str, arg2: str, arg3: str, arg4: float, arg5: float, arg6: float, arg7: float) -&gt; None:\n    \"\"\"Creates a text entry GUI element, on the targeted client (0 = server screen)\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.send_message_to_player_ship","title":"<code>send_message_to_player_ship(arg0, arg1, arg2)</code>","text":"<p>sends a text message to the text box, on every client for a certain ship. args:  uint32_t playerID (0 = all ships), std::string color, std::string text</p> Source code in <code>mock\\sbs.py</code> <pre><code>def send_message_to_player_ship(arg0: int, arg1: str, arg2: str) -&gt; None:\n    \"\"\"sends a text message to the text box, on every client for a certain ship. args:  uint32_t playerID (0 = all ships), std::string color, std::string text\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.send_story_dialog","title":"<code>send_story_dialog(arg0, arg1, arg2, arg3, arg4)</code>","text":"<p>sends a story dialog to the targeted client (0 = server screen)</p> Source code in <code>mock\\sbs.py</code> <pre><code>def send_story_dialog(arg0: int, arg1: str, arg2: str, arg3: str, arg4: str) -&gt; None:\n    \"\"\"sends a story dialog to the targeted client (0 = server screen)\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.set_music_folder","title":"<code>set_music_folder(arg0, arg1, arg2)</code>","text":"<p>Sets the folder from which music is streamed, for the specified ship.</p> Source code in <code>mock\\sbs.py</code> <pre><code>def set_music_folder(arg0: str, arg1: int, arg2: int) -&gt; None:\n    \"\"\"Sets the folder from which music is streamed, for the specified ship.\"\"\"\n</code></pre>"},{"location":"api/engine/sbs/#mock.sbs.set_music_tension","title":"<code>set_music_tension(arg0, arg1, arg2)</code>","text":"<p>Sets the tension value of ambient music (0-100), for the specified ship.</p> Source code in <code>mock\\sbs.py</code> <pre><code>def set_music_tension(arg0: float, arg1: int, arg2: int) -&gt; None:\n    \"\"\"Sets the tension value of ambient music (0-100), for the specified ship.\"\"\"\n</code></pre>"},{"location":"api/procedural/gui/","title":"GUI","text":""},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui","title":"<code>gui(timeout=None)</code>","text":"<p>Example function with PEP 484 type annotations.</p> <p>Parameters:</p> Name Type Description Default <code>param1</code> <p>The first parameter.</p> required <code>param2</code> <p>The second parameter.</p> required <p>Returns:</p> Type Description <p>The return value. True for success, False otherwise.</p> Source code in <code>sbs_utils\\procedural\\gui.py</code> <pre><code>def gui(timeout=None):\n    \"\"\"Example function with PEP 484 type annotations.\n\n    Args:\n        param1: The first parameter.\n        param2: The second parameter.\n\n    Returns:\n        The return value. True for success, False otherwise.\n\n    \"\"\"\n    page = FrameContext.page\n    return GuiPromise(page, timeout)\n</code></pre>"},{"location":"api/procedural/gui/#sbs_utils.procedural.gui.gui_text","title":"<code>gui_text(props, style=None)</code>","text":"<p>Gets the simulation space object</p> <p>valid properties     text    color    font</p> <p>:param props: property string  :type props: str :param layout: property string  :type layout: str</p> Source code in <code>sbs_utils\\procedural\\gui.py</code> <pre><code>def gui_text(props, style=None):\n        \"\"\" Gets the simulation space object\n\n        valid properties \n           text\n           color\n           font\n\n\n        :param props: property string \n        :type props: str\n        :param layout: property string \n        :type layout: str\n        \"\"\"\n        page = FrameContext.page\n        task = FrameContext.task\n\n        if page is None:\n            return\n        if style is None: \n            style = \"\"\n        layout_item = layout.Text(page.get_tag(), props)\n        apply_control_styles(\".text\", style, layout_item, task)\n\n        page.add_content(layout_item, None)\n        return layout_item\n</code></pre>"},{"location":"api/procedural/query/","title":"The query module","text":""},{"location":"api/procedural/query/#overview","title":"Overview","text":""},{"location":"api/procedural/query/#api-query","title":"API: query","text":""},{"location":"api/procedural/query/#sbs_utils.procedural.query.random_object","title":"<code>random_object(the_set)</code>","text":"<p>random_object</p> <p>get the object from the set provide</p> <p>:rtype: Agent</p> Source code in <code>sbs_utils\\procedural\\query.py</code> <pre><code>def random_object(the_set):\n    \"\"\" random_object\n\n        get the object from the set provide\n\n        :rtype: Agent\n        \"\"\"\n    rand_id = choice(tuple(the_set))\n    return Agent.get(rand_id)\n</code></pre>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.random_object_list","title":"<code>random_object_list(the_set, count=1)</code>","text":"<p>random_object_list</p> <p>get a list of objects selected randomly from the set provided</p> <p>:param the_set: Set of Ids :type the_set: set of ids :param count: The number of objects to pick :type count: int :rtype: list of Agent</p> Source code in <code>sbs_utils\\procedural\\query.py</code> <pre><code>def random_object_list(the_set, count=1):\n    \"\"\" random_object_list\n\n        get a list of objects selected randomly from the set provided\n\n        :param the_set: Set of Ids\n        :type the_set: set of ids\n        :param count: The number of objects to pick\n        :type count: int\n        :rtype: list of Agent\n        \"\"\"\n    rand_id_list = choices(tuple(the_set), count)\n    return [Agent.get(x) for x in rand_id_list]\n</code></pre>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.to_id_list","title":"<code>to_id_list(the_set)</code>","text":"<p>to_id_list</p> <p>converts a single object/id, set ot list of things to a set of ids</p> <p>:param the_set: The a set of things :type the_set: set, list or single item :rtype: list of ids</p> Source code in <code>sbs_utils\\procedural\\query.py</code> <pre><code>def to_id_list(the_set):\n    \"\"\" to_id_list\n\n        converts a single object/id, set ot list of things to a set of ids\n\n        :param the_set: The a set of things\n        :type the_set: set, list or single item\n        :rtype: list of ids\n        \"\"\"\n    if the_set is None:\n        return []\n    the_list = to_list(the_set)\n    return [y for x in the_list if (y:=Agent.resolve_id(x)) is not None]\n</code></pre>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.to_list","title":"<code>to_list(other)</code>","text":"<p>to_list</p> <p>converts a single object/id, set ot list of things to a list</p> <p>:param the_set: The a set of things :type the_set: set, list or single item :rtype: list of things</p> Source code in <code>sbs_utils\\procedural\\query.py</code> <pre><code>def to_list(other: Agent | CloseData | int):\n    \"\"\" to_list\n\n        converts a single object/id, set ot list of things to a list\n\n        :param the_set: The a set of things\n        :type the_set: set, list or single item\n        :rtype: list of things\n        \"\"\"\n    if isinstance(other, set):\n        return list(other)\n    elif isinstance(other, list):\n        return other\n    elif other is None:\n        return None\n    return [other]\n</code></pre>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.to_object_list","title":"<code>to_object_list(the_set)</code>","text":"<p>to_object_list</p> <p>converts a set to a list of objects</p> <p>:param the_set: A set of ids :type the_set: set of ids</p> <p>:rtype: list of Agent</p> Source code in <code>sbs_utils\\procedural\\query.py</code> <pre><code>def to_object_list(the_set):\n    \"\"\" to_object_list\n\n        converts a set to a list of objects\n\n        :param the_set: A set of ids\n        :type the_set: set of ids\n\n        :rtype: list of Agent\n        \"\"\"\n    if the_set is None:\n        return []\n    the_list = to_list(the_set)\n    return [y for x in the_list if (y := Agent.resolve_py_object(x)) is not None]\n</code></pre>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.to_py_object_list","title":"<code>to_py_object_list(the_set)</code>","text":"<p>to_py_object_list</p> <p>converts a set of ids to a set of objects</p> <p>:rtype: list Agent</p> Source code in <code>sbs_utils\\procedural\\query.py</code> <pre><code>def to_py_object_list(the_set):\n    \"\"\" to_py_object_list\n\n        converts a set of ids to a set of objects\n\n        :rtype: list Agent\n        \"\"\"\n    return [Agent.get(id) for id in the_set]\n</code></pre>"},{"location":"api/procedural/query/#sbs_utils.procedural.query.to_set","title":"<code>to_set(other)</code>","text":"<p>to_set</p> <p>converts a single object/id, set ot list of things to a set of ids</p> <p>:param the_set: The a set of things :type the_set: set, list or single item :rtype: list of ids</p> Source code in <code>sbs_utils\\procedural\\query.py</code> <pre><code>def to_set(other: Agent | CloseData | int):\n    \"\"\" to_set\n\n        converts a single object/id, set ot list of things to a set of ids\n\n        :param the_set: The a set of things\n        :type the_set: set, list or single item\n        :rtype: list of ids\n        \"\"\"\n    if isinstance(other, list):\n        return set(other)\n    elif isinstance(other, set):\n        return other\n    elif other is None:\n        return None\n    return {to_id(other)}\n</code></pre>"},{"location":"api/procedural/roles/","title":"The roles system","text":"<p>The SpaceObject class has methods for assigning and removing 'roles' to objects.</p> <p>Roles are like sides but can be more dynamic and are not seen by the simulation. You can have multiple roles on an object. Roles can be used in targeting etc.</p> <p>** This need more documentation** placing examples for now</p>"},{"location":"api/procedural/roles/#adding-a-role","title":"Adding a role","text":"Python <pre><code>add_role(some_id, 'spy')\n</code></pre>"},{"location":"api/procedural/roles/#remove-a-role","title":"Remove a role","text":"Python <pre><code>remove_role(some_id, 'spy')\n</code></pre>"},{"location":"api/procedural/roles/#check-for-a-role","title":"Check for a role","text":"PyThon <pre><code>if has_role(some_id, 'spy')\n      pass\n</code></pre>"},{"location":"api/procedural/roles/#using-with-targeting","title":"Using with targeting","text":"PyThon <pre><code>close = closest(some_id, role(\"spy\"))\n# class names are included in roles\nclose = closest(some_id, role(\"station\"))\n# side is included in roles\nclose = closest(some_id, role(\"tsn\"))\n</code></pre>"},{"location":"api/utility/faces/","title":"The Faces module","text":"<p>The faces module is used for creating face images for comms screens.</p> <p>Faces are based off of a set of image textures with a grid of cell images.</p> <p>The set of images is defined in allFaceFiles.txt. This file defines a key name for the texture and an image in the data\\graphics folder. Cells are 512x512 and the total images must be a valid DirectX12 pixel size.</p> <p>This set of images can be extended with new textures added to allFacesFiles.txt</p>"},{"location":"api/utility/faces/#face-generation-functions","title":"Face generation functions","text":"<p>The faces module has a set of functions to generate random faces for the base set of face image textures provided by Artemis Cosmos.</p> <p>=== \"python\"     <pre><code>self.face_desc = random_skaraan()\n</code></pre></p> <p>There are also function to make it easier to create specific faces by passing indexes to define indexes that represent cells containing know art images for things like hair, eyes, mouth etc. It may take some experimentation to find the values for your character, but this is a simplified way to create repeatable characters. Other ways to create consistent faces is to use one of the predefined class:<code>~sbs_utils.faces.Characters</code> or hand code a face string.</p> Python <pre><code>  self.face_desc = skaraan(0, 1,2,1,3)\n</code></pre>"},{"location":"api/utility/faces/#character-faces","title":"Character Faces","text":"<p>The class class:<code>~sbs_utils.faces.Characters</code> has a list of predefined face strings.</p> <p>These are a good examples for creating a face string by hand.</p>"},{"location":"api/utility/faces/#the-faces-string-syntax","title":"The faces string syntax","text":"<p>Face string is a set of layers that reference a cell in a texture separated by a semi-colon. The first layer is the lowest layer.</p> <p>  [] []; <ul> <li> the texture tag specified in allFaceFiles.txt <li> a Tint to add to the layer. e.g. changing skin tone <li> the cell's col <li> the cell's row <li> optional to offset the layer in x <li> optional to offset the layer in y"},{"location":"api/utility/faces/#api-faces-module","title":"API: faces module","text":""},{"location":"api/utility/faces/#sbs_utils.faces.Characters","title":"<code>Characters</code>","text":"<p>A set of predefined faces</p> Source code in <code>sbs_utils\\faces.py</code> <pre><code>class Characters:\n    \"\"\"\n    A set of predefined faces\n    \"\"\"\n    URSULA  = \"ter #964b00 8 1;ter #968b00 3 0;ter #968b00 4 0;ter #968b00 5 2;ter #fff 3 5;ter #964b00 8 4;\"\n</code></pre>"},{"location":"api/utility/faces/#sbs_utils.faces.arvonian","title":"<code>arvonian(face_i, eye_i, mouth_i, crown_i, collar_i)</code>","text":"<p>Create an arvonian face</p> <p>:param face_i: The index of the face 0 :type face_i: int :param eye_id: The index of the eyes 0-4 :type eye_i: int :param mouth_id: The index of the mouth 0-4 :type mouth_i: int :param crown_id: The index of the crown 0-4 or None :type crown_i: int or None :param collar_id: The index of the collar 0-4 or None :type collar_i: int or None</p> <p>:return: A Face string :rtype: string</p> Source code in <code>sbs_utils\\faces.py</code> <pre><code>def arvonian(face_i, eye_i, mouth_i, crown_i, collar_i):\n    \"\"\" Create an arvonian face\n\n    :param face_i: The index of the face 0\n    :type face_i: int\n    :param eye_id: The index of the eyes 0-4\n    :type eye_i: int\n    :param mouth_id: The index of the mouth 0-4\n    :type mouth_i: int\n    :param crown_id: The index of the crown 0-4 or None\n    :type crown_i: int or None\n    :param collar_id: The index of the collar 0-4 or None\n    :type collar_i: int or None\n\n    :return: A Face string\n    :rtype: string\n    \"\"\"\n    face = arvonian_map[\"face\"][face_i]\n    eye = arvonian_map[\"eyes\"][eye_i]\n    mouth = arvonian_map[\"mouth\"][mouth_i]\n\n    ret =  f\"arv #fff {face[0]} {face[1]};arv #fff {eye[0]} {eye[1]};arv #fff {mouth[0]} {mouth[1]};\"\n    if crown_i is not None:\n        crown = arvonian_map[\"crown\"][crown_i]\n        ret += f\"arv #fff {crown[0]} {crown[1]};\"\n\n    if collar_i  is not None:\n        collar = arvonian_map[\"collar\"][collar_i]\n        ret += f\"arv #fff {collar[0]} {collar[1]};\"\n    return ret\n</code></pre>"},{"location":"api/utility/faces/#sbs_utils.faces.clear_face","title":"<code>clear_face(ship_id)</code>","text":"<p>Removes a face string for a specified ID</p> <p>:param ship_id: The id of the ship/object :type ship_id: int</p> Source code in <code>sbs_utils\\faces.py</code> <pre><code>def clear_face(ship_id):\n    \"\"\" Removes a face string for a specified ID\n\n    :param ship_id: The id of the ship/object\n    :type ship_id: int\n    \"\"\"\n    faces_map.pop(ship_id, None)\n</code></pre>"},{"location":"api/utility/faces/#sbs_utils.faces.get_face","title":"<code>get_face(ship_id)</code>","text":"<p>returns a face string for a specified ID</p> <p>:param ship_id: The id of the ship/object :type ship_id: int :return: A Face string :rtype: string</p> Source code in <code>sbs_utils\\faces.py</code> <pre><code>def get_face(ship_id):\n    \"\"\" returns a face string for a specified ID\n\n    :param ship_id: The id of the ship/object\n    :type ship_id: int\n    :return: A Face string\n    :rtype: string\n    \"\"\"\n    return faces_map.get(ship_id, \"\")\n</code></pre>"},{"location":"api/utility/faces/#sbs_utils.faces.kralien","title":"<code>kralien(face_i, eye_i, mouth_i, scalp_i, extra_i)</code>","text":"<p>Create an kralien face</p> <p>:param face_i: The index of the face 0 :type face_i: int :param eye_id: The index of the eyes 0-4 :type eye_i: int :param mouth_id: The index of the mouth 0-4 :type mouth_i: int :param scalp_id: The index of the scalp 0-4 or None :type scalp_i: int or None :param extra_id: The index of the extra 0-4 or None :type extra_i: int or None</p> <p>:return: A Face string :rtype: string</p> Source code in <code>sbs_utils\\faces.py</code> <pre><code>def kralien(face_i, eye_i, mouth_i, scalp_i, extra_i):\n    \"\"\" Create an kralien face\n\n    :param face_i: The index of the face 0\n    :type face_i: int\n    :param eye_id: The index of the eyes 0-4\n    :type eye_i: int\n    :param mouth_id: The index of the mouth 0-4\n    :type mouth_i: int\n    :param scalp_id: The index of the scalp 0-4 or None\n    :type scalp_i: int or None\n    :param extra_id: The index of the extra 0-4 or None\n    :type extra_i: int or None\n\n    :return: A Face string\n    :rtype: string\n    \"\"\"\n    face = kralien_map[\"face\"][face_i]\n    eye = kralien_map[\"eyes\"][eye_i]\n    mouth = kralien_map[\"mouth\"][mouth_i]\n\n    ret =  f\"kra #fff {face[0]} {face[1]};kra #fff {eye[0]} {eye[1]};kra #fff {mouth[0]} {mouth[1]};\"\n    if scalp_i is not None:\n        scalp = kralien_map[\"scalp\"][scalp_i]\n        ret += f\"kra #fff {scalp[0]} {scalp[1]};\"\n\n    if extra_i  is not None:\n        extra = kralien_map[\"extra\"][extra_i]\n        ret += f\"kra #fff {extra[0]} {extra[1]};\"\n    return ret\n</code></pre>"},{"location":"api/utility/faces/#sbs_utils.faces.random_arvonian","title":"<code>random_arvonian()</code>","text":"<p>Create a random arvonian face</p> <p>:return: A Face string :rtype: string</p> Source code in <code>sbs_utils\\faces.py</code> <pre><code>def random_arvonian():\n    \"\"\" Create a random arvonian face\n\n    :return: A Face string\n    :rtype: string\n    \"\"\"\n    face = randrange(0, len(arvonian_map[\"face\"]))\n    eye = randrange(0, len(arvonian_map[\"eyes\"]))\n    mouth = randrange(0, len(arvonian_map[\"mouth\"]))\n    crown = None\n    collar = None\n\n    if randrange(0,10) &gt; 5:\n        crown = randrange(0, len(arvonian_map[\"crown\"]))\n    if randrange(0,10) &gt; 5:\n        collar = randrange(0, len(arvonian_map[\"collar\"]))\n    return arvonian(face, eye, mouth, crown, collar)\n</code></pre>"},{"location":"api/utility/faces/#sbs_utils.faces.random_kralien","title":"<code>random_kralien()</code>","text":"<p>Create a random kralien face</p> <p>:return: A Face string :rtype: string</p> Source code in <code>sbs_utils\\faces.py</code> <pre><code>def random_kralien():\n    \"\"\" Create a random kralien face\n\n    :return: A Face string\n    :rtype: string\n    \"\"\"\n    face = randrange(0, len(kralien_map[\"face\"]))\n    eye = randrange(0, len(kralien_map[\"eyes\"]))\n    mouth = randrange(0, len(kralien_map[\"mouth\"]))\n    scalp = None\n    extra = None\n\n    if randrange(0,10) &gt; 5:\n        scalp = randrange(0, len(kralien_map[\"scalp\"]))\n    if randrange(0,10) &gt; 5:\n        extra = randrange(0, len(kralien_map[\"extra\"]))\n    return kralien(face, eye, mouth, scalp, extra)\n</code></pre>"},{"location":"api/utility/faces/#sbs_utils.faces.random_skaraan","title":"<code>random_skaraan()</code>","text":"<p>Create a random skaraan face</p> <p>:return: A Face string :rtype: string</p> Source code in <code>sbs_utils\\faces.py</code> <pre><code>def random_skaraan():\n    \"\"\" Create a random skaraan face\n\n    :return: A Face string\n    :rtype: string\n    \"\"\"\n    face = randrange(0, len(skaraan_map[\"face\"]))\n    eye = randrange(0, len(skaraan_map[\"eyes\"]))\n    mouth = randrange(0, len(skaraan_map[\"mouth\"]))\n    horns = None\n    hat = None\n    if randrange(0,10) &gt; 5:\n        horns = randrange(0, len(skaraan_map[\"horns\"]))\n    if randrange(0,10) &gt; 5:\n        hat = randrange(0, len(skaraan_map[\"hat\"]))\n    return skaraan(face, eye, mouth, horns, hat)\n</code></pre>"},{"location":"api/utility/faces/#sbs_utils.faces.random_terran","title":"<code>random_terran(face=None, civilian=None)</code>","text":"<p>Create a random terran face</p> <p>:param face: The index of the hair 0=male,1=female,2=fluid male, 3=fluid female or None= random :type face: int or None :param civilian: The force this to be a civilian=True, For non-civilian=False or None= random :type civilian: boolean or None</p> <p>:return: A Face string :rtype: string</p> Source code in <code>sbs_utils\\faces.py</code> <pre><code>def random_terran(face=None, civilian=None):\n    \"\"\" Create a random terran face\n\n    :param face: The index of the hair 0=male,1=female,2=fluid male, 3=fluid female or None= random\n    :type face: int or None\n    :param civilian: The force this to be a civilian=True, For non-civilian=False or None= random\n    :type civilian: boolean or None\n\n    :return: A Face string\n    :rtype: string\n    \"\"\"\n    is_fluid = False\n    if face is None:\n        fluid = probably(3/10)\n\n        if fluid: # 3 out of 10\n            face = 2\n            is_fluid = True\n        else:\n            face = fluid % 2\n    else:\n        is_fluid = face &gt;=2\n        face = face % 2\n\n\n\n    if is_fluid:\n        eye = randrange(0, len(terran_map[\"eyes\"])*2)\n    else:\n        eye = randrange(0, len(terran_map[\"eyes\"]))\n\n    if is_fluid:\n        mouth = randrange(0, len(terran_map[\"mouth\"])*2)\n    else: \n        mouth = randrange(0, len(terran_map[\"mouth\"]))\n\n    hair = None\n    extra = None\n    longhair = None\n    if is_fluid or face==1:\n        if probably(95/100):\n            hair = randrange(0, len(terran_map[\"hair\"]))\n    else:\n        if probably(75/100):\n            hair = randrange(0, len(terran_map[\"hair\"]))\n\n    facial = None\n    # male more chance of facial hair\n    if is_fluid or face==1:\n        if probably(5/100):\n            facial = randrange(0, len(terran_map[\"facial\"]))\n    else:\n        if probably(65/100):\n            facial = randrange(0, len(terran_map[\"facial\"]))\n\n    # if female 80% chance of long hair\n    # male 20%\n    if is_fluid or face==1:\n        if probably(8/10):\n            longhair = randrange(0, len(terran_map[\"longhair\"]))\n    else:\n        if probably(2/10):\n            longhair = randrange(0, len(terran_map[\"longhair\"]))\n\n    # 35% chance\n    if probably(35/100):\n        extra = randrange(0, len(terran_map[\"extra\"]))\n\n    if civilian ==True:\n        uniform = None\n    elif civilian == False:\n        uniform = randrange(0, len(terran_uniform))\n    else:\n        if probably(2/10):\n            uniform = None\n        else:\n            uniform = randrange(0, len(terran_uniform))\n\n    skintone = randrange(0, len(skin_tones))\n    hairtone = randrange(0, len(hair_tones))\n\n    return terran(face, eye, mouth, hair, longhair, facial, extra, uniform, skintone, hairtone)\n</code></pre>"},{"location":"api/utility/faces/#sbs_utils.faces.random_terran_female","title":"<code>random_terran_female(civilian=None)</code>","text":"<p>Create a random terran female face</p> <p>:param face: The index of the hair 0=male,1=female,2=fluid male, 3=fluid female or None= random :type face: int or None :param civilian: The force this to be a civilian=True, For non-civilian=False or None= random :type civilian: boolean or None</p> <p>:return: A Face string :rtype: string</p> Source code in <code>sbs_utils\\faces.py</code> <pre><code>def random_terran_female(civilian=None):\n    \"\"\" Create a random terran female face\n\n    :param face: The index of the hair 0=male,1=female,2=fluid male, 3=fluid female or None= random\n    :type face: int or None\n    :param civilian: The force this to be a civilian=True, For non-civilian=False or None= random\n    :type civilian: boolean or None\n\n    :return: A Face string\n    :rtype: string\n    \"\"\"\n    return random_terran(1, civilian)\n</code></pre>"},{"location":"api/utility/faces/#sbs_utils.faces.random_terran_fluid","title":"<code>random_terran_fluid(civilian=None)</code>","text":"<p>Create a random fluid terran face i.e. may have male or female features</p> <p>:param civilian: The force this to be a civilian=True, For non-civilian=False or None= random :type civilian: boolean or None</p> <p>:return: A Face string :rtype: string</p> Source code in <code>sbs_utils\\faces.py</code> <pre><code>def random_terran_fluid(civilian=None):\n    \"\"\" Create a random fluid terran face i.e. may have male or female features\n\n    :param civilian: The force this to be a civilian=True, For non-civilian=False or None= random\n    :type civilian: boolean or None\n\n    :return: A Face string\n    :rtype: string\n    \"\"\"\n    return random_terran(randrange(0, 10)%2+2, civilian)\n</code></pre>"},{"location":"api/utility/faces/#sbs_utils.faces.random_terran_male","title":"<code>random_terran_male(civilian=None)</code>","text":"<p>Create a random terran male face</p> <p>:param civilian: The force this to be a civilian=True, For non-civilian=False or None= random :type civilian: boolean or None</p> <p>:return: A Face string :rtype: string</p> Source code in <code>sbs_utils\\faces.py</code> <pre><code>def random_terran_male(civilian=None):\n    \"\"\" Create a random terran male face\n\n    :param civilian: The force this to be a civilian=True, For non-civilian=False or None= random\n    :type civilian: boolean or None\n\n    :return: A Face string\n    :rtype: string\n    \"\"\"\n    return random_terran(0, civilian)\n</code></pre>"},{"location":"api/utility/faces/#sbs_utils.faces.random_torgoth","title":"<code>random_torgoth()</code>","text":"<p>Create a random torgoth face</p> <p>:return: A Face string :rtype: string</p> Source code in <code>sbs_utils\\faces.py</code> <pre><code>def random_torgoth():\n    \"\"\" Create a random torgoth face\n\n    :return: A Face string\n    :rtype: string\n    \"\"\"\n    face = randrange(0, len(torgoth_map[\"face\"]))\n    eye = randrange(0, len(torgoth_map[\"eyes\"]))\n    mouth = randrange(0, len(torgoth_map[\"mouth\"]))\n    hair = None\n    extra = None\n    hat = None\n    if randrange(0,10) &gt; 5:\n        hair = randrange(0, len(torgoth_map[\"hair\"]))\n    if randrange(0,10) &gt; 5:\n        extra = randrange(0, len(torgoth_map[\"extra\"]))\n    if randrange(0,10) &gt; 7:\n        hat = randrange(0, len(torgoth_map[\"hat\"]))\n    return torgoth(face, eye, mouth, hair, extra, hat)\n</code></pre>"},{"location":"api/utility/faces/#sbs_utils.faces.random_ximni","title":"<code>random_ximni()</code>","text":"<p>Create a random ximni face</p> <p>:return: A Face string :rtype: string</p> Source code in <code>sbs_utils\\faces.py</code> <pre><code>def random_ximni():\n    \"\"\" Create a random ximni face\n\n    :return: A Face string\n    :rtype: string\n    \"\"\"\n    face = randrange(0, len(ximni_map[\"face\"]))\n    eye = randrange(0, len(ximni_map[\"eyes\"]))\n    mouth = randrange(0, len(ximni_map[\"mouth\"]))\n    horns = None\n    mask = None\n    collar = None\n    if randrange(0,10) &gt; 5:\n        horns = randrange(0, len(ximni_map[\"horns\"]))\n    if randrange(0,10) &gt; 5:\n        mask = randrange(0, len(ximni_map[\"mask\"]))\n    if randrange(0,10) &gt; 7:\n        collar = randrange(0, len(ximni_map[\"collar\"]))\n    return ximni(face, eye, mouth, horns, mask, collar)\n</code></pre>"},{"location":"api/utility/faces/#sbs_utils.faces.set_face","title":"<code>set_face(ship_id, face)</code>","text":"<p>sets a face string for a specified ID</p> <p>:param ship_id: The id of the ship/object :type ship_id: int :param face: A Face string :type face: string</p> Source code in <code>sbs_utils\\faces.py</code> <pre><code>def set_face(ship_id, face):\n    \"\"\" sets a face string for a specified ID\n\n    :param ship_id: The id of the ship/object\n    :type ship_id: int\n    :param face: A Face string\n    :type face: string\n    \"\"\"\n    faces_map[ship_id] = face\n</code></pre>"},{"location":"api/utility/faces/#sbs_utils.faces.skaraan","title":"<code>skaraan(face_i, eye_i, mouth_i, horn_i, hat_i)</code>","text":"<p>Create a skaraan face</p> <p>:param face_i: The index of the face 0 :type face_i: int :param eye_id: The index of the eyes 0-4 :type eye_i: int :param mouth_id: The index of the mouth 0-4 :type mouth_i: int :param horn_id: The index of the horn 0-4 or None :type horn_i: int or None :param hat_id: The index of the hat 0-4 or None :type hat_i: int or None :return: A Face string :rtype: string</p> Source code in <code>sbs_utils\\faces.py</code> <pre><code>def skaraan(face_i, eye_i, mouth_i, horn_i, hat_i):\n    \"\"\" Create a skaraan face\n\n    :param face_i: The index of the face 0\n    :type face_i: int\n    :param eye_id: The index of the eyes 0-4\n    :type eye_i: int\n    :param mouth_id: The index of the mouth 0-4\n    :type mouth_i: int\n    :param horn_id: The index of the horn 0-4 or None\n    :type horn_i: int or None\n    :param hat_id: The index of the hat 0-4 or None\n    :type hat_i: int or None\n    :return: A Face string\n    :rtype: string\n    \"\"\"\n    face = skaraan_map[\"face\"][face_i]\n    eye = skaraan_map[\"eyes\"][eye_i]\n    mouth = skaraan_map[\"mouth\"][mouth_i]\n\n    ret =  f\"ska #fff {face[0]} {face[1]};ska #fff {eye[0]} {eye[1]};ska #fff {mouth[0]} {mouth[1]};\"\n    if horn_i  is not None:\n        horns = skaraan_map[\"horns\"][horn_i]\n        ret += f\"ska #fff {horns[0]} {horns[1]};\"\n    if hat_i is not None:\n        hat = skaraan_map[\"hat\"][hat_i]\n        ret += f\"ska #fff {hat[0]} {hat[1]};\"\n    return ret\n</code></pre>"},{"location":"api/utility/faces/#sbs_utils.faces.terran","title":"<code>terran(face_i, eye_i, mouth_i, hair_i, longhair_i, facial_i, extra_i, uniform_i, skintone, hairtone)</code>","text":"<p>Create an terran face</p> <p>:param face_i: The index of the face 0=male, 1=female, 2=fluid_male, 3=fluid_female :type face_i: int or None  :param eye_i: The index of the eyes 0-9 :type eye_i: int or None :param mouth_i: The index of the mouth 0-9 :type mouth_i: int :param hair_i: The index of the hair 0-9 or None :type hair_i: int or None :param longhair_i: The index of the hair 0-7 or None :type longhair_i: int or None :param facial_i: The index of the hair 0-11 or None :type facial_i: int or None :param extra_i: The index of the extra 0-5 or None :type extra_i: int or None :param uniform_i: The index of the uniform 0 or None. None = civilian :type uniform_i: int or None :param skintone_i: The index of the skintone 0-??, string = color string or None.  :type skintone_i: int, str or None :param hairtone_i: The index of the skintone 0-??, string = color string  or None. :type hairtone_i: int, str or None</p> <p>:return: A Face string :rtype: string</p> Source code in <code>sbs_utils\\faces.py</code> <pre><code>def terran(face_i, eye_i, mouth_i, hair_i, longhair_i, facial_i, extra_i, uniform_i, skintone, hairtone):\n    \"\"\" Create an terran face\n\n    :param face_i: The index of the face 0=male, 1=female, 2=fluid_male, 3=fluid_female\n    :type face_i: int or None \n    :param eye_i: The index of the eyes 0-9\n    :type eye_i: int or None\n    :param mouth_i: The index of the mouth 0-9\n    :type mouth_i: int\n    :param hair_i: The index of the hair 0-9 or None\n    :type hair_i: int or None\n    :param longhair_i: The index of the hair 0-7 or None\n    :type longhair_i: int or None\n    :param facial_i: The index of the hair 0-11 or None\n    :type facial_i: int or None\n    :param extra_i: The index of the extra 0-5 or None\n    :type extra_i: int or None\n    :param uniform_i: The index of the uniform 0 or None. None = civilian\n    :type uniform_i: int or None\n    :param skintone_i: The index of the skintone 0-??, string = color string or None. \n    :type skintone_i: int, str or None\n    :param hairtone_i: The index of the skintone 0-??, string = color string  or None.\n    :type hairtone_i: int, str or None\n\n    :return: A Face string\n    :rtype: string\n    \"\"\"\n\n    is_fluid = False \n    # if not fluid mouth and eyes must match gender \n    # face and uniform need to match\n    if face_i&gt;=2: \n        #fluid\n        face_i = face_i % 2\n        is_fluid = True\n\n    face = terran_map[\"face\"][0]\n    if face_i == 1:\n        face = (face[0] + 3, face[1])\n\n\n    eye_count =len(terran_map[\"eyes\"])\n\n    female_eyes =  (eye_i &gt; eye_count)\n    if not is_fluid and face_i==1:\n        female_eyes = True\n\n    eye = terran_map[\"eyes\"][eye_i%eye_count]\n\n    # offset cell\n    if female_eyes:\n        eye = (eye[0]+ 3, eye[1])\n\n    mouth_count =len(terran_map[\"mouth\"])\n    female_mouth = mouth_i &gt; mouth_count\n    if not is_fluid and face_i==1:\n        female_mouth = True\n\n    mouth = terran_map[\"mouth\"][mouth_i%mouth_count]\n    # offset cell\n    if female_mouth:\n        mouth = (mouth[0] + 3, mouth[1])\n\n    if skintone == None:\n        skintone = \"fff\"\n    elif not isinstance(skintone, str):\n        skintone = skin_tones[skintone]\n\n\n    if hairtone == None:\n        hairtone = \"fff\"\n    elif not isinstance(hairtone, str):\n        hairtone = hair_tones[hairtone]\n\n    ret = \"\"\n    if longhair_i is not None:\n        longhair = terran_map[\"longhair\"][longhair_i]\n        ret += f\"ter #{hairtone} {longhair[0]} {longhair[1]} 6  -2;\"\n\n    ret +=  f\"ter #{skintone} {face[0]} {face[1]};ter #{skintone} {eye[0]} {eye[1]};ter #{skintone} {mouth[0]} {mouth[1]};\"\n    if hair_i is not None:\n        hair = terran_map[\"hair\"][hair_i]\n        ret += f\"ter #{hairtone} {hair[0]} {hair[1]} 6 -2;\"\n\n\n    # Civilian\n    if uniform_i == None:\n        shirt = (2,5)\n        hat = None\n    else:\n        uniform = terran_uniform[uniform_i]\n        shirt = terran_map[\"shirt\"][uniform[1]]\n        hat = terran_map[\"hat\"][uniform[0]]\n\n\n    if hat:\n        ret += f\"ter #fff {hat[0]} {hat[1]} 14 -2;\"\n\n    if face_i == 1:\n        shirt = (shirt[0]+3, shirt[1])\n\n    ret += f\"ter #fff {shirt[0]} {shirt[1]};\"\n\n    if facial_i is not None:\n        facial = terran_map[\"facial\"][facial_i]\n        ret += f\"ter #{hairtone} {facial[0]} {facial[1]} 12 4;\"\n\n\n    if extra_i  is not None:\n        extra = terran_map[\"extra\"][extra_i]\n        ret += f\"ter #fff {extra[0]} {extra[1]} 20 4;\"\n    return ret\n</code></pre>"},{"location":"api/utility/faces/#sbs_utils.faces.torgoth","title":"<code>torgoth(face_i, eye_i, mouth_i, hair_i, extra_i, hat_i)</code>","text":"<p>Create a torgoth face</p> <p>:param face_i: The index of the face 0 :type face_i: int :param eye_id: The index of the eyes 0-4 :type eye_i: int :param mouth_id: The index of the mouth 0-4 :type mouth_i: int :param hair_id: The index of the hair 0-4 or None :type hair_i: int or None :param extra_id: The index of the extra 0-4 or None :type extra_i: int or None :param hat_id: The index of the hat 0 or None :type hat_i: int or None</p> <p>:return: A Face string :rtype: string</p> Source code in <code>sbs_utils\\faces.py</code> <pre><code>def torgoth(face_i, eye_i, mouth_i, hair_i, extra_i, hat_i):\n    \"\"\" Create a torgoth face\n\n    :param face_i: The index of the face 0\n    :type face_i: int\n    :param eye_id: The index of the eyes 0-4\n    :type eye_i: int\n    :param mouth_id: The index of the mouth 0-4\n    :type mouth_i: int\n    :param hair_id: The index of the hair 0-4 or None\n    :type hair_i: int or None\n    :param extra_id: The index of the extra 0-4 or None\n    :type extra_i: int or None\n    :param hat_id: The index of the hat 0 or None\n    :type hat_i: int or None\n\n    :return: A Face string\n    :rtype: string\n    \"\"\"\n    face = torgoth_map[\"face\"][face_i]\n    eye = torgoth_map[\"eyes\"][eye_i]\n    mouth = torgoth_map[\"mouth\"][mouth_i]\n\n    ret =  f\"tor #fff {face[0]} {face[1]};tor #fff {eye[0]} {eye[1]};tor #fff {mouth[0]} {mouth[1]};\"\n    if hair_i is not None:\n        hair = torgoth_map[\"hair\"][hair_i]\n        ret += f\"tor #fff {hair[0]} {hair[1]};\"\n    if hat_i  is not None:\n        hat = torgoth_map[\"hat\"][hat_i]\n        ret += f\"tor #fff {hat[0]} {hat[1]};\"\n\n    if extra_i  is not None:\n        extra = torgoth_map[\"extra\"][extra_i]\n        ret += f\"tor #fff {extra[0]} {extra[1]};\"\n    return ret\n</code></pre>"},{"location":"api/utility/faces/#sbs_utils.faces.ximni","title":"<code>ximni(face_i, eye_i, mouth_i, horns_i, mask_i, collar_i)</code>","text":"<p>Create an ximni face</p> <p>:param face_i: The index of the face 0 :type face_i: int :param eye_id: The index of the eyes 0-4 :type eye_i: int :param mouth_id: The index of the mouth 0-4 :type mouth_i: int :param horns_id: The index of the horns 0-4 or None :type horns_i: int or None :param mask_id: The index of the mask 0-4 or None :type mask_i: int or None :param collar_id: The index of the collar 0 or None :type collar_i: int or None</p> <p>:return: A Face string :rtype: string</p> Source code in <code>sbs_utils\\faces.py</code> <pre><code>def ximni(face_i, eye_i, mouth_i, horns_i, mask_i, collar_i):\n    \"\"\" Create an ximni face\n\n    :param face_i: The index of the face 0\n    :type face_i: int\n    :param eye_id: The index of the eyes 0-4\n    :type eye_i: int\n    :param mouth_id: The index of the mouth 0-4\n    :type mouth_i: int\n    :param horns_id: The index of the horns 0-4 or None\n    :type horns_i: int or None\n    :param mask_id: The index of the mask 0-4 or None\n    :type mask_i: int or None\n    :param collar_id: The index of the collar 0 or None\n    :type collar_i: int or None\n\n    :return: A Face string\n    :rtype: string\n    \"\"\"\n    face = ximni_map[\"face\"][face_i]\n    eye = ximni_map[\"eyes\"][eye_i]\n    mouth = ximni_map[\"mouth\"][mouth_i]\n\n    ret =  f\"zim #fff {face[0]} {face[1]};zim #fff {eye[0]} {eye[1]};zim #fff {mouth[0]} {mouth[1]};\"\n    if horns_i is not None:\n        horns = ximni_map[\"horns\"][horns_i]\n        ret += f\"zim #fff {horns[0]} {horns[1]};\"\n    if collar_i  is not None:\n        collar = ximni_map[\"collar\"][collar_i]\n        ret += f\"zim #fff {collar[0]} {collar[1]};\"\n\n    if mask_i  is not None:\n        mask = ximni_map[\"mask\"][mask_i]\n        ret += f\"zim #fff {mask[0]} {mask[1]};\"\n    return ret\n</code></pre>"},{"location":"api/utility/scatter/","title":"The Scatter API","text":""},{"location":"api/utility/scatter/#overview","title":"Overview","text":"<ul> <li>scatter </li> <li>scattervec</li> </ul> <p>They contain the same functionality. The only differ in that scattervec takes a single vec (vector) instead of three floats for x,y,z.</p>"},{"location":"api/utility/scatter/#api-scatter","title":"API: scatter","text":""},{"location":"api/utility/scatter/#sbs_utils.scatter.arc","title":"<code>arc(count, x, y, z, r, start=0.0, end=90.0, random=False)</code>","text":"<p>Calculate the points along an circular arc</p>"},{"location":"api/utility/scatter/#sbs_utils.scatter.arc--parameters","title":"Parameters","text":"<p>count: int     The number of points to generate x,y,z: float,float,float     the center point/origin r:radius start: float=0, optional     the angle to start at in degrees end: float=360, optional     the angle to end at in degrees</p> Source code in <code>sbs_utils\\scatter.py</code> <pre><code>def arc(count, x,y,z, r, start=0.0, end=90.0, random=False):\n    \"\"\"Calculate the points along an circular arc\n\n    Parameters\n    ----------\n    count: int\n        The number of points to generate\n    x,y,z: float,float,float\n        the center point/origin\n    r:radius\n    start: float=0, optional\n        the angle to start at in degrees\n    end: float=360, optional\n        the angle to end at in degrees\"\"\"\n    #Make clockwise by negating\n    a_start = -math.radians(start-90)\n    a_end = -math.radians(end-90)\n    a_diff = (a_end-a_start) / count\n    for i in range(0,count):\n        if random:\n            angle = uniform(a_start, a_end)\n        else:\n            angle=i*a_diff + a_start\n        yield Vec3(x+math.cos(angle)*r, y, z+math.sin(angle)*r)\n</code></pre>"},{"location":"api/utility/scatter/#sbs_utils.scatter.box","title":"<code>box(count, x, y, z, x2, y2, z2, centered=False, ax=0, ay=0, az=0, degrees=True)</code>","text":"<p>Calculate the points within a box</p>"},{"location":"api/utility/scatter/#sbs_utils.scatter.box--parameters","title":"Parameters","text":"<p>count: int     The number of points to generate</p> <p>x,y,z: float,float,float     the start point/origin     if center is true this is the center     if center is False this is the left, bottom, front x2,y2,z2: float,float,float     if center is true this is the width, height, depth     if center is false this is the right, top, back </p> bool <p>when true x,y,z and its the center point when true x2,y2,z2 is the width, height, depth when false x,y,z is left, bottom, front when false x2,y2,z2 is right, top, back</p> Source code in <code>sbs_utils\\scatter.py</code> <pre><code>def box(count, x,y, z, x2, y2, z2, centered=False, ax=0,ay=0,az=0, degrees=True):\n    \"\"\"Calculate the points within a box\n\n    Parameters\n    ----------\n    count: int\n        The number of points to generate\n\n    x,y,z: float,float,float\n        the start point/origin\n        if center is true this is the center\n        if center is False this is the left, bottom, front\n    x2,y2,z2: float,float,float\n        if center is true this is the width, height, depth\n        if center is false this is the right, top, back \n\n    center: bool\n        when true x,y,z and its the center point\n        when true x2,y2,z2 is the width, height, depth\n        when false x,y,z is left, bottom, front\n        when false x2,y2,z2 is right, top, back\n    \"\"\"\n\n    rotate = ax!=0 or ay != 0 or az != 0\n    # for simplicity for rotation convert to centered\n    origin = Vec3(x,y,z)\n    w = x2\n    h = y2\n    d = z2\n    if not centered:\n        w = x2-x\n        h = y2-y\n        d = z2-z\n        origin = Vec3(x+ w/2, y+h/2, z+d/2)\n\n\n    for _ in range(0,count):\n        _x =  uniform(origin.x-w/2,origin.x+w/2)\n        _y =  uniform(origin.y-h/2,y+h/2)\n        _z =  uniform(origin.z-d/2,z+d/2)\n        v = Vec3(_x,_y,_z)\n        if rotate:\n            v = v.rotate_around(origin, ax,ay,az, degrees)\n        yield v\n</code></pre>"},{"location":"api/utility/scatter/#sbs_utils.scatter.box_fill","title":"<code>box_fill(cw, ch, cd, x, y, z, w, h, d, random=False)</code>","text":"<p>Calculate the points within a box     the box is subdivide to ideally avoid overlap</p>"},{"location":"api/utility/scatter/#sbs_utils.scatter.box_fill--parameters","title":"Parameters","text":"<p>cw: int     The number of points to generate for each line width (x) ch: int     The number of points to generate for each line height (y) cd: int     The number of points to generate for each line width (z) x,y,z: float,float,float     the start point/origin w: float     the width h: float     the height d: float     the depth random: bool     when true pointw will be randomly placed     when false points will be evenly placed</p> Source code in <code>sbs_utils\\scatter.py</code> <pre><code>def box_fill(cw, ch, cd, x, y, z, w, h, d, random=False):\n    \"\"\"Calculate the points within a box\n        the box is subdivide to ideally avoid overlap\n\n    Parameters\n    ----------\n    cw: int\n        The number of points to generate for each line width (x)\n    ch: int\n        The number of points to generate for each line height (y)\n    cd: int\n        The number of points to generate for each line width (z)\n    x,y,z: float,float,float\n        the start point/origin\n    w: float\n        the width\n    h: float\n        the height\n    d: float\n        the depth\n    random: bool\n        when true pointw will be randomly placed\n        when false points will be evenly placed\n    \"\"\"\n    front = z-d/2\n    bottom = y-h/2\n    left = x-w/2\n    # right = x+w/2\n    if cw &gt;1:\n        w_diff = w/(cw-1)\n    else: \n        w_diff = 1\n    if ch &gt;1:\n        h_diff = h/(ch-1)\n    else: \n        h_diff = 1\n        bottom = y\n    if cd &gt;1:\n        d_diff = d/(cd-1)\n    else: \n        d_diff = 1\n    for layer in range(0,ch):\n        _y =  bottom + layer * h_diff\n        for row in range(0,cd):\n            _z = front + row * d_diff\n            for col in range(0,cw):\n                if random:\n                    _y =  bottom + uniform(0,ch) * h_diff\n                    _x =  left + uniform(0,cw) * w_diff\n                    _z =  front + uniform(0,cd) * d_diff\n                else:\n                    _x = left + col * w_diff\n                yield Vec3(_x,_y,_z)\n</code></pre>"},{"location":"api/utility/scatter/#sbs_utils.scatter.line","title":"<code>line(count, start_x, start_y, start_z, end_x, end_y, end_z, random=False)</code>","text":"<p>Calculate the points along a line</p>"},{"location":"api/utility/scatter/#sbs_utils.scatter.line--parameters","title":"Parameters","text":"<p>count: int     The number of points to generate start_x,start_y,start_z: float,float,float     the start point/origin end_x,end_y,end_z: float,float,float     the end point</p> Source code in <code>sbs_utils\\scatter.py</code> <pre><code>def line(count, start_x,start_y,start_z, end_x,end_y,end_z, random=False):\n    \"\"\"Calculate the points along a line\n\n    Parameters\n    ----------\n    count: int\n        The number of points to generate\n    start_x,start_y,start_z: float,float,float\n        the start point/origin\n    end_x,end_y,end_z: float,float,float\n        the end point\"\"\"\n\n    v1 =  Vec3(start_x, start_y, start_z)\n    v2 =  Vec3(end_x, end_y, end_z)\n\n    v = v2 - v1\n    d = v.length()\n    u = v.divide(d)\n\n    delta = 0\n    if count &gt;1:\n        delta = u * (d/(count-1))\n\n    for i in range(0,count):\n        if random:\n            yield v1 + (delta * uniform(0,count))\n        else:\n            yield v1 + (delta * i)\n</code></pre>"},{"location":"api/utility/scatter/#sbs_utils.scatter.rect_fill","title":"<code>rect_fill(cw, cd, x, y, z, w, d, random=False)</code>","text":"<p>Calculate the points within a rect</p> <p>This assumes it to be on y</p>"},{"location":"api/utility/scatter/#sbs_utils.scatter.rect_fill--parameters","title":"Parameters","text":"<p>cw: int     The number of points to generate for each line width (x) cd: int     The number of points to generate for each line depth (z) x,y,z: float,float,float     the start point/origin w: float     the width (x) d: float     the depth (z) random: bool     when true pointw will be randomly placed     when false points will be evenly placed</p> Source code in <code>sbs_utils\\scatter.py</code> <pre><code>def rect_fill(cw, cd, x, y, z, w, d, random=False):\n    \"\"\"Calculate the points within a rect\n\n    This assumes it to be on y\n\n    Parameters\n    ----------\n    cw: int\n        The number of points to generate for each line width (x)\n    cd: int\n        The number of points to generate for each line depth (z)\n    x,y,z: float,float,float\n        the start point/origin\n    w: float\n        the width (x)\n    d: float\n        the depth (z)\n    random: bool\n        when true pointw will be randomly placed\n        when false points will be evenly placed\n    \"\"\"\n    return box_fill(cw, 1, cd, x, y, z, w, 1, d, random)\n</code></pre>"},{"location":"api/utility/scatter/#sbs_utils.scatter.ring","title":"<code>ring(ca, cr, x, y, z, outer_r, inner_r=0, start=0.0, end=90.0, random=False)</code>","text":"<p>Calculate the points on rings with each ring has same count Parameters</p> <p>ca: int     The number of points to generate on each ring cr: int     The number of rings x,y,z: float,float,float     the start point/origin outer_r: float     the radius inner_r: float  = 0 optional     the radius inner start: float (degrees)     start angle end: float (degrees)     start angle random: bool     when true pointw will be randomly placed     when false points will be evenly placed</p> Source code in <code>sbs_utils\\scatter.py</code> <pre><code>def ring(ca, cr, x,y,z, outer_r, inner_r=0, start=0.0, end=90.0, random=False):\n    \"\"\"Calculate the points on rings with each ring has same count\n    Parameters\n    ----------\n    ca: int\n        The number of points to generate on each ring\n    cr: int\n        The number of rings\n    x,y,z: float,float,float\n        the start point/origin\n    outer_r: float\n        the radius\n    inner_r: float  = 0 optional\n        the radius inner\n    start: float (degrees)\n        start angle\n    end: float (degrees)\n        start angle\n    random: bool\n        when true pointw will be randomly placed\n        when false points will be evenly placed\n    \"\"\"\n    #Make clockwise by negating\n    a_start = -math.radians(start)\n    a_end = -math.radians(end)\n    a_diff = (a_end-a_start)\n    r_diff = 0\n    if cr&gt;1:\n        r_diff  = (outer_r - inner_r) / (cr-1)\n    for r in range(0, cr):\n        dist = inner_r + (r* r_diff)\n        for i in range(0,ca):\n            if random:\n                angle = uniform(a_start, a_end)\n            else:\n                angle=(i/ca)*a_diff + a_start\n            yield Vec3(x+math.cos(angle)*dist, y, z+math.sin(angle)*dist)\n</code></pre>"},{"location":"api/utility/scatter/#sbs_utils.scatter.ring_density","title":"<code>ring_density(counts, x, y, z, outer_r, inner_r=0, start=0.0, end=90.0, random=False)</code>","text":"<p>Calculate the points on rings with each ring specifying count in array</p>"},{"location":"api/utility/scatter/#sbs_utils.scatter.ring_density--parameters","title":"Parameters","text":"<p>count: int     The number of points to generate x,y,z: float,float,float     the start point/origin outer_r: float     the radius inner_r: float  = 0 optional     the radius inner start: float (degrees)     start angle end: float (degrees)     start angle random: bool     when true pointw will be randomly placed     when false points will be evenly placed</p> Source code in <code>sbs_utils\\scatter.py</code> <pre><code>def ring_density(counts, x,y,z,  outer_r, inner_r=0, start=0.0, end=90.0, random=False):\n    \"\"\"Calculate the points on rings with each ring specifying count in array\n\n    Parameters\n    ----------\n    count: int\n        The number of points to generate\n    x,y,z: float,float,float\n        the start point/origin\n    outer_r: float\n        the radius\n    inner_r: float  = 0 optional\n        the radius inner\n    start: float (degrees)\n        start angle\n    end: float (degrees)\n        start angle\n    random: bool\n        when true pointw will be randomly placed\n        when false points will be evenly placed\n\n    \"\"\"\n    #Make clockwise by negating\n    a_start = -math.radians(start)\n    a_end = -math.radians(end)\n    a_diff = (a_end-a_start)\n    r_diff = 0\n    if len(counts)&gt;1:\n        r_diff = (outer_r - inner_r) / (len(counts)-1)\n    for r in range(0, len(counts)):\n        dist = inner_r + (r* r_diff)\n        ca = counts[r]\n        #print(f'count {ca}')\n        for i in range(0,ca):\n            if random:\n                angle = uniform(a_start, a_end)\n            else:\n                angle=i*(a_diff/ca) + a_start\n            yield Vec3(x+math.cos(angle)*dist, y, z+math.sin(angle)*dist)\n</code></pre>"},{"location":"api/utility/scatter/#sbs_utils.scatter.sphere","title":"<code>sphere(count, x, y, z, r, outer=0, top_only=False, ring=False)</code>","text":"<p>Calculate the points within a sphere or ring</p>"},{"location":"api/utility/scatter/#sbs_utils.scatter.sphere--parameters","title":"Parameters","text":"<p>count: int     The number of points to generate x,y,z: float,float,float     the start point/origin r: float     the radius if outer is spedified this is the inner outer: float = 0 optional     the height top_only: bool     generate only top hemispher  ring: bool     generate a flat ring</p> Source code in <code>sbs_utils\\scatter.py</code> <pre><code>def sphere(count, x,y,z, r, outer=0, top_only=False, ring=False):\n    r\"\"\"Calculate the points within a sphere or ring\n\n    Parameters\n    ----------\n    count: int\n        The number of points to generate\n    x,y,z: float,float,float\n        the start point/origin\n    r: float\n        the radius if outer is spedified this is the inner\n    outer: float = 0 optional\n        the height\n    top_only: bool\n        generate only top hemispher \n    ring: bool\n        generate a flat ring\n    \"\"\"\n    # y should be odd\n    origin = Vec3(x,y,z)\n    for _ in range(0,count):\n        yield origin.rand_offset(r, outer, top_only, ring)\n</code></pre>"},{"location":"api/utility/scatter/#api-scattervec","title":"API: scattervec","text":""},{"location":"api/utility/scatter/#sbs_utils.scattervec.arc","title":"<code>arc(count, v, r, start=0.0, end=90.0, random=False)</code>","text":"<p>Calculate the points along an circular arc</p>"},{"location":"api/utility/scatter/#sbs_utils.scattervec.arc--parameters","title":"Parameters","text":"<p>count: int     The number of points to generate v: Vec3     the center point/origin r:radius start: float=0, optional     the angle to start at in degrees end: float=360, optional     the angle to end at in degrees</p> Source code in <code>sbs_utils\\scattervec.py</code> <pre><code>def arc(count, v, r, start=0.0, end=90.0, random=False):\n    \"\"\"Calculate the points along an circular arc\n\n    Parameters\n    ----------\n    count: int\n        The number of points to generate\n    v: Vec3\n        the center point/origin\n    r:radius\n    start: float=0, optional\n        the angle to start at in degrees\n    end: float=360, optional\n        the angle to end at in degrees\n    \"\"\"\n    return scatter.arc(count, v.x,v.y,v.z, r, start, end, random)\n</code></pre>"},{"location":"api/utility/scatter/#sbs_utils.scattervec.box","title":"<code>box(count, v1, v2, centered=False, a=None, degrees=True)</code>","text":"<p>Calculate the points within a box</p>"},{"location":"api/utility/scatter/#sbs_utils.scattervec.box--parameters","title":"Parameters","text":"<p>count: int     The number of points to generate</p> Vec3 <p>the start point/origin if center is true this is the center if center is False this is the left, bottom, front</p> <p>v2: Vec3     if center is true this is the width, height, depth     if center is false this is the right, top, back </p> bool <p>when true v1 and its the center point when true v2 is the width, height, depth when false v1 is left, bottom, front when false v2 is right, top, back</p> Source code in <code>sbs_utils\\scattervec.py</code> <pre><code>def box(count, v1, v2, centered=False, a=None, degrees=True):\n    \"\"\"Calculate the points within a box\n\n    Parameters\n    ----------\n    count: int\n        The number of points to generate\n\n    v1: Vec3\n        the start point/origin\n        if center is true this is the center\n        if center is False this is the left, bottom, front\n    v2: Vec3\n        if center is true this is the width, height, depth\n        if center is false this is the right, top, back \n\n    center: bool\n        when true v1 and its the center point\n        when true v2 is the width, height, depth\n        when false v1 is left, bottom, front\n        when false v2 is right, top, back\n    \"\"\"\n    if a is not None:\n        return scatter.box(count, v1.x,v1.y, v1.z, v2.x, v2.y, v2.z, centered, a.x, a.y,a.z, degrees)\n    else:\n        return scatter.box(count, v1.x,v1.y, v1.z, v2.x, v2.y, v2.z, centered)\n</code></pre>"},{"location":"api/utility/scatter/#sbs_utils.scattervec.box_fill","title":"<code>box_fill(cw, ch, cd, v, w, h, d, random=False)</code>","text":"<p>Calculate the points within a box</p>"},{"location":"api/utility/scatter/#sbs_utils.scattervec.box_fill--parameters","title":"Parameters","text":"<p>cw: int     The number of points to generate for each line width (x) ch: int     The number of points to generate for each line height (y) cd: int     The number of points to generate for each line width (z) v: Vec3     the start point/origin w: float     the width h: float     the height d: float     the depth random: bool     when true pointw will be randomly placed     when false points will be evenly placed</p> Source code in <code>sbs_utils\\scattervec.py</code> <pre><code>def box_fill(cw, ch, cd, v, w, h, d, random=False):\n    \"\"\"Calculate the points within a box\n\n    Parameters\n    ----------\n    cw: int\n        The number of points to generate for each line width (x)\n    ch: int\n        The number of points to generate for each line height (y)\n    cd: int\n        The number of points to generate for each line width (z)\n    v: Vec3\n        the start point/origin\n    w: float\n        the width\n    h: float\n        the height\n    d: float\n        the depth\n    random: bool\n        when true pointw will be randomly placed\n        when false points will be evenly placed\n    \"\"\"\n    return scatter.box_fill(cw, ch, cd, v.x, v.y, v.z, w, h, d, random)\n</code></pre>"},{"location":"api/utility/scatter/#sbs_utils.scattervec.line","title":"<code>line(count, start, end, random=False)</code>","text":"<p>Calculate the points along a line</p>"},{"location":"api/utility/scatter/#sbs_utils.scattervec.line--parameters","title":"Parameters","text":"<p>count: int     The number of points to generate start:Vec3     the start point/origin end: Vec3     the end point</p> Source code in <code>sbs_utils\\scattervec.py</code> <pre><code>def line(count, start, end, random=False):\n    \"\"\"Calculate the points along a line\n\n    Parameters\n    ----------\n    count: int\n        The number of points to generate\n    start:Vec3\n        the start point/origin\n    end: Vec3\n        the end point\n    \"\"\"\n    return scatter.line(count, start.x,start.y,start.z, end.x,end.y,end.z, random)\n</code></pre>"},{"location":"api/utility/scatter/#sbs_utils.scattervec.rect_fill","title":"<code>rect_fill(cw, cd, v, w, d, random=False)</code>","text":"<p>Calculate the points within a rect</p> <p>This assumes it to be on y</p>"},{"location":"api/utility/scatter/#sbs_utils.scattervec.rect_fill--parameters","title":"Parameters","text":"<p>cw: int     The number of points to generate for each line width (x) cd: int     The number of points to generate for each line depth (z) v: Vec3     the start point/origin w: float     the width (x) d: float     the depth (z) random: bool     when true pointw will be randomly placed     when false points will be evenly placed</p> Source code in <code>sbs_utils\\scattervec.py</code> <pre><code>def rect_fill(cw, cd, v, w, d, random=False):\n    \"\"\"Calculate the points within a rect\n\n    This assumes it to be on y\n\n    Parameters\n    ----------\n    cw: int\n        The number of points to generate for each line width (x)\n    cd: int\n        The number of points to generate for each line depth (z)\n    v: Vec3\n        the start point/origin\n    w: float\n        the width (x)\n    d: float\n        the depth (z)\n    random: bool\n        when true pointw will be randomly placed\n        when false points will be evenly placed\n    \"\"\"\n    return scatter.rect_fill(cw, cd, v.x, v.y, v.z, w, d, random)\n</code></pre>"},{"location":"api/utility/scatter/#sbs_utils.scattervec.ring","title":"<code>ring(ca, cr, v, outer_r, inner_r=0, start=0.0, end=90.0, random=False)</code>","text":"<p>Calculate the points on rings with each ring has same count Parameters</p> <p>ca: int     The number of points to generate on each ring cr: int     The number of rings v: Vec3     the start point/origin outer_r: float     the radius inner_r: float  = 0 optional     the radius inner start: float (degrees)     start angle end: float (degrees)     start angle random: bool     when true pointw will be randomly placed     when false points will be evenly placed</p> Source code in <code>sbs_utils\\scattervec.py</code> <pre><code>def ring(ca, cr, v, outer_r, inner_r=0, start=0.0, end=90.0, random=False):\n    \"\"\"Calculate the points on rings with each ring has same count\n    Parameters\n    ----------\n    ca: int\n        The number of points to generate on each ring\n    cr: int\n        The number of rings\n    v: Vec3\n        the start point/origin\n    outer_r: float\n        the radius\n    inner_r: float  = 0 optional\n        the radius inner\n    start: float (degrees)\n        start angle\n    end: float (degrees)\n        start angle\n    random: bool\n        when true pointw will be randomly placed\n        when false points will be evenly placed\n    \"\"\"\n    return scatter.ring(ca, cr, v.x,v.y,v.z, outer_r, inner_r, start, end, random)\n</code></pre>"},{"location":"api/utility/scatter/#sbs_utils.scattervec.ring_density","title":"<code>ring_density(counts, v, outer_r, inner_r=0, start=0.0, end=90.0, random=False)</code>","text":"<p>Calculate the points on rings with each ring specifying count in array</p>"},{"location":"api/utility/scatter/#sbs_utils.scattervec.ring_density--parameters","title":"Parameters","text":"<p>count: int     The number of points to generate v: Vec3     the start point/origin outer_r: float     the radius inner_r: float  = 0 optional     the radius inner start: float (degrees)     start angle end: float (degrees)     start angle random: bool     when true pointw will be randomly placed     when false points will be evenly placed</p> Source code in <code>sbs_utils\\scattervec.py</code> <pre><code>def ring_density(counts, v,  outer_r, inner_r=0, start=0.0, end=90.0, random=False):\n    \"\"\"Calculate the points on rings with each ring specifying count in array\n\n    Parameters\n    ----------\n    count: int\n        The number of points to generate\n    v: Vec3\n        the start point/origin\n    outer_r: float\n        the radius\n    inner_r: float  = 0 optional\n        the radius inner\n    start: float (degrees)\n        start angle\n    end: float (degrees)\n        start angle\n    random: bool\n        when true pointw will be randomly placed\n        when false points will be evenly placed\n\n    \"\"\"\n    return scatter.ring_density(counts, v.x,v.y,v.z,  outer_r, inner_r, start, end, random)\n</code></pre>"},{"location":"api/utility/scatter/#sbs_utils.scattervec.sphere","title":"<code>sphere(count, v, r, outer=0, top_only=False, ring=False)</code>","text":"<p>Calculate the points within a sphere or ring</p> <p>Parameters count: int     The number of points to generate v: Vec3     the start point/origin r: float     the radius if outer is specified this is the inner outer: float = 0 optional     the height top_only: bool     generate only top hemisphere  ring: bool     generate a flat ring</p> Source code in <code>sbs_utils\\scattervec.py</code> <pre><code>def sphere(count, v, r, outer=0, top_only=False, ring=False):\n    \"\"\"Calculate the points within a sphere or ring\n\n    Parameters\n    count: int\n        The number of points to generate\n    v: Vec3\n        the start point/origin\n    r: float\n        the radius if outer is specified this is the inner\n    outer: float = 0 optional\n        the height\n    top_only: bool\n        generate only top hemisphere \n    ring: bool\n        generate a flat ring\n    \"\"\"\n    return scatter.sphere(count, v.x,v.y,v.z, r, outer, top_only, ring)\n</code></pre>"},{"location":"api/utility/vec/","title":"The vector class","text":""},{"location":"api/utility/vec/#api-vec3-class","title":"API: Vec3 class","text":"Source code in <code>sbs_utils\\vec.py</code> <pre><code>@dataclass\nclass Vec3:\n    x: float = 0\n    y: float = 0\n    z: float = 0\n\n    @property\n    def xyz(self):\n        \"\"\"Get the vector as a tuple\n        Useful for passing to arguments e.g. player.spawn(sim, *v.xyz())\n\n        :return: a tuple with x,y,z\n        :rtype: (float,float,float)\n        \"\"\"\n        return (self.x,self.y,self.z)\n\n    def __iter__(self):\n        return iter((self.x,self.y,self.z))\n\n    def neg(self):\n        \"\"\"Negate a vector immutable\n\n        :return: new vector negated version of this one\n        :rtype: Vec3\n        \"\"\"\n        return self.__neg__()\n\n    def __neg__(self):\n        \"\"\"operator Negate a vector immutable\n\n        :return: new vector negated version of this one\n        :rtype: Vec3\n        \"\"\"\n        return Vec3(-self.x, -self.y, -self.z)\n\n    def __add__(self, v):\n        \"\"\" operator add immutable\n\n        :param v: the other vector\n        :type v: Vec3 or number\n        :return: new vector \n        :rtype: Vec3\n        \"\"\"\n        return self.add(v)\n\n    def __iadd__(self, v):\n        \"\"\"operator inline add (+=) mutable\n\n        :param v: the other vector\n        :type v: Vec3 or number\n        :return: new vector \n        :rtype: Vec3\n        \"\"\"\n        r = self.add(v)\n        return self._set(r)\n\n    def _set(self, v):\n        self.x = v.x\n        self.y = v.y\n        self.z = v.z\n        return self\n\n    def add(self, v):\n        \"\"\"add immutable\n\n        :param v: the other vector\n        :type v: Vec3 or number\n        :return: new vector \n        :rtype: Vec3\n        \"\"\"\n        if isinstance(v, Vec3):\n            return Vec3(self.x + v.x, self.y + v.y, self.z + v.z)\n        else:\n            return Vec3(self.x + v, self.y + v, self.z + v)\n\n    def subtract(self, v):\n        \"\"\"subtract immutable\n\n        :param v: the other vector\n        :type v: Vec3 or number\n        :return: new vector \n        :rtype: Vec3\n        \"\"\"\n        return self.__sub__(v)\n\n    def __sub__(self, v):\n        \"\"\"operator sub immutable\n\n        :param v: the other vector\n        :type v: Vec3 or number\n        :return: new vector \n        :rtype: Vec3\n        \"\"\"\n        if isinstance(v, Vec3):\n            return Vec3(self.x - v.x, self.y - v.y, self.z - v.z)\n        else:\n            return Vec3(self.x - v, self.y - v, self.z - v)\n\n    def __isub__(self, v):\n        \"\"\"operator inline subtract mutable\n\n        :param v: the other vector\n        :type v: Vec3 or number\n        :return: new vector \n        :rtype: Vec3\n        \"\"\"\n        r = self.__sub__(v)\n        return self._set(r)\n\n    def multiply(self, v):\n        \"\"\"multiply immutable\n\n        :param v: the other vector\n        :type v: Vec3 or number\n        :return: new vector \n        :rtype: Vec3\n        \"\"\"\n        return self.__mul__(v)\n\n    def __mul__(self, v):\n        \"\"\"operator multiply immutable\n\n        :param v: the other vector\n        :type v: Vec3 or number\n        :return: new vector \n        :rtype: Vec3\n        \"\"\"\n        if isinstance(v, Vec3):\n            return Vec3(self.x * v.x, self.y * v.y, self.z * v.z)\n        else:\n            return Vec3(self.x * v, self.y * v, self.z * v)\n\n    def __imul__(self, v):\n        \"\"\"operator inline multiply mutable\n\n        :param v: the other vector\n        :type v: Vec3 or number\n        :return: new vector \n        :rtype: Vec3\n        \"\"\"\n        r = self.__mul__(v)\n        return self._set(r)\n\n    def divide(self, v):\n        \"\"\"divide immutable\n\n        :param v: the other vector\n        :type v: Vec3 or number\n        :return: new vector \n        :rtype: Vec3\n        \"\"\"\n        return self.__truediv__(v)\n\n    def __truediv__(self, v):\n        \"\"\"operator divide immutable\n\n        :param v: the other vector\n        :type v: Vec3 or number\n        :return: new vector \n        :rtype: Vec3\n        \"\"\"\n        if isinstance(v, Vec3):\n            return Vec3(self.x / v.x, self.y / v.y, self.z / v.z)\n        else:\n            return Vec3(self.x / v, self.y / v, self.z / v)\n\n    def __itruediv__(self, v):\n        \"\"\"operator inline divide mutable\n\n        :param v: the other vector\n        :type v: Vec3 or number\n        :return: new vector \n        :rtype: Vec3\n        \"\"\"\n        r = self.__truediv__(v)\n        return self._set(r)\n\n    def equals(self, v):\n        \"\"\"equals immutable\n\n        :param v: the other vector\n        :type v: Vec3\n        :return: if they are equal\n        :rtype: bool\n        \"\"\"\n        return self.__eq__(v)\n\n    def __eq__(self, v) -&gt; bool:\n        \"\"\"operator equals immutable\n\n        :param v: the other vector\n        :type v: Vec3\n        :return: new vector \n        :rtype: bool\n        \"\"\"\n        return self.x == v.x and self.y == v.y and self.z == v.z\n\n    def dot(self, v):\n        \"\"\"dot product immutable\n\n        :param v: the other vector\n        :type v: Vec3\n        :return: new vector \n        :rtype: Vec3\n        \"\"\"\n        return self.x * v.x + self.y * v.y + self.z * v.z\n\n    def __matmul__(self, v):\n        \"\"\"operator matrix multiply (@) dot product immutable\n\n        :param v: the other vector\n        :type v: Vec3 or number\n        :return: new vector \n        :rtype: Vec3\n        \"\"\"\n        return self.dot(v)\n\n    # def __imatmul__(self, v):\n    #     r = self.dot(v)\n    #     return self._set(r)\n\n    def cross(self, v):\n        \"\"\"cross product immutable\n\n        :param v: the other vector\n        :type v: Vec3 or number\n        :return: new vector \n        :rtype: Vec3\n        \"\"\"\n        return Vec3(\n            self.y * v.z - self.z * v.y,\n            self.z * v.x - self.x * v.z,\n            self.x * v.y - self.y * v.x\n        )\n\n    def length(self):\n        \"\"\"length immutable\n\n        :return: The length of the vector\n        :rtype: float\n        \"\"\"\n        return math.sqrt(self.dot(self))\n\n    def unit(self):\n        \"\"\"unit vector immutable\n\n        :return: new vector \n        :rtype: Vec3\n        \"\"\"\n        return self.divide(self.length())\n\n    def min(self):\n        \"\"\"min of x,y,z\n\n        :return: min of x,y,z\n        :rtype: float\n        \"\"\"\n        return math.min(math.min(self.x, self.y), self.z)\n\n    def max(self):\n        \"\"\"max of x,y,z\n\n        :return: max of x,y,z\n        :rtype: float\n        \"\"\"\n        return math.max(math.max(self.x, self.y), self.z)\n\n    def toAngles(self, v):\n        \"\"\"polar angles\n\n        :return: theta and phi\n        :rtype: theta: float, phi: float\n        \"\"\"\n        return {\n            'theta': math.atan2(self.z, self.x),\n            'phi': math.asin(self.y / self.length())\n        }\n\n    def angleTo(self, a):\n        return math.acos(self.dot(a) / (self.length() * a.length()))\n\n    def rand_offset(self, r, outer=0, top_only=False, ring=False):\n        \"\"\" random spherical offset\n\n        :param r: radius\n        :type r: float\n        :param outer: outer radius if 0 r is outer, if non-zero r is inner radius. default=0\n        :type outer: float\n        :param top_only: limit to top half\n        :type top_only: bool\n        :param ring: limit to 2d ring\n        :type ring: bool\n        :return: A randomly offset vector within the sphere/ring\n        :rtype: Vec3\n        \"\"\"\n        v = Vec3.rand_in_sphere(r, outer, top_only, ring)\n        return self + v\n\n    def rand_in_sphere(radius, outer=0, only_top_half=False, ring=False):\n        \"\"\" random within a sphere\n\n        :param radius: radius\n        :type radius: float\n        :param outer: outer radius if 0 r is outer, if non-zero r is inner radius. default=0\n        :type outer: float\n        :param only_top_half: limit to top half\n        :type only_top_half: bool\n        :param ring: limit to 2d ring\n        :type ring: bool\n        :return: A randomly offset vector within the sphere/ring\n        :rtype: Vec3\n        \"\"\"\n\n        PI = math.pi\n        yaw = uniform(-PI, PI)\n        pitch = uniform(0, PI)\n        if not only_top_half:\n            pitch = uniform(-PI, PI)\n\n        ret = Vec3(0, 0, 0)\n        ret.y = math.sin(pitch) * radius\n\n        outRad = math.cos(pitch) * radius\n        ret.x = math.sin(yaw) * outRad\n        ret.z = math.cos(yaw) * outRad\n\n        # if there is an outer, r is an inner\n        if outer &gt; 0:\n            r = uniform(radius, outer)\n            if ring:\n                ret.y = 0\n            ret = ret.unit()\n\n            ret = ret.multiply(r)\n\n        return ret\n\n    def rotate_around(self, o, ax, ay, az, degrees=True):\n        px = self.x - o.x\n        py = self.y - o.y\n        pz = self.z - o.z\n        # rotation on x, y, z\n        tx = ax if not degrees else math.radians(ax)\n        ty = ay if not degrees else math.radians(ay)\n        tz = az if not degrees else math.radians(az)\n        # The transformation matrices.\n        rx = [1, 0, 0, 0, math.cos(tx), -math.sin(tx), 0, math.sin(tx), math.cos(tx)]\n        ry = [math.cos(ty), 0, math.sin(ty), 0, 1, 0, -math.sin(ty), 0, math.cos(ty)]\n        rz = [math.cos(tz), -math.sin(tz), 0, math.sin(tz), math.cos(tz), 0, 0, 0, 1]\n        # Matrix multiplication\n        rotatedX = [(rx[0] * px + rx[1] * py + rx[2] * pz), (rx[3] * px + rx[4] * py + rx[5] * pz), (rx[6] * px + rx[7] * py + rx[8] * pz)]\n        px = rotatedX[0]\n        py = rotatedX[1]\n        pz = rotatedX[2]\n        rotatedY = [(ry[0] * px + ry[1] * py + ry[2] * pz), (ry[3] * px + ry[4] * py + ry[5] * pz), (ry[6] * px + ry[7] * py + ry[8] * pz)]\n        px = rotatedY[0]\n        py = rotatedY[1]\n        pz = rotatedY[2]\n        rotatedZ = [(rz[0] * px + rz[1] * py + rz[2] * pz), (rz[3] * px + rz[4] * py + rz[5] * pz), (rz[6] * px + rz[7] * py + rz[8] * pz)]\n        px = rotatedZ[0]\n        py = rotatedZ[1]\n        pz = rotatedZ[2]\n        return Vec3(px + o.x, py + o.y, pz + o.z)\n</code></pre>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.xyz","title":"<code>xyz</code>  <code>property</code>","text":"<p>Get the vector as a tuple Useful for passing to arguments e.g. player.spawn(sim, *v.xyz())</p> <p>:return: a tuple with x,y,z :rtype: (float,float,float)</p>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.__add__","title":"<code>__add__(v)</code>","text":"<p>operator add immutable</p> <p>:param v: the other vector :type v: Vec3 or number :return: new vector  :rtype: Vec3</p> Source code in <code>sbs_utils\\vec.py</code> <pre><code>def __add__(self, v):\n    \"\"\" operator add immutable\n\n    :param v: the other vector\n    :type v: Vec3 or number\n    :return: new vector \n    :rtype: Vec3\n    \"\"\"\n    return self.add(v)\n</code></pre>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.__eq__","title":"<code>__eq__(v)</code>","text":"<p>operator equals immutable</p> <p>:param v: the other vector :type v: Vec3 :return: new vector  :rtype: bool</p> Source code in <code>sbs_utils\\vec.py</code> <pre><code>def __eq__(self, v) -&gt; bool:\n    \"\"\"operator equals immutable\n\n    :param v: the other vector\n    :type v: Vec3\n    :return: new vector \n    :rtype: bool\n    \"\"\"\n    return self.x == v.x and self.y == v.y and self.z == v.z\n</code></pre>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.__iadd__","title":"<code>__iadd__(v)</code>","text":"<p>operator inline add (+=) mutable</p> <p>:param v: the other vector :type v: Vec3 or number :return: new vector  :rtype: Vec3</p> Source code in <code>sbs_utils\\vec.py</code> <pre><code>def __iadd__(self, v):\n    \"\"\"operator inline add (+=) mutable\n\n    :param v: the other vector\n    :type v: Vec3 or number\n    :return: new vector \n    :rtype: Vec3\n    \"\"\"\n    r = self.add(v)\n    return self._set(r)\n</code></pre>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.__imul__","title":"<code>__imul__(v)</code>","text":"<p>operator inline multiply mutable</p> <p>:param v: the other vector :type v: Vec3 or number :return: new vector  :rtype: Vec3</p> Source code in <code>sbs_utils\\vec.py</code> <pre><code>def __imul__(self, v):\n    \"\"\"operator inline multiply mutable\n\n    :param v: the other vector\n    :type v: Vec3 or number\n    :return: new vector \n    :rtype: Vec3\n    \"\"\"\n    r = self.__mul__(v)\n    return self._set(r)\n</code></pre>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.__isub__","title":"<code>__isub__(v)</code>","text":"<p>operator inline subtract mutable</p> <p>:param v: the other vector :type v: Vec3 or number :return: new vector  :rtype: Vec3</p> Source code in <code>sbs_utils\\vec.py</code> <pre><code>def __isub__(self, v):\n    \"\"\"operator inline subtract mutable\n\n    :param v: the other vector\n    :type v: Vec3 or number\n    :return: new vector \n    :rtype: Vec3\n    \"\"\"\n    r = self.__sub__(v)\n    return self._set(r)\n</code></pre>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.__itruediv__","title":"<code>__itruediv__(v)</code>","text":"<p>operator inline divide mutable</p> <p>:param v: the other vector :type v: Vec3 or number :return: new vector  :rtype: Vec3</p> Source code in <code>sbs_utils\\vec.py</code> <pre><code>def __itruediv__(self, v):\n    \"\"\"operator inline divide mutable\n\n    :param v: the other vector\n    :type v: Vec3 or number\n    :return: new vector \n    :rtype: Vec3\n    \"\"\"\n    r = self.__truediv__(v)\n    return self._set(r)\n</code></pre>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.__matmul__","title":"<code>__matmul__(v)</code>","text":"<p>operator matrix multiply (@) dot product immutable</p> <p>:param v: the other vector :type v: Vec3 or number :return: new vector  :rtype: Vec3</p> Source code in <code>sbs_utils\\vec.py</code> <pre><code>def __matmul__(self, v):\n    \"\"\"operator matrix multiply (@) dot product immutable\n\n    :param v: the other vector\n    :type v: Vec3 or number\n    :return: new vector \n    :rtype: Vec3\n    \"\"\"\n    return self.dot(v)\n</code></pre>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.__mul__","title":"<code>__mul__(v)</code>","text":"<p>operator multiply immutable</p> <p>:param v: the other vector :type v: Vec3 or number :return: new vector  :rtype: Vec3</p> Source code in <code>sbs_utils\\vec.py</code> <pre><code>def __mul__(self, v):\n    \"\"\"operator multiply immutable\n\n    :param v: the other vector\n    :type v: Vec3 or number\n    :return: new vector \n    :rtype: Vec3\n    \"\"\"\n    if isinstance(v, Vec3):\n        return Vec3(self.x * v.x, self.y * v.y, self.z * v.z)\n    else:\n        return Vec3(self.x * v, self.y * v, self.z * v)\n</code></pre>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.__neg__","title":"<code>__neg__()</code>","text":"<p>operator Negate a vector immutable</p> <p>:return: new vector negated version of this one :rtype: Vec3</p> Source code in <code>sbs_utils\\vec.py</code> <pre><code>def __neg__(self):\n    \"\"\"operator Negate a vector immutable\n\n    :return: new vector negated version of this one\n    :rtype: Vec3\n    \"\"\"\n    return Vec3(-self.x, -self.y, -self.z)\n</code></pre>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.__sub__","title":"<code>__sub__(v)</code>","text":"<p>operator sub immutable</p> <p>:param v: the other vector :type v: Vec3 or number :return: new vector  :rtype: Vec3</p> Source code in <code>sbs_utils\\vec.py</code> <pre><code>def __sub__(self, v):\n    \"\"\"operator sub immutable\n\n    :param v: the other vector\n    :type v: Vec3 or number\n    :return: new vector \n    :rtype: Vec3\n    \"\"\"\n    if isinstance(v, Vec3):\n        return Vec3(self.x - v.x, self.y - v.y, self.z - v.z)\n    else:\n        return Vec3(self.x - v, self.y - v, self.z - v)\n</code></pre>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.__truediv__","title":"<code>__truediv__(v)</code>","text":"<p>operator divide immutable</p> <p>:param v: the other vector :type v: Vec3 or number :return: new vector  :rtype: Vec3</p> Source code in <code>sbs_utils\\vec.py</code> <pre><code>def __truediv__(self, v):\n    \"\"\"operator divide immutable\n\n    :param v: the other vector\n    :type v: Vec3 or number\n    :return: new vector \n    :rtype: Vec3\n    \"\"\"\n    if isinstance(v, Vec3):\n        return Vec3(self.x / v.x, self.y / v.y, self.z / v.z)\n    else:\n        return Vec3(self.x / v, self.y / v, self.z / v)\n</code></pre>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.add","title":"<code>add(v)</code>","text":"<p>add immutable</p> <p>:param v: the other vector :type v: Vec3 or number :return: new vector  :rtype: Vec3</p> Source code in <code>sbs_utils\\vec.py</code> <pre><code>def add(self, v):\n    \"\"\"add immutable\n\n    :param v: the other vector\n    :type v: Vec3 or number\n    :return: new vector \n    :rtype: Vec3\n    \"\"\"\n    if isinstance(v, Vec3):\n        return Vec3(self.x + v.x, self.y + v.y, self.z + v.z)\n    else:\n        return Vec3(self.x + v, self.y + v, self.z + v)\n</code></pre>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.cross","title":"<code>cross(v)</code>","text":"<p>cross product immutable</p> <p>:param v: the other vector :type v: Vec3 or number :return: new vector  :rtype: Vec3</p> Source code in <code>sbs_utils\\vec.py</code> <pre><code>def cross(self, v):\n    \"\"\"cross product immutable\n\n    :param v: the other vector\n    :type v: Vec3 or number\n    :return: new vector \n    :rtype: Vec3\n    \"\"\"\n    return Vec3(\n        self.y * v.z - self.z * v.y,\n        self.z * v.x - self.x * v.z,\n        self.x * v.y - self.y * v.x\n    )\n</code></pre>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.divide","title":"<code>divide(v)</code>","text":"<p>divide immutable</p> <p>:param v: the other vector :type v: Vec3 or number :return: new vector  :rtype: Vec3</p> Source code in <code>sbs_utils\\vec.py</code> <pre><code>def divide(self, v):\n    \"\"\"divide immutable\n\n    :param v: the other vector\n    :type v: Vec3 or number\n    :return: new vector \n    :rtype: Vec3\n    \"\"\"\n    return self.__truediv__(v)\n</code></pre>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.dot","title":"<code>dot(v)</code>","text":"<p>dot product immutable</p> <p>:param v: the other vector :type v: Vec3 :return: new vector  :rtype: Vec3</p> Source code in <code>sbs_utils\\vec.py</code> <pre><code>def dot(self, v):\n    \"\"\"dot product immutable\n\n    :param v: the other vector\n    :type v: Vec3\n    :return: new vector \n    :rtype: Vec3\n    \"\"\"\n    return self.x * v.x + self.y * v.y + self.z * v.z\n</code></pre>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.equals","title":"<code>equals(v)</code>","text":"<p>equals immutable</p> <p>:param v: the other vector :type v: Vec3 :return: if they are equal :rtype: bool</p> Source code in <code>sbs_utils\\vec.py</code> <pre><code>def equals(self, v):\n    \"\"\"equals immutable\n\n    :param v: the other vector\n    :type v: Vec3\n    :return: if they are equal\n    :rtype: bool\n    \"\"\"\n    return self.__eq__(v)\n</code></pre>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.length","title":"<code>length()</code>","text":"<p>length immutable</p> <p>:return: The length of the vector :rtype: float</p> Source code in <code>sbs_utils\\vec.py</code> <pre><code>def length(self):\n    \"\"\"length immutable\n\n    :return: The length of the vector\n    :rtype: float\n    \"\"\"\n    return math.sqrt(self.dot(self))\n</code></pre>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.max","title":"<code>max()</code>","text":"<p>max of x,y,z</p> <p>:return: max of x,y,z :rtype: float</p> Source code in <code>sbs_utils\\vec.py</code> <pre><code>def max(self):\n    \"\"\"max of x,y,z\n\n    :return: max of x,y,z\n    :rtype: float\n    \"\"\"\n    return math.max(math.max(self.x, self.y), self.z)\n</code></pre>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.min","title":"<code>min()</code>","text":"<p>min of x,y,z</p> <p>:return: min of x,y,z :rtype: float</p> Source code in <code>sbs_utils\\vec.py</code> <pre><code>def min(self):\n    \"\"\"min of x,y,z\n\n    :return: min of x,y,z\n    :rtype: float\n    \"\"\"\n    return math.min(math.min(self.x, self.y), self.z)\n</code></pre>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.multiply","title":"<code>multiply(v)</code>","text":"<p>multiply immutable</p> <p>:param v: the other vector :type v: Vec3 or number :return: new vector  :rtype: Vec3</p> Source code in <code>sbs_utils\\vec.py</code> <pre><code>def multiply(self, v):\n    \"\"\"multiply immutable\n\n    :param v: the other vector\n    :type v: Vec3 or number\n    :return: new vector \n    :rtype: Vec3\n    \"\"\"\n    return self.__mul__(v)\n</code></pre>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.neg","title":"<code>neg()</code>","text":"<p>Negate a vector immutable</p> <p>:return: new vector negated version of this one :rtype: Vec3</p> Source code in <code>sbs_utils\\vec.py</code> <pre><code>def neg(self):\n    \"\"\"Negate a vector immutable\n\n    :return: new vector negated version of this one\n    :rtype: Vec3\n    \"\"\"\n    return self.__neg__()\n</code></pre>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.rand_in_sphere","title":"<code>rand_in_sphere(radius, outer=0, only_top_half=False, ring=False)</code>","text":"<p>random within a sphere</p> <p>:param radius: radius :type radius: float :param outer: outer radius if 0 r is outer, if non-zero r is inner radius. default=0 :type outer: float :param only_top_half: limit to top half :type only_top_half: bool :param ring: limit to 2d ring :type ring: bool :return: A randomly offset vector within the sphere/ring :rtype: Vec3</p> Source code in <code>sbs_utils\\vec.py</code> <pre><code>def rand_in_sphere(radius, outer=0, only_top_half=False, ring=False):\n    \"\"\" random within a sphere\n\n    :param radius: radius\n    :type radius: float\n    :param outer: outer radius if 0 r is outer, if non-zero r is inner radius. default=0\n    :type outer: float\n    :param only_top_half: limit to top half\n    :type only_top_half: bool\n    :param ring: limit to 2d ring\n    :type ring: bool\n    :return: A randomly offset vector within the sphere/ring\n    :rtype: Vec3\n    \"\"\"\n\n    PI = math.pi\n    yaw = uniform(-PI, PI)\n    pitch = uniform(0, PI)\n    if not only_top_half:\n        pitch = uniform(-PI, PI)\n\n    ret = Vec3(0, 0, 0)\n    ret.y = math.sin(pitch) * radius\n\n    outRad = math.cos(pitch) * radius\n    ret.x = math.sin(yaw) * outRad\n    ret.z = math.cos(yaw) * outRad\n\n    # if there is an outer, r is an inner\n    if outer &gt; 0:\n        r = uniform(radius, outer)\n        if ring:\n            ret.y = 0\n        ret = ret.unit()\n\n        ret = ret.multiply(r)\n\n    return ret\n</code></pre>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.rand_offset","title":"<code>rand_offset(r, outer=0, top_only=False, ring=False)</code>","text":"<p>random spherical offset</p> <p>:param r: radius :type r: float :param outer: outer radius if 0 r is outer, if non-zero r is inner radius. default=0 :type outer: float :param top_only: limit to top half :type top_only: bool :param ring: limit to 2d ring :type ring: bool :return: A randomly offset vector within the sphere/ring :rtype: Vec3</p> Source code in <code>sbs_utils\\vec.py</code> <pre><code>def rand_offset(self, r, outer=0, top_only=False, ring=False):\n    \"\"\" random spherical offset\n\n    :param r: radius\n    :type r: float\n    :param outer: outer radius if 0 r is outer, if non-zero r is inner radius. default=0\n    :type outer: float\n    :param top_only: limit to top half\n    :type top_only: bool\n    :param ring: limit to 2d ring\n    :type ring: bool\n    :return: A randomly offset vector within the sphere/ring\n    :rtype: Vec3\n    \"\"\"\n    v = Vec3.rand_in_sphere(r, outer, top_only, ring)\n    return self + v\n</code></pre>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.subtract","title":"<code>subtract(v)</code>","text":"<p>subtract immutable</p> <p>:param v: the other vector :type v: Vec3 or number :return: new vector  :rtype: Vec3</p> Source code in <code>sbs_utils\\vec.py</code> <pre><code>def subtract(self, v):\n    \"\"\"subtract immutable\n\n    :param v: the other vector\n    :type v: Vec3 or number\n    :return: new vector \n    :rtype: Vec3\n    \"\"\"\n    return self.__sub__(v)\n</code></pre>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.toAngles","title":"<code>toAngles(v)</code>","text":"<p>polar angles</p> <p>:return: theta and phi :rtype: theta: float, phi: float</p> Source code in <code>sbs_utils\\vec.py</code> <pre><code>def toAngles(self, v):\n    \"\"\"polar angles\n\n    :return: theta and phi\n    :rtype: theta: float, phi: float\n    \"\"\"\n    return {\n        'theta': math.atan2(self.z, self.x),\n        'phi': math.asin(self.y / self.length())\n    }\n</code></pre>"},{"location":"api/utility/vec/#sbs_utils.vec.Vec3.unit","title":"<code>unit()</code>","text":"<p>unit vector immutable</p> <p>:return: new vector  :rtype: Vec3</p> Source code in <code>sbs_utils\\vec.py</code> <pre><code>def unit(self):\n    \"\"\"unit vector immutable\n\n    :return: new vector \n    :rtype: Vec3\n    \"\"\"\n    return self.divide(self.length())\n</code></pre>"},{"location":"cosmos/","title":"Index","text":""},{"location":"cosmos/#artemis-cosmos-specific-functionality","title":"Artemis: Cosmos specific functionality","text":""},{"location":"cosmos/comms/","title":"Comms","text":"<p>Engine Interactions</p>"},{"location":"cosmos/comms/#_1","title":"Comms","text":"<p>Target, Tell, Broadcast, Comms,</p>"},{"location":"cosmos/comms/#await-comms","title":"Await Comms","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    await comms:\n        + \"Hail\":\n            have self tell player \"{comms_id}! We will destroy you, disgusting Terran scum!\"\n        + \"You're Ugly\":\n            have self tell player  \"\"\"You are a foolish Terran, {comms_id}.  We know that the taunt functionality is not currently implemented.^\"\"\"\n        + \"Surrender now\":\n            have self tell player \"\"\"OK we give up, {comms_id}.\"\"\"\n    end_await\n\n\n\n.. code-tab:: py PyMast\n\n        self.await_comms({\n            \"Hail\": self.comms_station_hail,\n            \"Build Homing\": self.comms_build_homing,\n            \"Build Nuke\": self.comms_build_nuke,\n            \"Build EMP\": self.comms_build_emp,\n            \"Build Mine\": self.comms_build_mine,\n        })\n</code></pre>"},{"location":"cosmos/gui/","title":"Gui","text":"<p>Gui Components</p>"},{"location":"cosmos/gui/#_1","title":"Gui","text":"<p>The MAST Story Components are used to create GUI elements.</p> <p>This can be part of a console, </p> <ul> <li>Layout</li> <li>Layout components</li> <li>Form Controls</li> </ul>"},{"location":"cosmos/gui/#gui-layout","title":"Gui Layout","text":""},{"location":"cosmos/gui/#await-gui-choices","title":"await gui (choices)","text":"<p>def await_gui (self,      buttons=None,      timeout=None,      on_message=None,      test_refresh=None,      test_end_await=None,      on_disconnect=None):</p> <p>.. tabs::     .. code-tab:: mast</p> <pre><code>    await gui\n\n.. code-tab:: py PyMast\n\n    self.await_gui()\n</code></pre>"},{"location":"cosmos/gui/#section","title":"Section","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    section style=\"\"\n\n.. code-tab:: py PyMast\n\n    self.gui_section(\"\")\n</code></pre>"},{"location":"cosmos/gui/#row","title":"Row","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    row\n    row style=\"\"\n\n.. code-tab:: py PyMast\n\n    self.gui_row()\n    self.gui_row(\"\")\n</code></pre>"},{"location":"cosmos/gui/#row_1","title":"Row","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    blank\n\n.. code-tab:: py PyMast\n\n    self.gui_blank()\n</code></pre>"},{"location":"cosmos/gui/#hole","title":"Hole","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    hole\n\n.. code-tab:: py PyMast\n\n    self.gui_hole()\n</code></pre>"},{"location":"cosmos/gui/#text-and-text-append","title":"Text and Text append","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    \"\"\"TEXT \"\"\"\n\n    ^^^ Append ^^^\n\n\n.. code-tab:: py PyMast\n\n    self.gui_text(\"\")\n</code></pre>"},{"location":"cosmos/gui/#text-input","title":"Text Input","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    input message \"Make a toast\"\n\n.. code-tab:: py PyMast\n\n    self.gui_text_input(\"\", \"Hint\" label)\n</code></pre>"},{"location":"cosmos/gui/#button","title":"Button","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    button \"Text\":\n       ... code...\n    end_button\n\n.. code-tab:: py PyMast\n\n    self.gui_button(\"Text\", label)\n</code></pre>"},{"location":"cosmos/gui/#checkbox","title":"Checkbox","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    checkbox var \"Text\"\n\n.. code-tab:: py PyMast\n\n    self.gui_checkbox(\"Text\", value)\n</code></pre>"},{"location":"cosmos/gui/#dropdown","title":"Dropdown","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    dropdown var \"val1,val2\":\n        ... code...\n    end_dropdown\n\n.. code-tab:: py PyMast\n\n    self.gui_dropdown(\"val1,val2\", value)\n    # Handle change in on_message\n</code></pre>"},{"location":"cosmos/gui/#face","title":"Face","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    face var\n\n.. code-tab:: py PyMast\n\n    self.gui_face(\"Face Text\")\n</code></pre>"},{"location":"cosmos/gui/#slider","title":"Slider","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    intslider var low high value\n    slider var low high value\n\n.. code-tab:: py PyMast\n\n    def gui_slider (self, val, low, high, show_number=True, label=None, style=None):\n    self.gui_slider(\"Face Text\")\n</code></pre>"},{"location":"cosmos/gui/#radio-buttons","title":"Radio buttons","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    radio var \"b1, b2, b3\"\n    vradio var \"b1, b2, b3\"\n\n.. code-tab:: py PyMast\n\n    self.gui_radio(\"b1, b2, b3\")\n    self.gui_radio(\"b1, b2, b3\", True)\n</code></pre>"},{"location":"cosmos/gui/#ship","title":"Ship","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    ship val # this isn't support when write this\n    ship \"val\"\n\n.. code-tab:: py PyMast\n\n    self.gui_ship(ship)\n</code></pre>"},{"location":"cosmos/gui/#image","title":"Image","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    ship val # this isn't support when write this\n    ship \"val\"\n\n.. code-tab:: py PyMast\n\n    self.gui_image(file, color)\n</code></pre>"},{"location":"cosmos/gui/#sprite","title":"Sprite","text":"<p>This doesn't exists as I write this</p> <p>.. tabs::     .. code-tab:: mast</p> <pre><code>    sprite val # this isn't support when write this\n\n\n.. code-tab:: py PyMast\n\n    self.gui_sprite(ship, x,y, w,h)\n</code></pre>"},{"location":"cosmos/gui/#full-console","title":"Full console","text":"<p>For building console widget by widget.  Call this to specify which console.</p> <p>.. tabs::     .. code-tab:: mast</p> <pre><code>    console \"helm\"\n    console var\n\n\n.. code-tab:: py PyMast\n\n    self.gui_console(\"helm\")\n</code></pre>"},{"location":"cosmos/gui/#activate-console","title":"Activate console","text":"<p>For building console widget by widget.  Call this to specify which console.</p> <p>.. tabs::     .. code-tab:: mast</p> <pre><code>    console activate \"helm\"\n\n\n.. code-tab:: py PyMast\n\n    self.gui_activate_console(\"helm\")\n</code></pre>"},{"location":"cosmos/gui/#layout-console-widget","title":"Layout console widget","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    console widget \"2dview\"\n\n\n.. code-tab:: py PyMast\n\n    self.gui_console_widget(\"2dview\")\n</code></pre>"},{"location":"cosmos/gui/#layout-console-widget_1","title":"Layout console widget","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    widget_list \"norm_helm\"  \"2dview^throttle\"\n\n\n.. code-tab:: py PyMast\n\n    self.gui_console_widget+list(\"norm_helm\", \"2dview^throttle\")\n</code></pre>"},{"location":"cosmos/gui/#layout-python-coded-widget","title":"Layout python coded widget","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    gui control func()\n\n\n.. code-tab:: py PyMast\n\n    self.gui_content(listbox())\n</code></pre>"},{"location":"cosmos/science/","title":"Await Science","text":"<p>.. tabs::     .. code-tab:: mast</p> <pre><code>    await scan():\n        scan tab \"scan\":\n            scan results \"Scan\"\n        scan tab \"bio\":\n            scan results \"Bio\"\n    end_await\n\n\n\n.. code-tab:: py PyMast\n\n          self.await_science({\n            \"scan\": self.scan_default,\n            \"bio\": self.scan_bio,\n            \"intel\": self.scan_intel,\n            \"signl\": self.scan_signl\n        })\n\n\n    def scan_default(self, event):\n        return \"This space object is now scanned, in the most general way. This text was generated by the script.\"\n\n    def scan_intel(self, event):\n        return \"This space object is detailed in the ship's computer banks. This text was generated by the script.\"\n\n    def scan_bio(self, event):\n        return \"This space object has indeterminate life signs. This text was generated by the script.\"\n    def scan_signl(self, event):\n        return \"This space object radiating signals. This text was generated by the script.\"\n</code></pre>"},{"location":"home/start/","title":"Getting Started","text":""},{"location":"mast/","title":"Index","text":""},{"location":"mast/#what-is-mast","title":"What is Mast","text":"<p>MAST (Multiple Agent Story Telling) is for writing in a narrative flow that tells a 'story'. The multiple agents of a MAST story (players, non-player characters, etc.) each have their own story and those stories can have multiple side plots.</p> <p>Stories have a forward moving flow; there is a beginning, a middle and an end. MAST's programming flow keeps the story moving forward. MAST also facilitates an interactive narrative which allows for choice and branching of the story, revisiting aspects of the story etc. while still flowing the story on a single path.</p> <p>In MAST for Artemis Cosmos, the multiple agents are the player consoles, the ships, various characters that can be on ships, etc. Artemis Cosmos has the ability to add many more characters to the game. For example there can be multiple characters on a space station that you may interact with. The Damage Control teams can have richer stories and each can be unique.</p> <p>MAST provides and new simple programming language that enables:</p> <ul> <li>Language that flows more like a narrative or film script</li> <li>Easy and rich GUIs for the pause scene and the Artemis Cosmos consoles</li> <li>A Task/State driven system managing multiple tasks in parallel e.g. a quest with side quests</li> <li>Behavior tree for complex AI and Dialogs</li> <li>Similar capabilities to Visual Novel systems, such as RenPy, Inkle Ink, and Choice script</li> </ul>"},{"location":"mast/behavior/","title":"Behavior Components","text":""},{"location":"mast/behavior/#sequence","title":"Sequence","text":"MastPython <pre><code>bt seq label1 &amp; label2\n</code></pre> <pre><code>self.behave_seq (label1, label2):\n</code></pre>"},{"location":"mast/behavior/#select","title":"Select","text":"MastPython <pre><code>bt  sel label1 | label2\n</code></pre> <pre><code>self.behave_seq (label1, label2):\n</code></pre>"},{"location":"mast/behavior/#until","title":"Until","text":"MastPython <pre><code>bt until my_label\nbt until fail my_label\n</code></pre> <pre><code>self.behave_until (my_label)\nself.behave_until (my_label, PollResults.OK_END)\nself.behave_until (my_label, PollResults.OK_FAIL)\n</code></pre>"},{"location":"mast/behavior/#invert","title":"Invert","text":"MastPython <pre><code>bt invert my_label\n</code></pre> <pre><code>self.behave_invert (my_label):\n</code></pre>"},{"location":"mast/behavior/#yield","title":"yield","text":"MastPython <pre><code>yield FAIL\nyield SUCCESS\n</code></pre> <pre><code>yield PollResults.BT_FAIL\nyield PollResults.BT_SUCCESS\n</code></pre>"},{"location":"mast/model/","title":"Agent Model","text":""},{"location":"mast/model/#_1","title":"Agent Model","text":"<p>SBS Utils Object Model</p>"},{"location":"mast/model/#_2","title":"Agent Model","text":"<p>Sbs Utils creates an oObject model. This Object Model is used by Mast and PyMast.</p> <p>Mast needs participants in the story. In stories Artemis Cosmos these participants are:</p> <ul> <li>The Story itself (aka the server, the game, the engine or the world)</li> <li>Bridge Crew (The player consoles)</li> <li>The Player ships (Ships control by the Bridge Crew)</li> <li>Non-Player ships Starbases, Enemy Ships, Friendly Ships (Things controled by script)</li> <li>The terrain element asteroids, pickups, nebula etc.</li> <li>Non-Player Crew and Characters (Seen as faces in engineering, Comms etc.)</li> <li>Internals ship location (Rooms and other things)</li> </ul> <p>These agents/participants are the things in the Artemis Cosmos world. Each of this agents can have stories and tasks associated with them. </p> <ul> <li>Engine objects<ul> <li>engine data set</li> </ul> </li> <li>Script Objects<ul> <li>roles</li> <li>Inventory</li> <li>Linked</li> </ul> </li> </ul> <p>Engine, script and persisted</p> <p>The object model is designed to work with three sets of the model data: </p> <ul> <li>Engine</li> <li>Script</li> <li>Persisted</li> </ul>"},{"location":"mast/model/#engine-data","title":"Engine data","text":"<p>Engine data are in memory objects that the engine manages.</p> <p>Engine data is the data the the Artemis Cosmos game engine deals with. This the data that get ships, etc drawn on screen and the engine manages low level behavior (e.g. moving a ship from a pont a to point b)</p> <p>Engine data has:</p> <ul> <li>The object its self</li> <li>A engine type (Player, Active, Passive)</li> <li>data tag</li> <li>tick type / behavior</li> <li>A data set</li> </ul>"},{"location":"mast/model/#engine-object","title":"Engine object","text":"<p>The engine object provides the raw object in the engine.</p> <p>There are two types of engine objects </p> <ul> <li>class:<code>~sbs.space_object</code></li> <li>class:<code>~sbs.grid_object</code></li> </ul> <p>It has data the is common to all engine objects.</p> <ul> <li>side</li> <li>position</li> <li>steering properties</li> </ul> <p>An engine data has a 'data set' this is data that can be different for space objects. e.g. a player ship data set may have ship systems, while an asteroid does not.</p> <p>The engine 'type' is the high level behavior type of player, active, and passive. </p> <ul> <li>player are player ships.</li> <li>Active are npc, space docks, friendly and enemy ships etc.</li> <li>Passive are terrain e.g. nebula, asteroids etc.</li> </ul> <p>The data tag relates to the artwork and other properties that are assigned to the object. The values are defined in ship_dat.json. The values are used by the engine, and some of these values are available in the data set.</p> <p>The tick type is a engine level behavior setting. For example specifying the object is a player ship, npc ship, vs. a space dock.</p> <p>that script can get and set data that the engine uses. Scripts can change this data and see those change reflected in the engine (e.g. Add torpedoes to a ship.)</p>"},{"location":"mast/model/#script-data","title":"Script data","text":"<p>Script data are python object in memory that script manages.</p> <p>Script data is a reflection of the Engine Data, and can also be used to synchronize with a persisted model.</p> <ul> <li>class:<code>~sbs_utils.spaceobject.SpaceObject</code></li> <li> <p>class:<code>~sbs_utils.gridobject.GridObject</code></p> </li> <li> <p>class:<code>~sbs_utils.objects.PlayerShip</code></p> </li> <li>class:<code>~sbs_utils.objects.Npc</code> </li> <li>class:<code>~sbs_utils.objects.Active</code></li> <li>class:<code>~sbs_utils.objects.Terrain</code></li> <li>class:<code>~sbs_utils.objects.Passive</code></li> </ul>"},{"location":"mast/model/#role","title":"role","text":"<p>Script object can have multiple \"roles\". Roles are similar to 'hashtags' in social media apps. You can tag script objects with a role. </p>"},{"location":"mast/model/#links","title":"Links","text":"<p>Links are named relationship between two objects.</p>"},{"location":"mast/model/#inventory","title":"Inventory","text":"<p>Inventory is data that can be added to any object.</p>"},{"location":"mast/model/#persisted-data","title":"Persisted data","text":"<p>NOTE: This is speculative of how the persisted data will work in the future. NOTE: This is just really notes on what is hoped to accomplish</p> <p>Persistence will persist:</p> <ul> <li>Engine Objects </li> <li>roles</li> <li>Links</li> <li>Inventory</li> </ul> <p>There should be a db_query that has similar functions to the query module. e.g. so that you can retrieve from the data base using similar set operation</p> <p>sector_objects = db_query.broadtest(100000, 100000, 150000, 150000, -1) db_query.spawn(sector_objects)</p> <p>.. tabs::</p> <p>.. code-tab:: sqlite3 SqlLite</p> <pre><code>    CREATE TABLE engine_object (\n        db_id INTEGER NOT NULL PRIMARY KEY,\n        data JSON NOT NULL\n        -- What else \n    );\n</code></pre> <p>.. code-tab:: js Firebase</p> <pre><code> \"engine_objects\": {\n    \"&lt;db_id&gt;\": {\n        \"data\": { . . .}\n    }\n }\n</code></pre> <p>.. tabs::</p> <p>.. code-tab:: sqlite3 SqlLite</p> <pre><code>    CREATE TABLE role (\n    role TEXT NOT NULL,\n    FOREIGN KEY (db_id) REFERENCES engine_object (db_id) \n                ON DELETE CASCADE ON UPDATE NO ACTION,\n    PRIMARY KEY(role, db_id)\n    );\n</code></pre> <p>.. code-tab:: js Firebase</p> <pre><code>    \"roles\": {\n        \"&lt;role&gt;\": {1,2,3,}\n     }\n</code></pre> <p>.. tabs::</p> <p>.. code-tab:: sqlite3 SqlLite</p> <pre><code>    CREATE TABLE link (\n    link TEXT NOT NULL,\n    FOREIGN KEY (from_db_id) REFERENCES engine_object (db_id) \n                ON DELETE CASCADE ON UPDATE NO ACTION,\n    FOREIGN KEY (to_db_id) REFERENCES engine_object (db_id) \n                ON DELETE CASCADE ON UPDATE NO ACTION,\n    PRIMARY KEY(role, from_db_id, to_db_id)\n    );\n</code></pre> <p>.. code-tab:: js Firebase</p> <pre><code>    \"links\":{\n        \"&lt;link&gt;\":  {(1,9), (2,7) , (3,8)}\n    }\n</code></pre> <p>.. tabs::</p> <p>.. code-tab:: sqlite3 SqlLite</p> <pre><code>    CREATE TABLE inventory (\n    name TEXT NOT NULL,\n    FOREIGN KEY (db_id) REFERENCES engine_object (db_id) \n                ON DELETE CASCADE ON UPDATE NO ACTION,\n    value JSON NOT NULL,\n    PRIMARY KEY(role, db_id, value)\n    );\n</code></pre> <p>.. code-tab:: js Firebase</p> <pre><code>// Not sure this one is right\n\"inventory\":{\n    \"&lt;key&gt;\":  {\n        \"&lt;db_id&gt;\": &lt;value&gt;\n    }\n}\n</code></pre>"},{"location":"mast/overview/","title":"Language","text":""},{"location":"mast/overview/#mast-execution-flow","title":"Mast execution flow","text":"<p>The goal of Mast is to enable non-programmers to be productive in creating interactive narratives.</p> <p>The Mast language is a programming language that strips many of the programming language concepts that make writing interactive narratives difficult as well a simplified syntax.</p> <p>The intent is to be approachable to non-programmers. It is not intended to be 'structured' programming language like C++ or Python. </p> <p>The flow of mast is similar to the original BASIC programming langauge. The code executes moving forward, it can branch by jumping to new locations (labels). This can be called 'unstructured' programming. Mast was also influenced by choice script, Inkle's Ink, and others.</p> mastOutput <pre><code>========= start =======\nlog \"Hello, world\"\n-&gt; goodbye\n====== not_here =======\nlog \"I get jumped over\"\n======= goodbye =======\nlog \"Goodbye\"\n</code></pre> <pre><code>Hello, world\nGoodbye\n</code></pre>"},{"location":"mast/overview/#mast-and-pymast","title":"Mast and PyMast","text":"<p>Mast is a standalone language running inside of the python system provided by Artemis Cosmos.</p> <p>PyMast is python code that runs using the Mast execution flow. This gives python programmers the benefits of Mast's simple flow while enabling greater access to the native python.</p> MastPython MastOutput <pre><code>========= start =======\nlog \"Hello, world\"\n-&gt; goodbye\n====== not_here =======\nlog \"I get jumped over\"\n======= goodbye =======\nlog \"Goodbye\"\n</code></pre> <pre><code>class Story(PyMastStory):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    @label()\n    def start(self):\n        print(\"Hello, world\")\n        yield self.jump(self.goodbye)\n\n    @label()\n    def not_here(self):\n        print(\"I get jumped over\")\n\n    @label()\n    def goodbye(self):\n        print(\"Goodbye\")\n</code></pre> <pre><code>|    Hello, world\n|    Goodbye\n</code></pre>"},{"location":"mast/overview/#mast-and-pausing-the-flow","title":"Mast and pausing the flow","text":"<p>Mast is running as part of a game engine. The engine only give Mast a small amount of time to run. If Mast ran unconditionally it would not allow the engine to run and stall the game. However, there are times a story cannot continue until conditions are met. e.g. A comms button is press, a science scan it started etc.</p> <p>Mast can \"pause\" execution and yield control back to the engine. The engine keeps calling MAst and it yields until the condition is met teh the flow can continue.</p> <p>This example prints \"Hello, world\" and five seconds later it prints \"Goodbye\". During that five seconds the engine is able to run because Mast yields control back since it cannot move forward.</p> <p>This ability to yield control back to the engine is a reason that Mast flow can be enable users to focus on the flow of the story and not how to get the programming lanuage to deal with this.</p> Mastpy PyMastOutput <pre><code>========= start =======\nlog \"Hello, world\"\ndelay gui 5s\nlog \"Goodbye\"\n</code></pre> <pre><code>class Story(PyMastStory):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    @label()\n    def start(self):\n        print(\"Hello, world\")\n        yield self.delay(5)\n        print(\"Goodbye\")\n</code></pre> <pre><code>|    Hello, world\n|    Goodbye\n</code></pre> <p>Yielding control is handled by Mast. If there ever is a time you need to force a yield you can us the Mast 'yeild' command. In PyMast the python keyword yield is used, however you must specify how to yield by providing a PollResults.OK_RUN_AGAIN. There are other types of yields in PyMast. This is not the time to detail those uses. </p> mastPyMastOutput <pre><code>========= start =======\nlog \"Hello, world\"\nyield\nlog \"Goodbye\"\n</code></pre> <pre><code>class Story(PyMastStory):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    @label()\n    def start(self):\n        print(\"Hello, world\")\n        yield PollResults.OK_RUN_AGAIN\n        print(\"Goodbye\")\n</code></pre> <pre><code>|    Hello, world\n|    Goodbye\n</code></pre> <p>In future topics there will be other times descibed when Mast yields. Typically this is when MAst is waiting for something to occur. For example:</p> <ul> <li>time (e.g. the delay used in the examples)</li> <li>awaiting a choice to be made in the gui </li> <li>awaiting a comms button to be selected</li> <li>awaiting a science scan </li> </ul>"},{"location":"mast/overview/#sub-plots-aka-tasks","title":"Sub plots aka Tasks","text":"<p>Mast is MULTI Agent Story Telling so each agent has their own story or event stories.</p> <p>Mast allows multiple storylines to run in \"parallel\". </p> <p>Mast in Artemis Cosmos is inherently a single thread of execution. These storylines do not run exactly in parallel, but you can run multiple things and make sure they run. These are called Tasks, and tasks can be scheduled so that multiple task can run.</p> <p>For example a Player Ship can run a Task for handling Comms messages, another for Science scan. This player ship could in fact run multiple tasks for handling comms with different sets of ships.</p> <p>These tasks themselves act as small side stories, They run as long as needed.</p> <p>In mast tasks are scheduled in mast with a parallel jump, and in PyMast with a schedule_task</p> <p>If you have programmed Artemis 2.x scripts, tasks are similar to the  tags. Unlike the  tags, task only run when needed. They are scheduled, and when they end they are unscheduled they can also be canceled. mastPyMastOutput <pre><code>===== start ====\n# Run another task\n=&gt; count_to_ten\ndelay gui 15s\nlog \"done\"\n\n===== count_to_ten ======\nfor x in range(10):\n    log \"{x}\"\n    yield\nnext x\n</code></pre> <pre><code>class Story(PyMastStory):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    @label()\n    def start(self):\n        self.schedule_task(self.count_to_ten)\n        yield self.delay(15)\n\n    @label()\n    def count_to_ten(self):\n        for x in range(10):\n            print(x)\n            yield PollResults.OK_RUN_AGAIN\n</code></pre> <pre><code>|    1\n|    2\n|    3\n|    4\n|    5\n|    6\n|    7\n|    8\n|    9\n|    10\n|    done\n</code></pre>"},{"location":"mast/overview/#schedulers","title":"Schedulers","text":"<p>Mast and PyMast run all the tasks using schedulers. This process is mostly hidden to the writer of Mast and PyMast code.</p> <p>Tasks are run on 'Schedulers' and to put it simply for now, the server and each Console has a scheduler. Additional scheduler can be created but typically the schedulers run associated with a console with the server running a large number of the tasks.</p> <p>For example, the server runs a scheduler it may have a task for presenting its User Interface/GUI, and maybe have other task to manage the world creation, handing comms, science etc. Consoles typically have a scheduler an mostly as single task for the User Interface/GUI.</p> <p>The more complex the script, the more tasks that will run. And if the complexity warrants more schedulers can be created. e.g. schedulers for each player ships etc.</p> <p>When Artemis Cosmos calls the scripting engine, Mast/PyMast will run al the Schedulers and each scheduler runs all of its Tasks. </p> <p>As tasks are finished, they are removed. If a scheduler runs and no longer has tasks it is removed.</p>"},{"location":"mast/overview/#xml-events-vs-label-and-tasks","title":"XML Events vs label, and tasks","text":"<p>If you ever programmed Artemis 2.x, Tasks are similar to events. XML is NOT supported, but used as examples for those familiar with Artemis 2.x scripting.</p> <ul> <li> <p>XML events </p> <ul> <li>are always scheduled</li> <li>and always run</li> <li>never stop</li> </ul> </li> <li> <p>Tasks </p> <ul> <li>need to be scheduled or they don't run</li> <li>They can end</li> <li>They can be canceled</li> </ul> </li> </ul> XMLmastPyMast <pre><code>&lt;event name=\"do_some_thing\"&gt;\n&lt;/event&gt;\n</code></pre> <pre><code># To schedule the task\nschedule do_some_thing\n# To end a task\n-&gt;END\n\n\n==== do_some_thing ====\nlog \"Hello\"\n</code></pre> <pre><code>@label()\ndef start(self):\n    self.schedule_task(self.do_some_thing)\n\n@label()\ndef do_some_thing(self):\n    self.log(\"Hello\")\n</code></pre>"},{"location":"mast/overview/#setting-data-vs-xml-variable","title":"Setting data vs. XML Variable","text":"<p>Mast you can set data that is shared by the se:rver, all client consoles and all tasks. You can scope data to the task. You can pass data to a task. This allows task to be scheduled multiple times. PyMast has the added ability to scope data to a label since it is a function in python.</p> <p>In contrast to XML event, you could  that variable was always shared. Also, event did not have scoped data. Event could not be reused. This meant to schedule events multiple times, you had to copy and paste the event and create new variables.  XMLMastPyMast <pre><code>&lt;event name=\"do_some_thing\"&gt;\n    &lt;set_variable name=\"some_data\" value=\"1\"/&gt; \n    &lt;set_variable name=\"some_data_one\" value=\"1\"/&gt; \n    &lt;set_variable name=\"some_data_two\" value=\"1\"/&gt; \n&lt;/event&gt;\n</code></pre> <pre><code># create shared data\nshared say_what = \"Hello\"\nlocal_data = \"I'm different\"\n\n# When run outputs Hello, World So Long Goodbye\nschedule do_some_thing {\"passed_data\": \"World\"}\n# When run outputs Hello, Cosmos So Long Goodbye\nschedule do_some_thing {\"passed_data\": \"Cosmos\"}\n\n-&gt;END\n\n==== do_some_thing ====\n# set a local variable \nlocal_data = \"Goodbye\"\n\nlog \"{say_what}, {passed_data}\"\nlog \"{local_data}\"\n</code></pre> <pre><code>@label()\ndef start(self):\n    # Shared data is added to the story\n    self.say_what = \"Hello\"\n\n    # When run out puts Hello, World So Long Goodbye\n    self.schedule_task(self.do_some_thing, {\"passed_data\": \"World\"})\n    # When run out puts Hello, Cosmos So Long Goodbye\n    self.schedule_task(self.do_some_thing, {\"passed_data\": \"Cosmos\"})\n\n@label()\ndef do_some_thing(self):\n    # To share with the task\n    # so it can be used in other labels run by this task\n    self.task.local_data = \"So Long\"\n    # a label is a function in python so it can also have\n    # data local to the function/label\n    label_data = \"Goodbye\"\n\n    self.task.local_data = \"Goodbye\"\n    self.log(\"{say_what}, {passed_data}\")\n    self.log(\"{self.task.local_data}\")\n    self.log(\"{label_data}\")\n</code></pre>"},{"location":"mast/overview/#delaying-things-and-xml-timers","title":"Delaying things and XML Timers","text":"<p>There are times that a delay is needed before the next thing happens. There are multiple reasons for this:</p> <ul> <li>pause between steps e.g. showing credits, spawning different waves of enemies</li> <li>delay something to not overwhelm the users, periodically report game state</li> </ul> <p>Example one delaying credits.</p> XMLmastPyMast <pre><code>    &lt;start&gt;\n        . . .\n        &lt;set_timer name=\"credits_timer\"/&gt;\n        &lt;set_variable name=\"credits\" comparator=\"EQUALS\" value=\"0\"/&gt;\n    &lt;/start&gt;\n\n    &lt;event name=\"Credits 1\"&gt;\n        &lt;if_timer_finished name=\"credits_timer\"/&gt;\n        &lt;if_variable name=\"credits\" comparator=\"EQUALS\" value=\"0\"/&gt;\n        &lt;big_message title=\"This is the first page of credits\" subtitle2=\"\"/&gt;\n        &lt;set_variable name=\"credits\" value=\"1\"/&gt;\n    &lt;/event&gt;\n    &lt;event name=\"Credits 2\"&gt;\n        &lt;if_timer_finished name=\"credits_timer\"/&gt;\n        &lt;if_variable name=\"credits\" comparator=\"EQUALS\" value=\"1\"/&gt;\n        &lt;big_message title=\"This is the second page of credits\" subtitle2=\"\"/&gt;\n        &lt;set_variable name=\"credits\" value=\"2\"/&gt;\n    &lt;/event&gt;\n    &lt;event name=\"Credits 3\"&gt;\n        &lt;if_timer_finished name=\"credits_timer\"/&gt;\n        &lt;if_variable name=\"credits\" comparator=\"EQUALS\" value=\"2\"/&gt;\n        &lt;big_message title=\"This is the third page of credits\" subtitle2=\"\"/&gt;\n        &lt;set_variable name=\"credits\" value=\"999\"/&gt;\n    &lt;/event&gt;\n</code></pre> <pre><code>==== show_credits ====\n\n\"\"\" This is the first page of credits\"\"\"\nawait gui timeout 10s\n\"\"\" This is the second page of credits\"\"\"\nawait gui timeout 10s\n\"\"\" This is the third page of credits\"\"\"\nawait gui timeout 10s\n</code></pre> <pre><code>@label()\ndef start(self):\n    self.gui_text(\"this is the first page of credits\")\n    yield self.await_gui(timeout=10)\n    self.gui_text(\"this is the second page of credits\")\n    yield self.await_gui(timeout=10)\n    self.gui_text(\"this is the third page of credits\")\n    yield self.await_gui(timeout=10)\n</code></pre> <p>Another use is to spawn enemy waves. The XML for this would be very verbose.</p> xmlmastPyMAst <pre><code>&lt;Skipping/&gt;\n</code></pre> <pre><code>==== spawn_wave ====\nenemyTypeNameList = [\"kralien_dreadnaught\",\"kralien_battleship\",\"skaraan_defiler\",\"cargo_ship\",\"arvonian_carrier\",\"torgoth_behemoth\"]\nenemy_prefix = \"KLMNQ\"\n\n\n# this gets a radom span location just outside the view of the sctor \nspawn_points = scatter_sphere(int(enemy_count), 0,0,0, 6000, 6000+250*enemy_count, ring=True)\n\nfor v in spawn_points:\n    r_type = random.choice(enemyTypeNameList)\n    r_name = f\"{random.choice(enemy_prefix)}_{enemy}\"\n    spawn_data = npc_spawn(v.x, v.y, v.z, r_name, \"RAIDER\", r_type, \"behav_npcship\")\n    raider = spawn_data.py_object\n    do set_face(raider.id, random_kralien())\n    do add_role(raider.id, \"Raider\")\n    enemy = enemy + 1\nnext v\n\ndelay sim 8m\n</code></pre> <pre><code>@label()\ndef spawn_wave(self):\n    enemyTypeNameList = [\"kralien_dreadnaught\",\"kralien_battleship\",\"skaraan_defiler\",\"cargo_ship\",\"arvonian_carrier\",\"torgoth_behemoth\"]\n    enemy_prefix = \"KLMNQ\"\n\n    # this gets a radom span location just outside the view of the sctor \n    spawn_points = scatter_sphere(int(enemy_count), 0,0,0, 6000, 6000+250*enemy_count, ring=True)\n\n    for v in spawn_points:\n        r_type = random.choice(enemyTypeNameList)\n        r_name = f\"{random.choice(enemy_prefix)}_{enemy}\"\n        spawn_data = npc_spawn(v.x, v.y, v.z, r_name, \"RAIDER\", r_type, \"behav_npcship\")\n        raider = spawn_data.py_object\n        set_face(raider.id, random_kralien())\n        add_role(raider.id, \"Raider\")\n        enemy = enemy + 1\n    yield self.delay(8*60)\n</code></pre>"},{"location":"mast/syntax/","title":"Language Basics","text":"<ul> <li>Data</li> <li>Task flow</li> <li>Conditional</li> <li>Loops </li> <li>Scheduling Tasks</li> </ul>"},{"location":"mast/syntax/#data","title":"Data","text":"<p>You can create data that is any valid python type. This data can be used in you mast tasks.</p>"},{"location":"mast/syntax/#simple-assignment","title":"Simple assignment","text":"<p>To do so you use the assignment statement::</p> <pre><code>fred = 3\n</code></pre> <p>Assignment has a variable name an equals followed by a value.</p>"},{"location":"mast/syntax/#using-python-with-assignment","title":"Using python with assignment","text":"<p>The assignment is simple and has trouble with more complex python statements e.g. a list of list, etc. To allow more complex assignments you can wrap the value in 'snakes' to have the python compiler used::</p> <pre><code>players_inventory = ~~ [ [2,3], [4,5]] ~~\n</code></pre> <p>You need at least 2 'snakes' (the tilde character), before and after the python values. But you can have more tha two, and the number doesn't need to be exactly the same, as long as you have at least two::</p> <pre><code>players_inventory = \n    ~~~~~~~~~ \n    [\n        [2,3], \n        [4,5]\n    ] \n    ~~~~~~\n</code></pre>"},{"location":"mast/syntax/#shared-data-assignment","title":"Shared data assignment","text":"<p>Data has multiple scopes. Data can be at the scope of a Mast story, For a scheduler, A task, and block</p> <p>There are times you want data to be shared by all tasks within a story. To share data you add the 'shared' marked in front of the assignment::</p> <pre><code>shared enemy_count = 20\nshared beer_count = 8\n</code></pre> <p>When using Data, scope is automatically handled you only need to specify shared at assignment::</p> <pre><code>shared beer_count = 8\nmy_beer = 0\n\n# Drink all the beer\nmy_beer = my_beer + beer_count\nshare beer_count = 0\n</code></pre>"},{"location":"mast/syntax/#task-flow-story-sections-via-labels","title":"Task Flow: Story sections via labels","text":"<p>A mast story is broken into sections using labels. You also can have comments, and there are also other 'markers' that can help organizing sections and help have them stand out in the file.</p>"},{"location":"mast/syntax/#labels","title":"Labels","text":"<p>Labels have a Name with no spaces and are  enclosed in 2 or more equals</p> <pre><code>    ====== GotoBar ====\n     . . .\n    == ShowHelm ==\n     . . .\n\n    ========================================== MoreStuff ===========================\n     . . .\n```\n\nThere are two labels that are implied: main and END.\n\nThe label \"main\" is the very start of the script.\nThe label \"END\" end the current task.\n\nThey are predefined and don't need to be defined in script.\n\nLabels are not 'functions', one label passes into the next label\n\n```\n    ======== One =====\n    log \"One\"\n    ======== Two =====\n    log \"Two\"\n    ===== Three ====\n    log \"Three\"\n</code></pre> <p>Expected output</p> <pre><code> One\n Two\n Three\n</code></pre>"},{"location":"mast/syntax/#stateflow-changes-jump-push-pop","title":"State/Flow changes: Jump, Push, Pop","text":"<p>There are times you will want to change what part of a task is running. This is done by redirecting the flow to a label.</p>"},{"location":"mast/syntax/#jump","title":"Jump","text":"<p>This can be done by a Jump command. Which is a 'thin arrow' followed by the label name.::</p> <pre><code>    -&gt; Here\n\n    ======== NotHere =====\n    log \"Got here later\"\n    -&gt; End\n\n    ======== Here =====\n    log \"First\"\n    -&gt; NotHere\n\n    ======== End =====\n    log \"Done\"\n    -&gt;END\n    ======== Never =====\n    log \"Can never reach\"\n</code></pre> <p>The expected output</p> <pre><code>First\nGot Here later\nDone\n</code></pre>"},{"location":"mast/syntax/#pushpop","title":"Push/Pop","text":"<p>Push is kind of the \"Hold my Beer\" of jump. When you Push it remembers the current location. Pop returns back to that location.</p> <p>Push is a 'thin double arrow' followed by the label name.</p> <p>Pop returns back to the previous location. Pop is a backwards thin double arrow.</p> <p>For example <pre><code>log \"See you later\"\n-&gt;&gt; PushHere\nlog \"and we're back\"\n-&gt;END\n======== PushHere =====\nlog \"Going back\"\n&lt;&lt;-\n</code></pre></p> <p>The expected output</p> <pre><code>See you later\nGoing Back\nand we're back\n</code></pre>"},{"location":"mast/syntax/#jump-to-end","title":"Jump to End","text":"<p>To immediately end a task you can use a Jump to End.</p> <p>Jump to end looks like a Jump with a thin arrow and the label \"END\"</p> mastPythonOutput <pre><code>===== start ====\n\nlog(\"See you later\")\n-&gt;END\nlog(\"Never gets here\")\n</code></pre> <pre><code>@label()\ndef start(self):\n    print(\"See you later\")\n    yield END()\n</code></pre> <pre><code>See you later\n</code></pre> <p>Jump to End ends the task. If that task the only task, the whole story ends.</p>"},{"location":"mast/syntax/#scheduling-tasks-and-waiting-for-them-to-complete","title":"Scheduling tasks and waiting for them to complete","text":"<p>A story can have multiple tasks running in parallel.</p> <p>For example, a ship maybe have multiple Tasks associated with it.  One tracking it comms, several for its client consoles, and several related to 'quest' it is involved in.</p> <p>To do so, new task can be scheduled. Either in python or via Mast.</p>"},{"location":"mast/syntax/#scheduling-tasks-in-mast","title":"Scheduling tasks in mast","text":"<p>Schedule a task is similar to a Jump, but it uses the Fat arrow. The difference is another task begins, and the original task continues on.</p> MastPythonOutput <pre><code>log(\"before\")\n#\ntask_schedule(ATask)\nlog(\"after\")\n\n=== ATask ===\nlog(\"in task\")\n</code></pre> <pre><code>@label()\ndef start(self):\n    logger()\n    log(\"before\")\n    task_schedule(self.a_task)\n    log(\"after\")\n\n@label()\ndef a_task(self):\n    log(\"in task\")\n</code></pre> <pre><code>before\nafter\nin task\n</code></pre>"},{"location":"mast/syntax/#passing-data-to-a-task","title":"passing data to a task","text":"<p>You can pass data to a new task. The data passed is different than the original task.</p> MastPythonOutput <pre><code>message = \"Different\"\nschedule ATask {\"message\": \"Hello\"}\nlog \"{message}\"\n\n=== ATask ===\nlog \"{message}\"\nmessage = \"Who cares\"\n</code></pre> <pre><code>@label()\ndef start(self):\n    self.logger()\n\n    self.schedule_task(self.a_task, {\"message\": \"Hello\"})\n    self.log(f\"{self.task.message}\")\n\n@label()\ndef a_task(self):\n    self.log(self.task.message)\n    self.task.message = \"Should not change original\"\n</code></pre> <pre><code>different\nHello\n</code></pre>"},{"location":"mast/syntax/#named-task-and-waiting-for-a-task-or-tasks","title":"Named task and waiting for a Task or Tasks","text":"<p>You can assign a task to a variable by putting a name in front of the fat arrow.</p> <p>This can be used to await the task later.</p> <p>Example scheduling a task</p> Mast <pre><code>log \"Start\"\ntask1 =&gt; ATask\nawait task1\nlog \"Done\"\n\n=== ATask ===\nlog \"task run\"\n</code></pre> <p>=== \"Output\":     <pre><code>Start\ntask run\nDone\n</code></pre></p>"},{"location":"mast/syntax/#awaiting-for-any-or-all-tasks","title":"Awaiting for any or all tasks","text":"<p>This can be used to await a list of tasks. You can await for ay task to complete. And you can await for all tasks to finish.</p> <p>Example await all</p> MastOutputMastOutput <pre><code>log(\"Start\")\ntask1 = task_schedule(ATask, data= {\"say\": \"Task1\"})\ntask2 = task_schedule(ATask, data= {\"say\": \"Task2\"})\n#### This needs to be refactored\nawait join_all(task1,task2]\nlog(\"Done\")\n\n=== ATask ===\nlog(\"{say}\")\n</code></pre> <pre><code>Start\nTask1\nTask2\nDone\n</code></pre> <pre><code>log(\"Start\")\ntask1 = task_schedule(ATask, data= {\"say\": \"Task1\"})\ntask2 = task_schedule(ATask, data= {\"say\": \"Task2\"})\n#### This needs to be refactored\nawait join_any(task1,task2]\nlog(\"Done\")\n\n=== ATask ===\nlog(\"{say}\")\"\n</code></pre> <pre><code>Start\nTask1\nTask2\nDone\n</code></pre> <p>The order maybe be different based on timing of the tasks.</p> <p>For an await any if any task end, the await is satisfied.</p>"},{"location":"mast/syntax/#canceling-a-task","title":"Canceling a task","text":"<p>You can cancel a tasks by name from another task.</p> MastPythonOutput <pre><code>log(\"Start\")\ntask1 task_schedule(ATask)\ntask_cancel(task1)\nlog(\"Done\")\n\n=== ATask ===\nlog(\"May not run\")\n</code></pre> <pre><code>@label()\ndef start(self):\n    logger()\n    log(\"Start\")\n    task1 = task_schedule_task(a_task)\n    task_cancel(task1)\n    log(\"Done\")\n\n@label()\ndef a_task(self):\n    log(\"May not run\")\n</code></pre> <p>Start Done</p>"},{"location":"mast/syntax/#conditional-statements","title":"Conditional Statements","text":"<p>Mast supports both a if and match statements similar to python's. PyMast simply uses the python statements.</p>"},{"location":"mast/syntax/#if-statements","title":"If statements","text":"<p>Mast supports if statements similar to python with if, elif, and else. Mast is not a whitespace language so you need to close an if with and end_if</p> <p>If conditionals can be nested as well.</p> MastPythonOutput <pre><code>===== start ====\nvalue = 300\n\nif value &lt; 300:\n    log \"less\"\nelif value &gt; 300:\nlog \"more\"\nelse:\n    log \"equal\"\nend_if\n</code></pre> <pre><code>class Story(PyMastStory):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    @label()\n    def start(self):\n        value = 300\n        if value &lt; 300:\n            log \"less\"\n        elif value &gt; 300:\n            log \"more\"\n        else:\n            log \"equal\"\n</code></pre> <pre><code>equal\n</code></pre>"},{"location":"mast/syntax/#match-statements","title":"Match statements","text":"<p>Mast supports match statements similar to python with match, case. Mast is not a whitespace language so you need to close an if with and end_match</p> MastPythonOutput <p>```` ===== start ==== value = 300</p> <p>match value:     case 200:         log(\"200\")     case 300:         log(\"300\")     case _:         log*(\"something else\") end_match ```</p> <pre><code>@label()\ndef start(self):\n    value = 300\n    match value:\n        case 200:\n            log \"200\"\n        case 300:\n            log \"300\"\n        case _:\n            log \"something else\"\n</code></pre> <pre><code>300\n</code></pre>"},{"location":"mast/syntax/#for-loops","title":"For loops","text":"<p>Mast supports for loop similar to python with for, break, continue . Mast is not a whitespace language so you need to close an if with and next.</p> <p>PyMast uses the standard python for or while loop.</p> <p>However, mast support a for ... in loop and a for .. while loop.</p> MastPythonOutput <p>``` for x in range(3):     log(\"{x}\") next x</p> <p>y = 10 for z while y &lt; 30:     log(\"{z} {y}\")     y += 10 next z</p> <pre><code>for x in range(3):\n    log \"{x}\"\n\ny = 10\nz = 0\nwhile y &lt; 30:\n    log \"{z} {y}\"\n    y += 10\n    z += 1\n</code></pre> <p>1 2 3 0 10 1 20 2 30</p>"},{"location":"mast/syntax/#comments","title":"Comments","text":"<p>Comments provide code extra information to help make it more understandable.</p>"},{"location":"mast/syntax/#comments_1","title":"Comments","text":"<p>Single line comments start with a # and go until the end of the line.</p> <p>Comments use the # like python does</p> Mast <pre><code>fred = 10 # set fred to 10\n</code></pre>"},{"location":"mast/syntax/#multi-line-comments-aka-block-comments","title":"Multi line Comments aka block comments","text":"<p>You can have a c style block comment</p> Mast <pre><code>/*********\nBeware\nThis is the tricky part\n****/\n</code></pre> <p>Using block comments to 'disable' code it can quickly get confusing. Therefore, an additional block comment is supported.</p>"},{"location":"mast/syntax/#importing","title":"Importing","text":"<p>You can break up mast content into multiple files and use import to included them</p> Mast <pre><code>import story_two.mast\n</code></pre> <p>The import command also supports importing from a zip fill</p> Mast <pre><code>from my_lib.zip import bar.mast\n</code></pre> <p>One use of the zip file concept it to create a sharable library of things.</p>"},{"location":"mast/syntax/#logging","title":"Logging","text":"<p>Mast supports syntax to simplify pythons logging features.</p>"},{"location":"mast/syntax/#logger-command","title":"logger command","text":"<p>The logger command sets up logging. </p> <p>Logging needs to be enabled</p> <p>Logging can enabled for stdout, to a string stream (stringIO) variable, and a file</p> MastPython <pre><code># enable logging to stdout\nlogger()\n# enable logging to stdout, and a string\nlogger(var=\"string my_string_logger\")\n# enable logging to stdout, and a file\nlogger(file=\"{mission_dir}/my_log.log\")\n# enable logging to stdout, a string and a file\nlogger(var=\"my_string_logger\", file=\"{mission_dir}/my_log.log\")\n</code></pre> <pre><code>@label\ndef some_label(self):\n    # Logging to stdout\n    logger()\n    # Logging to string IO\n    logger(var=\"my_string_logger\")\n    # Logging to file\n    logger(file=\"{mission_dir}/my_log.log\")\n    logger()\n</code></pre> <p>You can have multiple loggers, each logger can have separate strings, or files.</p> <p>The default logger does not need to specify the name.</p> <p>To create a new loggers by using the logger command specifying a name</p> Mast <pre><code>logger(name=\"tonnage\")\nlogger(name=\"tonnage\", var=\"tonnage\")\nlogger(name=\"tonnage\",file=\"{get_mission_dir()}/tonnage.txt\")\n</code></pre> <p>==== \"Python\"     <pre><code># this import is needed for get_mission_dir\nfrom sbs_utils.fs import get_mission_dir\n\n@label\ndef some_label(self):\n    logger(name=\"tonnage\")\n    logger(name=\"tonnage\", var=\"tonnage\")\n    logger(name=\"tonnage\",file=\"{get_mission_dir()}/tonnage.txt\")\n</code></pre></p>"},{"location":"mast/syntax/#log-command","title":"log command","text":"<p>The log command is how you send messages to the log.</p> MastPython <pre><code># no logger name defaults to name \"mast\"\nlog(\"Hello, World\")\n# Specify a name to log to a secondary logger\nlog(\"Tonnage score {tonnage}\", name=\"tonnage\")\n</code></pre> <pre><code>@label\ndef some_label(self):\n    # no logger name defaults to name \"mast\"\n    log(\"Hello, World\")\n    # Specify a name to log to a secondary logger\n    log(\"Tonnage score {tonnage}\", name=\"tonnage\")\n</code></pre> <p>The log command can accept levels. These are visible is the stdout messages.</p> MastPython <pre><code>log(\"Hello, World\", level=\"info\")\nlog(\"Hello, World\", level= \"debug\")\nlog(\"Hello, World\", level= \"error\")\n</code></pre> <pre><code>@label\ndef some_label(self):\n\n    log(\"Hello, World\", level=\"info\")\n    log(\"Hello, World\", level= \"debug\")\n    log(\"Hello, World\", level= \"error\")\n</code></pre>"},{"location":"mast/syntax/#delay-commands","title":"Delay commands","text":"<p>The delay command continues to execute for a period of time.</p> <p>A Delay needs a clock to use Artemis Cosmos has two clocks and sim. The gui clock is running continuously (realtime), the sim clock can be paused when the simulation is not running(game time).</p> <p>For gui and other things use the gui clock. If you want to delay 10s of game time use sim.</p> <p>Delay can specify minutes and seconds.</p> MastPython <pre><code>await delay_app(minutes=1)\nawait delay_app(seconds=10)\nawait delay_app(seconds=5, minutes=1)\nawait delay_sim(0, 10)\n</code></pre> <pre><code>yield AWAIT(delay_app(minutes=1))\nyield AWAIT(delay_app(seconds=10))\nyield AWAIT(delay_app(seconds=5, minutes=1))\nyield AWAIT(delay_sim(0, 10))\n</code></pre> <p>Delay can delay the flow of the code</p> MastPythonOutput <pre><code>for x in range(3):\n    log(\"{x}\")\n    await delay_app(1)\nnext x\n</code></pre> <pre><code>for x in range(3):\n    log(\"{x}\")\n    yield AWAIT(delay_app(1))\nnext x\n</code></pre> <pre><code>1\n2\n3\n</code></pre>"},{"location":"sbs/","title":"SBS","text":"<p>SBS is the Python API exposed by the Artemis: Cosmos engine.</p> <p>Missions scripts can be created by just accessing this API, and the sbs Utils library is not required.</p>"},{"location":"sbs_utils/","title":"SBS Utils","text":"<p>This is a lower level part of the system written in pure python.</p> <p>The Mast runtime uses this functionality.</p> <p>The sbs utils aspects can be used without mast as well. So creating pure python scripts can be created, and use many of the functions used by mast.</p> <p>Python coding can be more complex than mast, but if you know python you may find this method useful.</p>"},{"location":"tutorial/ai/complex_ai/","title":"complex","text":"<p>===================================</p> <p>Uses behavior trees</p> <p>Do friendly patrol Do harvester</p> <p>Create mission </p> <p>Create the mission from using a starter mission.</p> <p>.. tabs::    .. code-tab:: shell mast</p> <pre><code>.\\fetch artemis-sbs mast_starter simple_ai\n</code></pre> <p>.. code-tab:: shell PyMast</p> <pre><code>.\\fetch artemis-sbs pymast_starter simple_ai\n</code></pre> <p>Add more enemies</p> <p>.. tabs::    .. code-tab:: shell mast</p> <pre><code>#TODO\n</code></pre> <p>.. code-tab:: shell PyMast</p> <pre><code>#TODO\n</code></pre>"},{"location":"tutorial/ai/simple_ai/","title":"simple","text":""},{"location":"tutorial/ai/simple_ai/#_1","title":"simple","text":""},{"location":"tutorial/ai/simple_ai/#create-mission","title":"Create mission","text":"<p>Create the mission from using a starter mission.</p> <p>.. tabs::    .. code-tab:: shell mast</p> <pre><code>.\\fetch artemis-sbs mast_starter simple_ai\n</code></pre> <p>.. code-tab:: shell PyMast</p> <pre><code>.\\fetch artemis-sbs pymast_starter simple_ai\n</code></pre>"},{"location":"tutorial/ai/simple_ai/#add-more-stations","title":"Add more stations","text":"<p>.. tabs::    .. code-tab:: mast mast       :emphasize-lines: 3</p> <pre><code>  # Create a space station\n  ds1 = npc_spawn(1000,0,1000, \"DS1\", \"tsn\", \"starbase_command\", \"behav_station\")\n  ds2 = npc_spawn(1000,0,-1000, \"DS2\", \"tsn\", \"starbase_command\", \"behav_station\")\n</code></pre> <p>.. code-tab:: py PyMast       :emphasize-lines: 3</p> <pre><code>  # Create a space station\n  ds1 = Npc().spawn(self.sim, 1000,0,1000, \"DS1\", \"tsn\", \"starbase_command\", \"behav_station\")\n  ds2 = Npc().spawn(self.sim, -1000,0,1000, \"DS2\", \"tsn\", \"starbase_command\", \"behav_station\")\n</code></pre>"},{"location":"tutorial/ai/simple_ai/#add-role","title":"Add role","text":"<p>.. tabs::    .. code-tab:: mast mast       :emphasize-lines: 4</p> <pre><code>  # Create a space station\n  ds1 = npc_spawn(1000,0,1000, \"DS1\", \"tsn\", \"starbase_command\", \"behav_station\")\n  ds2 = npc_spawn(1000,0,-1000, \"DS2\", \"tsn\", \"starbase_command\", \"behav_station\")\n  do add_role({ds1.id, ds2.id}, \"Station\")\n</code></pre> <p>.. code-tab:: py PyMast       :emphasize-lines: 4</p> <pre><code>  # Create a space station\n  ds1 = Npc().spawn(self.sim, 1000,0,1000, \"DS1\", \"tsn\", \"starbase_command\", \"behav_station\")\n  ds2 = Npc().spawn(self.sim, 1000,0,-1000, \"DS2\", \"tsn\", \"starbase_command\", \"behav_station\")\n  query.add_role({ds1.id, ds2.id}, \"Station\")\n</code></pre> <p>Add a router for ai</p> <p>Routers create tasks automatically a needed and starts running at a specific label. That label that uses logic to route to other labels based on certain conditions.</p> <p>.. tabs::    .. code-tab:: mast Mast</p> <pre><code>     # at the top of the mast file add \n     # Configure the label where comms routing occurs\n     route spawn route_ai\n</code></pre> <p>.. code-tab:: py PyMast</p> <pre><code>   # in the __init__ of the story add \n   self.route_spawn(self.route_ai)\n</code></pre>"},{"location":"tutorial/ai/simple_ai/#add-a-task-to-route-ai","title":"Add a task to route AI","text":"<p>.. tabs::    .. code-tab:: mast mast</p> <pre><code>  ========== route_ai =========\n  #\n  # SPAWNED_ID is a special value of the ID of the thing spawned\n  #\n  if has_role(SPAWNED_ID, \"raider\"):\n     jump npc_targeting_ai\n  end_if\n  #if not a raider end the task\n  -&gt;END\n</code></pre> <p>.. code-tab:: py PyMast</p> <pre><code>  @label()    \n  def route_ai(self):\n     #\n     # SPAWNED_ID is a special value of the ID of the thing spawned\n     #\n     if query.has_role(self.task.SPAWNED_ID, \"raider\"):\n           yield self.jump(self.npc_targeting_ai)\n</code></pre>"},{"location":"tutorial/ai/simple_ai/#add-a-task-to-do-npc-targeting-ai","title":"Add a task to do npc targeting AI","text":"<p>.. tabs::    .. code-tab:: mast mast</p> <pre><code>  =====  npc_targeting_ai   =========\n\n  the_target = closest(SPAWNED_ID, role(\"__PLAYER__\"), 2000)\n  if the_target is None:\n     the_target = closest(SPAWNED_ID, role(\"Station\"))\n  end_if\n  if the_target is not None:\n     do target(sim, SPAWNED_ID, the_target, True)\n  end_if\n\n  delay sim 5s\n  jump npc_targeting_ai\n</code></pre> <p>.. code-tab:: py PyMast</p> <pre><code>  @label()    \n  def npc_targeting_ai(self):\n     the_target = query.closest(self.task.SPAWNED_ID, query.role(\"__PLAYER__\"), 2000)\n     if the_target is None:\n           the_target = query.closest(self.task.SPAWNED_ID, query.role(\"Station\"))\n     if the_target is not None:\n           query.target(self.sim, self.task.SPAWNED_ID, the_target, True)\n\n     yield self.delay(5)\n     yield self.jump(self.npc_targeting_ai)\n</code></pre>"},{"location":"tutorial/comms/complex_comms/","title":"complex","text":"<p>===================================</p> <p>Uses behavior trees</p> <p>Do friendly patrol Do harvester</p> <p>Create mission </p> <p>Create the mission from using a starter mission.</p> <p>.. tabs::    .. code-tab:: shell mast</p> <pre><code>.\\fetch artemis-sbs mast_starter simple_ai\n</code></pre> <p>.. code-tab:: shell PyMast</p> <pre><code>.\\fetch artemis-sbs pymast_starter simple_ai\n</code></pre> <p>Add more enemies</p> <p>.. tabs::    .. code-tab:: shell mast</p> <pre><code>#TODO\n</code></pre> <p>.. code-tab:: shell PyMast</p> <pre><code>#TODO\n</code></pre>"},{"location":"tutorial/comms/simple_comms/","title":"simple","text":"<p>===================================</p> <p>Create mission </p> <p>Create the mission from using a starter mission.</p> <p>.. tabs::    .. code-tab:: shell mast</p> <pre><code>.\\fetch artemis-sbs mast_starter simple_comms\n</code></pre> <p>.. code-tab:: shell PyMast</p> <pre><code>.\\fetch artemis-sbs pymast_starter simple_comms\n</code></pre> <p>Add more stations</p> <p>.. tabs::    .. code-tab:: mast mast       :emphasize-lines: 3</p> <pre><code>  # Create a space station\n  ds1 = npc_spawn(1000,0,1000, \"DS1\", \"tsn\", \"starbase_command\", \"behav_station\")\n  ds2 = npc_spawn(1000,0,-1000, \"DS2\", \"tsn\", \"starbase_command\", \"behav_station\")\n</code></pre> <p>.. code-tab:: py PyMast       :emphasize-lines: 3</p> <pre><code>  # Create a space station\n  ds1 = Npc().spawn(self.sim, 1000,0,1000, \"DS1\", \"tsn\", \"starbase_command\", \"behav_station\")\n  ds2 = Npc().spawn(self.sim, -1000,0,1000, \"DS2\", \"tsn\", \"starbase_command\", \"behav_station\")\n</code></pre> <p>Add role</p> <p>.. tabs::    .. code-tab:: mast mast       :emphasize-lines: 4</p> <pre><code>  # Create a space station\n  ds1 = npc_spawn(1000,0,1000, \"DS1\", \"tsn\", \"starbase_command\", \"behav_station\")\n  ds2 = npc_spawn(1000,0,-1000, \"DS2\", \"tsn\", \"starbase_command\", \"behav_station\")\n  do add_role({ds1.id, ds2.id}, \"Station\")\n</code></pre> <p>.. code-tab:: py PyMast       :emphasize-lines: 4</p> <pre><code>  # Create a space station\n  ds1 = Npc().spawn(self.sim, 1000,0,1000, \"DS1\", \"tsn\", \"starbase_command\", \"behav_station\")\n  ds2 = Npc().spawn(self.sim, 1000,0,-1000, \"DS2\", \"tsn\", \"starbase_command\", \"behav_station\")\n  query.add_role({ds1.id, ds2.id}, \"Station\")\n</code></pre> <p>Add a router for comms</p> <p>Routers create tasks automatically a needed and starts running at a specific label. That label that uses logic to route to other labels based on certain conditions.</p> <p>.. tabs::    .. code-tab:: mast Mast</p> <pre><code>     # at the top of the mast file add \n     # Configure the label where comms routing occurs\n     route comms select comms_route\n</code></pre> <p>.. code-tab:: py PyMast</p> <pre><code>   # in the __init__ of the story add \n   self.route_comms_select(self.comms_route)\n</code></pre> <p>Add router label and logic </p> <p>This label is called for a player ship (COMMS_ORIGIN_ID) and the COMMS_SELECTED_ID ship has not been communicated with this is used to resolve where to START the conversation with the TO ship COMMS_SELECTED_ID is the id of the target</p> <p>.. tabs::    .. code-tab:: mast Mast</p> <pre><code>     ================ comms_route ==================\n     if has_role(COMMS_SELECTED_ID, 'Station'):\n        jump comms_station\n     elif has_role(COMMS_SELECTED_ID, 'raider'):\n        jump npc_comms\n     end_if\n\n     # Anything else has no comms buttons\n     # and static as the id\n     comms_info \"static\"\n\n     -&gt;END\n</code></pre> <p>.. code-tab:: py PyMast</p> <pre><code>     @label()\n     def comms_route(self):\n        if has_role(COMMS_SELECTED_ID, 'Station'):\n           yield self.jump(comms_station)\n        elif has_role(COMMS_SELECTED_ID, 'raider'):\n           yield self.jump(npc_comms)\n\n        # Anything else has no comms buttons\n        # and static as the id\n        self.comms_info(\"static\")\n        yield self.end()\n</code></pre> <p>.. tabs::    .. code-tab:: mast Mast</p> <pre><code>  ================ npc_comms ==================\n\n  await comms:\n     + \"Hail\":\n        receive \"We will destroy you, disgusting Terran scum!\"\n     + \"Surrender now\":\n        receive  \"\"\"OK we give up\"\"\"\n  end_await\n  jump npc_comms\n</code></pre> <p>.. code-tab:: py PyMast</p> <pre><code>  @label()\n  def npc_comms(self):\n\n     def button_hail(story, comms):\n        comms.receive(\"We will destroy you, disgusting Terran scum!\")\n\n     def button_surrender(story, comms):\n        comms.receive(\"\"\"OK we give up\"\"\")\n\n     self.await_comms{{\n        \"Hail\": button_hail,\n        \"Surrender now\": button_surrender\n        })\n        yield self.jump(npc_comms)\n</code></pre> <p>.. tabs::    .. code-tab:: mast Mast</p> <pre><code>  ======== comms_station ======\n\n  await comms:\n     + \"Hail\":\n        transmit \"Hello\"\n        receive \"Yo\"\n\n  end_await\n  jump comms_station\n</code></pre> <p>.. code-tab:: py PyMast</p> <pre><code>  @label()\n  def comms_station(self):\n\n     def button_hail(story, comms):\n        # Message to station\n        comms.transmit(\"Hello\")\n        #message from station\n        comms.receive(\"Yo\")\n\n     self.await_comms{{\n        \"Hail\": button_hail,\n        })\n        yield self.jump(comms_station)\n</code></pre> <p>Update router for internal comms</p> <p>This label is called for a player ship (COMMS_ORIGIN_ID) and the COMMS_SELECTED_ID ship has not been communicated with this is used to resolve where to START the conversation with the TO ship COMMS_SELECTED_ID is the id of the target</p> <p>.. tabs::    .. code-tab:: mast Mast          :emphasize-lines: 3-8</p> <pre><code>     ================ comms_route ==================\n\n     if COMMS_SELECTED_ID == COMMS_ORIGIN_ID:\n        # This is the same ship\n        jump internal_comms\n     elif has_role(COMMS_SELECTED_ID, 'Station'):\n        jump comms_station\n     elif has_role(COMMS_SELECTED_ID, 'raider'):\n        jump npc_comms\n     end_if\n\n     # Anything else has no comms buttons\n     # and static as the id\n     comms_info \"static\"\n\n     -&gt;END\n</code></pre> <p>.. code-tab:: py PyMast          :emphasize-lines: 3-7</p> <pre><code>     @label()\n     def comms_route(self):\n        if self.task.COMMS_SELECTED_ID == self.task.COMMS_ORIGIN_ID:\n              # This is the same ship\n              yield self.jump(self.internal_comms)\n        elif query.has_role(self.task.COMMS_SELECTED_ID, 'Station'):\n              yield self.jump(self.comms_station)\n        elif query.has_role(self.task.COMMS_SELECTED_ID, 'raider'):\n              yield self.jump(self.npc_comms)\n\n        # Anything else has no comms buttons\n        # and static as the id\n        self.comms_info(\"static\")\n        yield self.end()\n</code></pre> <p>Add logic for internal comms</p> <p>.. tabs::    .. code-tab:: mast Mast</p> <pre><code>    ================ internal_comms ==================\n     #\n     # Setup faces for the departments\n     #\n     doctor = random_terran()\n     biologist = random_terran()\n     counselor = random_terran()\n     major = random_terran()\n     sec = \"Security\"\n\n     ================ internal_comms_loop ==================\n     #\n     # Shows button color, face and title overrides\n     #\n     await comms:\n        + \"Sickbay\" color \"blue\":\n           receive \"The crew health is great!\" title \"sickbay\" face \"{doctor}\" color \"blue\"\n        + \"Security\" color \"red\":\n           receive  \"All secure\" title sec face major color \"red\"\n        + \"Exobiology\" color \"green\":\n           receive  \"Testing running, one moment\" title \"Exobiology\" face biologist color \"green\"\n           # It is best to schedule delayed responses so the comms buttons are not stalled\n           schedule test_finished\n        + \"counselor\" color \"cyan\":\n           receive  \"Something is disturbing the crew\" title \"counselor\" face counselor color \"cyan\"\n           #\n           # but you can delay comms, There will be no buttons during this delay\n           #\n           delay sim 3s\n           receive  \"Things feel like they are getting worse\" title \"counselor\" face counselor color \"cyan\"\n     end_await\n     -&gt; internal_comms_loop\n</code></pre> <p>.. code-tab:: py PyMast</p> <pre><code>     #================ internal_comms ==================\n     @label()\n     def internal_comms(self):\n        #\n        # Setup faces for the departments\n        #\n        self.task.doctor = faces.random_terran()\n        self.task.biologist = faces.random_terran()\n        self.task.counselor = faces.random_terran()\n        self.task.major = faces.random_terran()\n        yield self.jump(self.internal_comms_loop)\n\n     # ================ internal_comms_loop ==================\n     @label()\n     def internal_comms_loop(self):\n        def button_sickbay(story, comms):\n              comms.receive(\"The crew health is great!\", face=story.task.doctor, color=\"blue\", title=\"sickbay\")\n        def button_security(story, comms):\n              comms.receive(\"All secure\", face=story.task.major, color=\"red\", title=\"security\")\n        def button_exobiology(story, comms):\n              comms.receive(\"Testing running, one moment\", face=story.task.biologist, color=\"green\", title=\"exobiology\")\n        def button_counselor(story, comms):\n              comms.receive(\"Something is disturbing the crew\", face=story.task.counselor, color=\"cyan\", title=\"counselor\")\n              yield self.task.delay(seconds=2, use_sim=True)\n              comms.receive(\"Things feel like they are getting worse\", face=story.task.counselor, color=\"cyan\", title=\"counselor\")\n\n        yield self.await_comms({\n              \"sickbay\": button_sickbay,\n              \"security\": button_security,\n              \"exobiology\": button_exobiology,\n              \"counselor\": button_counselor,\n        })\n        # loop\n        yield self.jump(self.internal_comms_loop)\n</code></pre> <p>Add a router for engineering comms</p> <p>Routers create tasks automatically a needed and starts running at a specific label. That label that uses logic to route to other labels based on certain conditions.</p> <p>.. tabs::    .. code-tab:: mast Mast       :emphasize-lines: 2</p> <pre><code>     route comms select comms_route\n     route grid select damcon_route\n</code></pre> <p>.. code-tab:: py PyMast       :emphasize-lines: 3</p> <pre><code>  # in the __init__ of the story add \n  self.route_comms_select(self.handle_comms)\n  self.route_grid_select(self.damcon_route)\n</code></pre> <p>Create routing logic for  engineering comms</p> <p>.. tabs::    .. code-tab:: mast Mast</p> <pre><code>     ================ damcon_route ==================\n\n     # COMMS_SELECTED_ID is the id of the target\n\n     if has_role(COMMS_SELECTED_ID, 'flint'):\n        jump comms_flintstone\n     elif has_role(COMMS_SELECTED_ID, 'rubble'):\n        jump comms_rubble\n     end_if\n     -&gt;END\n</code></pre> <p>.. code-tab:: py PyMast</p> <pre><code>  # ================ damcon_route ==================\n  @label()\n  def damcon_route(self):\n     # COMMS_SELECTED_ID is the id of the target\n     if query.has_role(self.task.COMMS_SELECTED_ID, 'flint'):\n           yield self.jump(self.comms_flintstone)\n     elif query.has_role(self.task.COMMS_SELECTED_ID, 'rubble'):\n           yield self.jump(self.comms_rubble)\n</code></pre> <p>Create routing logic for flint's</p> <p>.. tabs::    .. code-tab:: mast Mast</p> <pre><code>     ================ comms_flintstone ==================\n     await comms:\n        + \"Hail\":\n           have client_id broadcast \"Yabba Daba Dooo\"\n\n     end_await\n     -&gt; comms_flintstone\n</code></pre> <p>.. code-tab:: py PyMast</p> <pre><code>     # ================ comms_flintstone ==================\n     @label()\n     def comms_flintstone(self):\n        def button_hail(story, comms):\n              comms.broadcast(story.client_id, \"Yabba Daba Dooo\", \"orange\")\n\n\n        yield self.await_comms({\n              \"Hail\": button_hail\n        })\n        # -&gt; comms_flintstone\n        yield self.jump(self.comms_flintstone)\n</code></pre> <p>Create routing logic for rubble's</p> <p>.. tabs::    .. code-tab:: mast Mast</p> <pre><code>     ================ comms_rubble ==================\n     await comms:\n        + \"Hail\":\n           have client_id broadcast \"Who ya doing fred?\"\n\n     end_await\n     -&gt; comms_rubble\n</code></pre> <p>.. code-tab:: py PyMast</p> <pre><code>     # ================ comms_rubble ==================\n     @label()\n     def comms_rubble(self):\n        def button_hail(story, comms):\n              comms.broadcast(story.client_id, \"Hey fred .... how you doin fred?\", \"brown\")\n\n\n        yield self.await_comms({\n              \"Hail\": button_hail\n        })\n        # -&gt; comms_flintstone\n        yield self.jump(self.comms_rubble)\n</code></pre>"},{"location":"tutorial/gui/simple_gui/","title":"simple","text":"<p>===================================</p> <p>Create mission </p> <p>Create the mission from using a starter mission.</p> <p>.. tabs::    .. code-tab:: shell mast</p> <pre><code>.\\fetch artemis-sbs mast_starter simple_ai\n</code></pre> <p>.. code-tab:: shell PyMast</p> <pre><code>.\\fetch artemis-sbs pymast_starter simple_ai\n</code></pre> <p>Add more enemies</p> <p>.. tabs::    .. code-tab:: shell mast</p> <pre><code>#TODO\n</code></pre> <p>.. code-tab:: shell PyMast</p> <pre><code>#TODO\n</code></pre>"},{"location":"tutorial/science/simple_science/","title":"simple","text":"<p>===================================</p> <p>Create mission </p> <p>Create the mission from using a starter mission.</p> <p>.. tabs::    .. code-tab:: shell mast</p> <pre><code>.\\fetch artemis-sbs mast_starter simple_ai\n</code></pre> <p>.. code-tab:: shell PyMast</p> <pre><code>.\\fetch artemis-sbs pymast_starter simple_ai\n</code></pre> <p>Add more enemies</p> <p>.. tabs::    .. code-tab:: shell mast</p> <pre><code>#TODO\n</code></pre> <p>.. code-tab:: shell PyMast</p> <pre><code>#TODO\n</code></pre>"}]}