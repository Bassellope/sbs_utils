
# these variables persist for the life of the mission, and retain their data.  
# Functions that use them need to use the 'global' keyword to access them properly.
# modeTimer = 0
# missionState = "blank"

# enemyTypeNameList = ["Dreadnaught","Battleship","Hunter","Cargo","ARV Carrier","Behemoth"]
# torpedoTypeNameList = ["Homing","Nuclear","EMP","Mine"]

# enemiesToMake = 5

# originStationID = 0;

# asteroidList = []
# npc_ship_list = []
# player_ship_list = []
# station_list = []
# face_dictionary = {} # empty dictionary

# clientShipDict = {}
# harderCheckState = False
# simIsPaused = True

# swear = "FUCK"



########################################################################################################
# def  SendGUIToSingleClient(clientID):
#     sbs.send_gui_clear(clientID)
#     sbs.send_gui_text(clientID, "Mission: Basic Siege^^Please wait for the game to start.", "cli-text", 50, 10, 99,90);

#     if clientID not in clientShipDict:
#         clientShipDict[clientID] = 0

#     sbs.send_gui_text(clientID, "Meanwhile, here's a face.", "cli-text2", 50, 25, 99,90);
#     playerShipCaptainFace =  "ter white 0 0;ter #fff 5 2;ter #fff 6 3 -3 2;"
#     sbs.send_gui_face(clientID, playerShipCaptainFace, "cli-face", 75, 16, 100,16+25);

#     sbs.send_gui_3dship(clientID, "ARV carrier", "cli-3dship", 50, 30, 70,50);


#     sbs.send_gui_checkbox(clientID, "Artemis", "cli-arte",   0 == clientShipDict[clientID],    80, 60, 99,64);
#     sbs.send_gui_checkbox(clientID, "Hera"   , "cli-hera",   1 == clientShipDict[clientID],    80, 64, 99,68);
#     sbs.send_gui_checkbox(clientID, "Atlas"  , "cli-atla",   2 == clientShipDict[clientID],    80, 68, 99,72);

#	sbs.send_gui_slider(clientID, "cli-horz_slider",   0.0,1.0,0.8,    80, 85, 99,89);

#    sbs.send_gui_button(clientID, "Agree to Mission", "cli-start", 80, 90, 99,99);

########################################################################################################
# def  SendGUIToClient(clientID):
#     c_list = sbs.get_client_ID_list()
#     for x in c_list:
#         if 0 == clientID or x == clientID:
#             SendGUIToSingleClient(x)

########################################################################################################
# def  AssignClientsToShips():
#     c_list = sbs.get_client_ID_list()
#     for clientID in c_list:
#         shipID = clientShipDict[clientID]
#         sbs.assign_client_to_ship(clientID, shipID)

########################################################################################################
# def  AddAsteroid(sim, name, vectr):
#     asteroidID = sim.make_new_passive("behav_asteroid", name);
#     asteroidList.append(asteroidID);
#     asteroid = sim.get_space_object(asteroidID);
#     # asteroid.exclusion_radius = 0
#     sim.reposition_space_object(asteroid, vectr.x, vectr.y/20, vectr.z);







########################################################################################################
def HandlePresentGUIMessage(sim, message_tag, clientID, extraFloat):

    global missionState
    global harderCheckState
    global simIsPaused
    global enemiesToMake

    if "continue" == message_tag:
        missionState = "blank"
        
    if "check1" == message_tag:
        harderCheckState = not harderCheckState
        sbs.send_gui_checkbox(0, "Make Harder", "check1",   harderCheckState,    80, 60, 99,64);

    if "cli-arte" == message_tag:
        clientShipDict[clientID] = 0
        SendGUIToSingleClient(clientID)
    if "cli-hera" == message_tag:
        clientShipDict[clientID] = 1
        SendGUIToSingleClient(clientID)
    if "cli-atla" == message_tag:
        clientShipDict[clientID] = 2
        SendGUIToSingleClient(clientID)

    if "horz_slider" == message_tag:
        enemiesToMake = int(extraFloat)
        textLine = f"Enemies: {enemiesToMake}"
        sbs.send_gui_text(0, textLine, "text3", 60, 80, 99,85);




########################################################################################################
def  HandleClientConnect(sim, clientID):
    clientShipDict[clientID] = 0
    if simIsPaused:
        SendGUIToSingleClient(clientID)
    elif player_ship_list:
        sbs.assign_client_to_ship(clientID, player_ship_list[0])



########################################################################################################
def  HandleSimulationStart(sim):
    print("Script start ")

    global player_ship_list
    global npc_ship_list
    global station_list
    global enemiesToMake
    global originStationID

    playerID = MakePlayerShip(sim, "Battle Cruiser", "Artemis", 500, 0)
    sbs.assign_player_ship(playerID)

    #------------------------------------------------------------------------------
    # add an extra two player ships, to see if I can control them
#	MakePlayerShip(sim, "Missile Cruiser", "Hera", 200, 0)
    MakePlayerShip(sim, "Light Cruiser", "Atlas",  900, 0)

    #------------------------------------------------------------------------------
    # add an extra two enemy ships AS player ships, to see if I can control them
#	MakePlayerShip(sim, "Goliath", "Goliath A", 600, 0)
#	MakePlayerShip(sim, "ARV Carrier", "Destroyer A", 800, 0)

    originStationID = MakeStation(sim, "Starbase", "Base Alpha", "TSN", 0,0)
    MakeStation(sim, "Starbase", "Base Beta", "TSN", -2400,100)


    # making asteroids
    ang = random.uniform(-math.pi,math.pi)
    dst = 5000
    xpos = math.sin(ang) * dst
    zpos = math.cos(ang) * dst

    iter1 = scatter.sphere(50, xpos, random.uniform(-500,500), zpos, 3000, outer=0, top_only=False, ring=False)
    for v in iter1:
        AddAsteroid(sim, "Asteroid 7", v)

    dst = 9000
    ang = random.uniform(-math.pi,math.pi)
    xpos = math.sin(ang) * dst
    zpos = math.cos(ang) * dst
    iter1 = scatter.sphere(50, xpos, random.uniform(-500,500), zpos, 3000, outer=0, top_only=False, ring=False)
    for v in iter1:
        AddAsteroid(sim, "Asteroid 7", v)

    # making nebulae
    ang = random.uniform(-math.pi,math.pi)
    dst = 5000
    xpos = math.sin(ang) * dst
    zpos = math.cos(ang) * dst

    iter1 = scatter.sphere(50, xpos, random.uniform(-500,500), zpos, 3000, outer=0, top_only=False, ring=False)
    for v in iter1:
        nebID = sim.make_new_passive("behav_nebula", "nebula");
        neb = sim.get_space_object(nebID);
        sim.reposition_space_object(neb, v.x,v.y/20,v.z);

    dst = 9000
    ang = random.uniform(-math.pi,math.pi)
    xpos = math.sin(ang) * dst
    zpos = math.cos(ang) * dst
    iter1 = scatter.sphere(50, xpos, random.uniform(-500,500), zpos, 3000, outer=0, top_only=False, ring=False)
    for v in iter1:
        nebID = sim.make_new_passive("behav_nebula", "nebula");
        neb = sim.get_space_object(nebID);
        sim.reposition_space_object(neb, v.x,v.y/20,v.z);

    # making minefields
    ang = random.uniform(-math.pi,math.pi)
    dst = 5000
    xpos = math.sin(ang) * dst
    zpos = math.cos(ang) * dst

    iter1 = scatter.sphere(50, xpos, random.uniform(-500,500), zpos, 3000, outer=0, top_only=False, ring=False)
    for v in iter1:
        nebID = sim.make_new_passive("behav_mine", "Danger Object 3A");
        neb = sim.get_space_object(nebID);
        sim.reposition_space_object(neb, v.x,0,v.z);

    dst = 9000
    ang = random.uniform(-math.pi,math.pi)
    xpos = math.sin(ang) * dst
    zpos = math.cos(ang) * dst
    iter1 = scatter.sphere(50, xpos, random.uniform(-500,500), zpos, 3000, outer=0, top_only=False, ring=False)
    for v in iter1:
        nebID = sim.make_new_passive("behav_mine", "Danger Object 3A");
        neb = sim.get_space_object(nebID);
        sim.reposition_space_object(neb, v.x,v.y/20,v.z);




#	for i in range(40):
#		ang = random.uniform(-math.pi,math.pi)
#		dst = random.randrange(1000,10000)
#		xpos = math.sin(ang) * dst
#		zpos = math.cos(ang) * dst
#		AddAsteroid(sim, "Asteroid 7", xpos,zpos)
        #descText = f"asteroid {xpos} {zpos}"
        #print(descText);

    for i in range(enemiesToMake):
        MakeRaiderShip(sim,"RAIDER", 6000 + i * 250)

# gonna damage the Dreadnaughts engines so it can't move
#		blob = ship.data_set
#		blob.set("system_damage", 2.0, sbs.SHPSYS.ENGINES)
#		blob.set("system_damage", 2.0, sbs.SHPSYS.WEAPONS)

    #------------------------------------------------------------------------------
    # making treasures
    for i in range(40):
        ang = random.uniform(-math.pi,math.pi)
        dst = random.randrange(1000,1001)
        xpos = math.sin(ang) * dst
        zpos = math.cos(ang) * dst
#		treasureID = sim.make_new_passive("behav_pickup", "Container Small 5B");
#		treasureID = sim.get_space_object(treasureID);
#		sim.reposition_space_object(treasureID, xpos,0,zpos);

        ang = random.uniform(-math.pi,math.pi)
        dst = random.randrange(1000,1001)
        xpos = math.sin(ang) * dst
        zpos = math.cos(ang) * dst
#		treasureID = sim.make_new_passive("behav_mine", "Danger Object 3A");
#		treasureID = sim.get_space_object(treasureID);
#		sim.reposition_space_object(treasureID, xpos,0,zpos);

    #------------------------------------------------------------------------------
    """
    for i in range(20):
        nebID = sim.make_new_passive("behav_nebula", "nebula");
        neb = sim.get_space_object(nebID);
        sim.reposition_space_object(neb, 300*i,0,-1000);
"""

    #------------------------------------------------------------------------------

    # navpoints are NOT space objects.  They are a different sort of object.
    navpoint1 = sim.add_navpoint(0, 0,0, "Map Center", "green");

    AssignClientsToShips()


########################################################################################################
def  HandleSimulationTick(sim):
    # print("Script Tick ")

    # startTime = time.perf_counter()

    global missionState
    global asteroidList
    global npc_ship_list
    global simIsPaused
    global originStationID

    missionState = "sim_on"
    simIsPaused = False

    print("HandleSimulationTick");
    ProcessStationDockState(sim)

    randText = " " + str(random.randrange(0,999))

    eyeY = random.randrange(1,6)
    mouthY = random.randrange(1,6)
    faceDesc = f"tor #fff 0 0;tor #fff 0 {eyeY};tor #fff 2 {mouthY};"

    # this sends a message to comms on the ship "playerID"
    #sbs.send_comms_message_to_player_ship(playerID, 0, "yellow", faceDesc, "generic alien", 
    #"Surrender now, dirty Terran!" + randText)

    #---------------------------------------------------------------------------------------
    # enemies hunt players

    # dead list
    npc_dead_list = []

    # for each npc ship
    for x in npc_ship_list:
        if sim.space_object_exists(x):
            npc_ship = sim.get_space_object(x)
            blob = npc_ship.data_set

            # find the nearest player to shoot at
            """
            nearestPlayer = None
            nearestDist = 50000
            for playerID in player_ship_list:
                if sim.space_object_exists(playerID):
                    ply_ship = sim.get_space_object(playerID)
                    distanceValue = sbs.distance(npc_ship, ply_ship)
                    if nearestDist > distanceValue:
                        nearestDist = distanceValue
                        nearestPlayer = ply_ship
            """
            # get station at origin
            nearestPlayer = sim.get_space_object(originStationID)

            if nearestPlayer != None:
                # make the npc's target be the position of the player
                blob.set("target_pos_x", nearestPlayer.pos.x,0)
                blob.set("target_pos_y", nearestPlayer.pos.y,0)
                blob.set("target_pos_z", nearestPlayer.pos.z,0)
                blob.set("target_id", nearestPlayer.unique_ID,0)
        else:
            npc_dead_list.append(x)

    for x in npc_dead_list:
        npc_ship_list.remove(x)

    #-------------------------------------------------------------------------------
    if len(npc_ship_list) <= 0:
        # no enemy ships left in list!
        missionState = "won"
        sbs.pause_sim()

    #-------------------------------------------------------------------------------
    everyPlayerDied = True
    for playerShipID in player_ship_list:
        if sim.space_object_exists(playerShipID):
            everyPlayerDied = False

    if everyPlayerDied:
        missionState = "lost"
        sbs.pause_sim()





########################################################################################################
def ProcessStationDockState(sim):

    global player_ship_list
    global station_list
    global torpedoTypeNameList

    #---------------------------------------------------------------------------------------
    for stationID in station_list:
        if sim.space_object_exists(stationID):
            station = sim.get_space_object(stationID)
            blob = station.data_set
            stationName = blob.get("name_tag",0);

            # check and set timer for building the current torpedo
            torp_build_time = blob.get("torp_build_ready_time",0)
            if None == torp_build_time: # never built a torp before
                torp_build_time = sim.time_tick_counter + 30 * 10 # 10 seconds?
                blob.set("torp_build_ready_time",torp_build_time,0)

            if torp_build_time <= sim.time_tick_counter: # done building!
                torp_type = blob.get("torpedo_build_type",0)
                cur_count = blob.get("torpedo_count", torp_type)
                blob.set("torpedo_count", cur_count+1, torp_type)

                faceDesc = face_dictionary[stationID]

                textLine = "We have produced another " + torpedoTypeNameList[torp_type] + " torpedo.  We will begin work on another."
                sbs.send_comms_message_to_player_ship(0, stationID, "green", faceDesc, 
                    stationName,  textLine)

                torp_build_time = sim.time_tick_counter + 30 * 60 * 4 #-------------  4 minutes
                blob.set("torp_build_ready_time",torp_build_time,0)



    #---------------------------------------------------------------------------------------
    for playerShipID in player_ship_list:
        if sim.space_object_exists(playerShipID):
            player = sim.get_space_object(playerShipID)
            blob = player.data_set

            dock_state_string = blob.get("dock_state", 0)
            if "undocked" == dock_state_string:
                blob.set("dock_base_id", 0) # clear the dock-able id

                dock_rng = 600

                station_scan = sbs.broad_test(-dock_rng + player.pos.x, -dock_rng + player.pos.z, dock_rng + player.pos.x, dock_rng + player.pos.z, 1)
                for thing in station_scan:
                    if "behav_station" == thing.tick_type:
                        # check to see if the player ship is close enough to be offered the option of docking
                        distanceValue = sbs.distance(thing, player)
                        if distanceValue <= dock_rng:
                            blob.set("dock_base_id", thing.unique_ID) # set the dock-able id of the player to this station

            dock_stationID = blob.get("dock_base_id", 0)
            if sim.space_object_exists(dock_stationID):
                dock_station = sim.get_space_object(dock_stationID)
                station_blob = dock_station.data_set

                if "docking" == dock_state_string:
                    # check to see if the player ship is close enough to be docked
                    distanceValue = sbs.distance(dock_station, player)
                    closeEnough = dock_station.exclusion_radius + player.exclusion_radius
                    closeEnough *= 1.1
                    if distanceValue <= closeEnough:
                        blob.set("dock_state", "docked")
                    else:
                        print("Docking dist: " + str(distanceValue) + ",       closeEnough: " + str(closeEnough))


                if "docked" == dock_state_string:
                    # refuel
                    fuel_value = blob.get("energy", 0)
                    fuel_value += 20
                    if fuel_value > 1000:
                        fuel_value = 1000
                    blob.set("energy", fuel_value)

                    # resupply torps
                    for g in range(sbs.TORPEDO.MINE):
                        tLeft = station_blob.get("torpedo_count", g)
                        if tLeft > 0:
                            torp_max = blob.get("torpedo_max", g)
                            torp_now = blob.get("torpedo_count", g)
                            if torp_now < torp_max:
                                torp_now = torp_now + 1
                                blob.set("torpedo_count", torp_now,g)
                                station_blob.set("torpedo_count", tLeft-1, g)


                    #repair shields (more than normal)
                    shieldCoeff = blob.get("repair_rate_shields",0)
                    systemCoeff = blob.get("repair_rate_systems",0)

                    sCount = blob.get("shield_count",0)
                    for g in range(sCount-1):
                        sVal = blob.get("shield_val", g)
                        sValMax = blob.get("shield_max_val", g)
                        changed = (sVal < sValMax)
                        sVal = max(0.0, min(sVal + shieldCoeff, sValMax)) # clamp the value
                        if changed:
                            blob.set("shield_val", sVal, g);

                    #repair systems (more than normal)
                    for g in range(sbs.SHPSYS.SHIELDS):
                        damage = blob.get("system_damage", g)
                        maxDamage = blob.get("system_max_damage", g)
                        changed = (damage > 0.0)
                        damage = max(0.0, min(damage - systemCoeff, maxDamage)) # clamp the value
                        if changed:
                            blob.set("system_damage", damage, g)




########################################################################################################
def MakePlayerShip(sim, hull_type, ship_name, pos_x, pos_z):
    playerID = sim.make_new_player("behav_playership", hull_type)
    faces.set_face(playerID, faces.random_terran())

    face_dictionary[playerID] = faces.random_terran()
    print(face_dictionary[playerID])

    player_ship_list.append(playerID)

    # now that the player ship has been created, sim.get_space_object gets the space object reference
    # you use the reference when you want to change the values of the object
    player = sim.get_space_object(playerID)
    player.side = "TSN";
    blob = player.data_set
    blob.set("name_tag", ship_name, 0)

    sim.reposition_space_object(player, pos_x, 0, pos_z)

    return playerID


########################################################################################################
def MakeStation(sim, hull_type, station_name, side_tag, pos_x, pos_z):

    global station_list

    shipID = sim.make_new_active("behav_station", hull_type);
    faces.set_face(shipID, faces.random_terran())

    face_dictionary[shipID] = faces.random_terran()
    station_list.append(shipID)

    ship = sim.get_space_object(shipID);
    ship.side = side_tag;
    sim.reposition_space_object(ship, pos_x,0,pos_z)
    blob = ship.data_set
    blob.set("name_tag", station_name, 0)
    return shipID


########################################################################################################
def MakeRaiderShip(sim, sideTag, dst):
    dreadID = sim.make_new_active("behav_npcship", enemyTypeNameList[random.randrange(0,4)])
    ship = sim.get_space_object(dreadID)
    ship.side = sideTag
    faces.set_face(dreadID, faces.random_kralien())

    face_dictionary[dreadID] = faces.random_kralien()

    ang = random.uniform(-math.pi,math.pi)
#	dst = random.randrange(3000,6000)
    xpos = math.sin(ang) * dst
    zpos = math.cos(ang) * dst

    sim.reposition_space_object(ship, xpos,0,zpos)
    npc_ship_list.append(dreadID)
    return dreadID

########################################################################################################
def RespondToHail(sim, responder_id, hailer_id):

    torpedo_type_text_name = [ "HOMING",	"NUKE",	"EMP",	"MINE" ]

    if sim.space_object_exists(hailer_id):
        hailer_ship = sim.get_space_object(hailer_id)
        blob = hailer_ship.data_set

        if sim.space_object_exists(responder_id):
            responder = sim.get_space_object(responder_id)
            blob2 = responder.data_set

            hailer_name = blob.get("name_tag",0);
            if not hailer_ship.side:
                hailer_name += " (" + hailer_ship.side + ")";

            responder_name = blob2.get("name_tag",0);
            if not responder.side:
                responder_name += " (" + responder.side + ")";

            faceDesc = face_dictionary[responder_id]

            #---------------------------------------------------------------------------------------
            if "behav_station" == responder.tick_type:
                textLine = "Hello, " + hailer_name + ".  We stand ready to assist.^"
                textLine += "You have full docking priviledges.^"

                textLine += "   {} Homing ready^".format(blob2.get("torpedo_count", sbs.TORPEDO.HOMING))
                textLine += "   {} Nuclear ready^".format(blob2.get("torpedo_count", sbs.TORPEDO.NUKE))
                textLine += "   {} EMP ready^".format(blob2.get("torpedo_count", sbs.TORPEDO.EMP))
                textLine += "   {} Mine ready^".format(blob2.get("torpedo_count", sbs.TORPEDO.MINE))

                textLine += "{} in production^".format(torpedo_type_text_name[blob2.get("torpedo_build_type",0)])

                sbs.send_comms_message_to_player_ship(hailer_id, responder_id, "gray", faceDesc, 
                    responder_name,  textLine)

            #---------------------------------------------------------------------------------------
            if "behav_playership" == responder.tick_type:
                sbs.send_comms_message_to_player_ship(hailer_id, responder_id, "gray", faceDesc, responder_name, 
                    "Yes, we are " + responder_name + ", a player ship.")

            #---------------------------------------------------------------------------------------
            if "behav_npcship" == responder.tick_type:
                sbs.send_comms_message_to_player_ship(hailer_id, responder_id, "gray", faceDesc, responder_name, 
                    "We will destroy you, disgusting Terran scum!")


# end of my python script program file


