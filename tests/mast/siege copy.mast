########################################################################################################
# def  AssignClientsToShips():
#     c_list = sbs.get_client_ID_list()
#     for clientID in c_list:
#         shipID = clientShipDict[clientID]
#         sbs.assign_client_to_ship(clientID, shipID)



########################################################################################################
def  HandleClientConnect(sim, clientID):
    clientShipDict[clientID] = 0
    if simIsPaused:
        SendGUIToSingleClient(clientID)
    elif player_ship_list:
        sbs.assign_client_to_ship(clientID, player_ship_list[0])



########################################################################################################
def ProcessStationDockState(sim):

    global player_ship_list
    global station_list
    global torpedoTypeNameList

    #---------------------------------------------------------------------------------------
    for playerShipID in player_ship_list:
        if sim.space_object_exists(playerShipID):
            player = sim.get_space_object(playerShipID)
            blob = player.data_set

            dock_state_string = blob.get("dock_state", 0)
            if "undocked" == dock_state_string:
                blob.set("dock_base_id", 0) # clear the dock-able id

                dock_rng = 600

                station_scan = sbs.broad_test(-dock_rng + player.pos.x, -dock_rng + player.pos.z, dock_rng + player.pos.x, dock_rng + player.pos.z, 1)
                for thing in station_scan:
                    if "behav_station" == thing.tick_type:
                        # check to see if the player ship is close enough to be offered the option of docking
                        distanceValue = sbs.distance(thing, player)
                        if distanceValue <= dock_rng:
                            blob.set("dock_base_id", thing.unique_ID) # set the dock-able id of the player to this station

            dock_stationID = blob.get("dock_base_id", 0)
            if sim.space_object_exists(dock_stationID):
                dock_station = sim.get_space_object(dock_stationID)
                station_blob = dock_station.data_set

                if "docking" == dock_state_string:
                    # check to see if the player ship is close enough to be docked
                    distanceValue = sbs.distance(dock_station, player)
                    closeEnough = dock_station.exclusion_radius + player.exclusion_radius
                    closeEnough *= 1.1
                    if distanceValue <= closeEnough:
                        blob.set("dock_state", "docked")
                    else:
                        print("Docking dist: " + str(distanceValue) + ",       closeEnough: " + str(closeEnough))


                if "docked" == dock_state_string:
                    # refuel
                    fuel_value = blob.get("energy", 0)
                    fuel_value += 20
                    if fuel_value > 1000:
                        fuel_value = 1000
                    blob.set("energy", fuel_value)

                    # resupply torps
                    for g in range(sbs.TORPEDO.MINE):
                        tLeft = station_blob.get("torpedo_count", g)
                        if tLeft > 0:
                            torp_max = blob.get("torpedo_max", g)
                            torp_now = blob.get("torpedo_count", g)
                            if torp_now < torp_max:
                                torp_now = torp_now + 1
                                blob.set("torpedo_count", torp_now,g)
                                station_blob.set("torpedo_count", tLeft-1, g)


                    #repair shields (more than normal)
                    shieldCoeff = blob.get("repair_rate_shields",0)
                    systemCoeff = blob.get("repair_rate_systems",0)

                    sCount = blob.get("shield_count",0)
                    for g in range(sCount-1):
                        sVal = blob.get("shield_val", g)
                        sValMax = blob.get("shield_max_val", g)
                        changed = (sVal < sValMax)
                        sVal = max(0.0, min(sVal + shieldCoeff, sValMax)) # clamp the value
                        if changed:
                            blob.set("shield_val", sVal, g);

                    #repair systems (more than normal)
                    for g in range(sbs.SHPSYS.SHIELDS):
                        damage = blob.get("system_damage", g)
                        maxDamage = blob.get("system_max_damage", g)
                        changed = (damage > 0.0)
                        damage = max(0.0, min(damage - systemCoeff, maxDamage)) # clamp the value
                        if changed:
                            blob.set("system_damage", damage, g)





########################################################################################################
def RespondToHail(sim, responder_id, hailer_id):

    torpedo_type_text_name = [ "HOMING",	"NUKE",	"EMP",	"MINE" ]

 
            #---------------------------------------------------------------------------------------
            if "behav_playership" == responder.tick_type:
                sbs.send_comms_message_to_player_ship(hailer_id, responder_id, "gray", faceDesc, responder_name, 
                    "Yes, we are " + responder_name + ", a player ship.")




