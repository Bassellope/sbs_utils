from sbs_utils.mast.mast import Mast
from sbs_utils.agent import clear_shared
import unittest

Mast.enable_logging()

"""
    Target,
    Tell,
    Comms,
    Button,
    Near,
    Simulation
"""

def mast_sbs_compile(code):
    mast = Mast()
    clear_shared()
    errors = mast.compile(code, "test", mast)
    return (errors, mast)


class TestMastSbsCompile(unittest.TestCase):
    
    
    def test_compile_no_err(self):
        (errors, mast) = mast_sbs_compile( code = """
transmit("Hello")
receive("Hello")


await comms():
    * "Button one":
        -> JumpLabel
    + "Button Two":
        -> JumpLabel
    + "Button Jump":
        -> JumpSomeWhere
    =timeout(2,2):
        -> JumpSomeWhere



await comms():
* "Button one":
    await comms():
    * "Button one":
        await comms():
        * "Button one":
            -> JumpLabel


""")
        if len(errors)>0:
            for err in errors:
                print(err)
        assert(len(errors) == 0)

     
    def test_compile_no_err_2(self):
        (errors, mast) = mast_sbs_compile( code ="""
# Set the comms buttons to start the 'quest'

await  comms():
    + "Start at DS1":
        -> One
    + "Start at DS2":
        -> Two
    + "Taunt":
        -> Taunt
 


== Taunt ==

await comms():
    * "Your mother"  color "red":
        -> Taunt
    + "Kiss my Engine"  color "green":
        -> Taunt
    + "Skip me" color "white" if x > 54:
        -> Taunt 
    * "Don't Skip me" color "white" if x < 54:
        -> Taunt 
    + "Taunt" :
        -> Taunt



== One ==
await task_schedule(HeadToDS1)
await task_schedule(HeadToDS2)
->One

== Two ==
await task_schedule(HeadToDS2)
await task_schedule(HeadToDS1)
->Two

== Start ==

await comms():
    + "Say Hello" :
        -> Hello
    + "Say Hi":
        -> Hi
    + "Shutup":
        -> Shutup



== skip ==
receive("Come to pick the princess")
== Hello ==
transmit( "HELLO")

await comms():
    + "Say Blue":
        -> Blue
    + "Say Yellow":
        -> Yellow
    + "Say Cyan":
        -> Cyan

== Hi ==

receive("Hi")
await delay_app(10)
-> Start

== Chat ==
receive("Blah, Blah")
await delay_app(2)
-> Chat

== Shutup ==
task_cancel(chat)

== Blue ==
receive ( "Blue")
await delay_app(10)
-> Start

== Yellow ==
receive ("Yellow")
await delay_app(10)
-> Start

== Cyan ==
receive ("Cyan")
await comms(timeout_app(2)):
    + "Say main":
        -> main
    =timeout():
        -> TooSlow



== TooSlow ==
receive ("Woh too slow")
await delay_app(10)
-> Start

""")
        if len(errors)>0:
            for err in errors:
                print(err)
        assert(len(errors) == 0)



    def test_scan_compile_no_err(self):
        (errors, mast) = mast_sbs_compile( code ="""
=========== server_main =====
await scan():
    + "scan":
        scan_results("test")


await scan():
    + "scan":
        scan_results("This space object is now scanned, in the most general way. This text was generated by the script.")
    +  "bio":
        scan_results("This space object has indeterminate life signs. This text was generated by the script.")
    + "intel":
        scan_results("This space object is detailed in the ship's computer banks. This text was generated by the script.")
    + "sgnl":
        scan_results("This space object radiating signals. This text was generated by the script.")


->END


""")
        if len(errors)>0:
            for err in errors:
                print(err)
        assert(len(errors) == 0)





#     def test_run_tell_no_err(self):
#         (errors, runner, mast) = mast_sbs_run( code = """
#  have self tell player "Hello"
#  have self tell player "Hello" color "black"
# """)
#         if len(errors)>0:
#             for err in errors:
#                 print(err)
#         assert(len(errors) == 0)


"""
--------await self near player 700 timeout 1m 1s:----------

----------timeout:-----------------

----------end_await-----------------


await self comms player timeout 1m 1s:
* "Button one": ******

+ "Button Two":
-> JumpLabel
+ "Button Jump": 
+ "Button Push":
->> PushLabel
+ "Button Pop":
<<-
+ "Button Await 1": ****
    await => par
++++++++++++ "Button Await 1":  ****
await => par {"S":1}
+++++++++++ "Button Await 1": ******
await => par ~~ {
    "S":1
    }~~
------------- timeout:---------------
-> JumpSomeWhere
---------------end_await ----------------
"""

    
if __name__ == '__main__':
    try:
        unittest.main(exit=False)
    except Exception as e:
        print(e.msg)

