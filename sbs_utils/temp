terran_map = {
    "face": [(0,0)],
    "eyes": [(0,1), (0,2), (0,3),(0,4), (0,5)],
    "mouth": [(1,4), (1,5), (1,6),(2,1), (3,1)],
    "hair": [(0,6), (1,0),(2,0), (3,0),(4,0)],
    "extra": [(6,0),(1,1), (1,2),(1,3)], 
    "hat": [(5,0)], 
}


def terran(face_i, eye_i, mouth_i, hair_i, extra_i, hat_i):
    """ Create an terran face

    :param face_i: The index of the face 0
    :type face_i: int
    :param eye_id: The index of the eyes 0-4
    :type eye_i: int
    :param mouth_id: The index of the mouth 0-4
    :type mouth_i: int
    :param hair_id: The index of the hair 0-4 or None
    :type hair_i: int or None
    :param extra_id: The index of the extra 0-4 or None
    :type extra_i: int or None
    :param hat_id: The index of the hat 0 or None
    :type hat_i: int or None
    
    :return: A Face string
    :rtype: string
    """
    face = terran_map["face"][face_i]
    eye = terran_map["eyes"][eye_i]
    mouth = terran_map["mouth"][mouth_i]
    
    ret =  f"tor #fff {face[0]} {face[1]};tor #fff {eye[0]} {eye[1]};tor #fff {mouth[0]} {mouth[1]};"
    if hair_i is not None:
        hair = terran_map["hair"][hair_i]
        ret += f"tor #fff {hair[0]} {hair[1]};"
    if hat_i  is not None:
        hat = terran_map["hat"][hat_i]
        ret += f"tor #fff {hat[0]} {hat[1]};"

    if extra_i  is not None:
        extra = terran_map["extra"][extra_i]
        ret += f"tor #fff {extra[0]} {extra[1]};"
    return ret

def random_terran():
    """ Create a random terran face
    
    :return: A Face string
    :rtype: string
    """
    face = randrange(0, len(terran_map["face"]))
    eye = randrange(0, len(terran_map["eyes"]))
    mouth = randrange(0, len(terran_map["mouth"]))
    hair = None
    extra = None
    hat = None
    if randrange(0,10) > 5:
        hair = randrange(0, len(terran_map["hair"]))
    if randrange(0,10) > 5:
        extra = randrange(0, len(terran_map["extra"]))
    if randrange(0,10) > 7:
        hat = randrange(0, len(terran_map["hat"]))
    return terran(face, eye, mouth, hair, extra, hat)
