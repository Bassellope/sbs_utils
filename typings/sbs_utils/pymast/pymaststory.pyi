from sbs_utils.pymast.pymaststorypage import CodePusher
from sbs_utils.consoledispatcher import ConsoleDispatcher
from sbs_utils.damagedispatcher import DamageDispatcher
from sbs_utils.pymast.pymasttask import DataHolder
from sbs_utils.pymast.pymasttask import PyMastTask
from sbs_utils.engineobject import EngineObject
from sbs_utils.helpers import FrameContext
from sbs_utils.gui import Gui
from sbs_utils.gui import Page
from sbs_utils.lifetimedispatcher import LifetimeDispatcher
from sbs_utils.pymast.pollresults import PollResults
from sbs_utils.pymast.pymastcomms import PyMastComms
from sbs_utils.pymast.pymastscheduler import PyMastScheduler
from sbs_utils.pymast.pymastscience import PyMastScience
from sbs_utils.tickdispatcher import TickDispatcher
def get_story_id ():
    ...
class PyMastStory(EngineObject):
    """class PyMastStory"""
    def END (self):
        ...
    def __call__ (self, sched=None):
        """Call self as a function."""
    def __init__ (self, *args, **kwargs):
        """Initialize self.  See help(type(self)) for accurate signature."""
    def _add (id, obj):
        ...
    def _remove (id):
        ...
    def add_scheduler (self, label):
        ...
    def assign_player_ship (self, player):
        ...
    def await_comms (self, buttons, player=None, npc=None):
        ...
    def await_gui (self, buttons=None, timeout=None, on_message=None, test_refresh=None, test_end_await=None, on_disconnect=None):
        ...
    def await_science (self, buttons, player=None, npc=None):
        ...
    def behave_invert (self, label):
        ...
    def behave_sel (self, *labels):
        ...
    def behave_seq (self, *labels):
        ...
    def behave_until (self, poll_result, label):
        ...
    def clear ():
        ...
    @property
    def client_id (self):
        ...
    def delay (self, seconds=0, minutes=0, use_sim=False):
        ...
    def disable (self):
        ...
    def enable (self, delay=0, count=None):
        ...
    def file_logger (self, filename, logger_name='pymast'):
        ...
    def get (id):
        ...
    def get_as (id, as_cls):
        ...
    def get_objects_from_set (the_set):
        ...
    def get_page (self):
        ...
    def get_role_object (link_name):
        ...
    def get_role_objects (role):
        ...
    def get_role_set (role):
        ...
    def gui_activate_console (self, console):
        ...
    def gui_blank (self, style=None):
        ...
    def gui_button (self, message, label, style=None):
        ...
    def gui_checkbox (self, message, value, style=None):
        ...
    def gui_console (self, console, style=None):
        ...
    def gui_console_widget (self, widget, style=None):
        ...
    def gui_console_widget_list (self, console, widgets, style=None):
        ...
    def gui_content (self, content, label, style=None):
        ...
    def gui_drop_down (self, props, style=None):
        ...
    def gui_face (self, face, style=None):
        ...
    def gui_hole (self, style=None):
        ...
    def gui_icon (self, icon, color, style=None):
        ...
    def gui_icon_button (self, message, label, style=None):
        ...
    def gui_iconbutton (self, icon, color, style=None):
        ...
    def gui_image (self, file, color, style=None):
        ...
    def gui_radio (self, message, value, vertical=False, style=None):
        ...
    def gui_row (self, style=None):
        ...
    def gui_section (self, style=None, click_props=None, label=None):
        ...
    def gui_ship (self, ship, style=None):
        ...
    def gui_slider (self, val, props, label=None, style=None):
        ...
    def gui_text (self, props, style=None):
        """Gets the simulation space object
        
        valid properties
           text
           color
           font
        
        
        :param props: property string
        :type props: str
        :param layout: property string
        :type layout: str"""
    def gui_text_input (self, props, label, style=None):
        ...
    def has_inventory_list (collection_name):
        ...
    def has_inventory_set (collection_name):
        ...
    def has_links_list (collection_name):
        ...
    def has_links_set (collection_name):
        ...
    def is_running (self):
        ...
    def jump (self, label):
        ...
    def log (self, message, logger_name='pytmast', level='info'):
        ...
    def logger (self, logger_name='pymast'):
        ...
    def pop (self):
        ...
    def push (self, label):
        ...
    def reroute_gui_all (self, label):
        ...
    def reroute_gui_client (self, client_id, label):
        ...
    def reroute_gui_clients (self, label):
        ...
    def reroute_gui_server (self, label):
        ...
    def resolve_id (other: 'EngineObject | CloseData | int'):
        ...
    def resolve_py_object (other: 'EngineObject | CloseData | int'):
        ...
    def route_change_console (self, label):
        ...
    def route_comms_select (self, label):
        """route_comms
        
        define a label to use with a new task if the comms is not handled"""
    def route_damage_internal (self, label):
        """route_damage_source
        
        define a label to use with a new task items are spawned"""
    def route_damage_source (self, label):
        """route_damage_source
        
        define a label to use with a new task items are spawned"""
    def route_damage_target (self, label):
        """route_damage_source
        
        define a label to use with a new task items are spawned"""
    def route_destroy (self, label):
        """route_damage_source
        
        define a label to use with a new task items are spawned"""
    def route_grid_select (self, label):
        """route_comms
        
        define a label to use with a new task if the comms is not handled"""
    def route_grid_spawn (self, label):
        """route_spawn
        
        define a label to use with a new task items are spawned"""
    def route_science_select (self, label):
        """route_comms
        
        define a label to use with a new task if the comms is not handled"""
    def route_spawn (self, label):
        """route_spawn
        
        define a label to use with a new task items are spawned"""
    def route_weapons_select (self, label):
        """route_weapons
        
        define a label to use with a new task if the comms is not handled"""
    def schedule_task (self, label):
        ...
    def string_logger (self, logger_name='pymast'):
        ...
    def watch_event (self, event_tag, label):
        ...
