from sbs_utils.pymast.pymaststorypage import CodePusher
from sbs_utils.consoledispatcher import ConsoleDispatcher
from sbs_utils.pymast.pymasttask import DataHolder
from sbs_utils.pymast.pymasttask import PyMastTask
from sbs_utils.engineobject import EngineObject
from sbs_utils.gui import Gui
from sbs_utils.gui import Page
from sbs_utils.pymast.pollresults import PollResults
from sbs_utils.pymast.pymastcomms import PyMastComms
from sbs_utils.pymast.pymastscheduler import PyMastScheduler
from sbs_utils.pymast.pymastscience import PyMastScience
from sbs_utils.tickdispatcher import TickDispatcher
class PyMastStory(object):
    """class PyMastStory"""
    def END (self):
        ...
    def __call__ (self, sim, sched=None):
        """Call self as a function."""
    def __init__ (self, *args, **kwargs):
        """Initialize self.  See help(type(self)) for accurate signature."""
    def add_scheduler (self, sim, label):
        ...
    def assign_player_ship (self, player):
        ...
    def await_comms (self, player, npc, buttons):
        ...
    def await_gui (self, buttons=None, timeout=None, on_message=None, test_refresh=None, test_end_await=None, on_disconnect=None):
        ...
    def await_science (self, player, npc, scans):
        ...
    def behave_invert (self, label):
        ...
    def behave_sel (self, *labels):
        ...
    def behave_seq (self, *labels):
        ...
    def behave_until (self, poll_result, label):
        ...
    def delay (self, seconds=0, minutes=0, use_sim=False):
        ...
    def disable (self):
        ...
    def enable (self, sim, delay=0, count=None):
        ...
    def file_logger (self, filename, logger_name='pymast'):
        ...
    def get_page (self):
        ...
    def gui_activate_console (self, console):
        ...
    def gui_blank (self, style=None):
        ...
    def gui_button (self, message, label, style=None):
        ...
    def gui_checkbox (self, message, value, style=None):
        ...
    def gui_console (self, console, style=None):
        ...
    def gui_console_widget (self, widget, style=None):
        ...
    def gui_console_widget_list (self, console, widgets, style=None):
        ...
    def gui_content (self, content, label, style=None):
        ...
    def gui_drop_down (self, props, style=None):
        ...
    def gui_face (self, face, style=None):
        ...
    def gui_hole (self, style=None):
        ...
    def gui_icon (self, icon, color, style=None):
        ...
    def gui_icon_button (self, message, label, style=None):
        ...
    def gui_iconbutton (self, icon, color, style=None):
        ...
    def gui_image (self, file, color, style=None):
        ...
    def gui_radio (self, message, value, vertical=False, style=None):
        ...
    def gui_row (self, style=None):
        ...
    def gui_section (self, style=None, click_props=None, label=None):
        ...
    def gui_ship (self, ship, style=None):
        ...
    def gui_slider (self, val, props, label=None, style=None):
        ...
    def gui_text (self, props, style=None):
        """Gets the simulation space object
        
        valid properties
           text
           color
           font
        
        
        :param props: property string
        :type props: str
        :param layout: property string
        :type layout: str"""
    def gui_text_input (self, props, label, style=None):
        ...
    def is_running (self):
        ...
    def jump (self, label):
        ...
    def log (self, message, logger_name='pytmast', level='info'):
        ...
    def logger (self, logger_name='pymast'):
        ...
    def pop (self):
        ...
    def push (self, label):
        ...
    def schedule_comms (self, player, npc, buttons):
        ...
    def schedule_science (self, player, npc, scans):
        ...
    def schedule_task (self, label):
        ...
    def start (self):
        ...
    def start_client (self):
        ...
    def start_server (self):
        ...
    def string_logger (self, logger_name='pymast'):
        ...
    def watch_event (self, event_tag, label):
        ...
