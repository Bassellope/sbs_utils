from sbs_utils.agent import Agent
from sbs_utils.helpers import FrameContext
from enum import IntEnum
from sbs_utils.mast.parsers import LayoutAreaNode
from sbs_utils.mast.parsers import LayoutAreaParser
from sbs_utils.gui import Page
def calc_bounds (att, aspect_ratio, font_size):
    ...
def calc_float_attribute (name, col, row, sec, aspect_ratio_axis, font_size):
    ...
def cascade_attribute (name, col, row, sec):
    ...
def get_client_aspect_ratio (cid):
    ...
def get_font_size (font):
    ...
def merge_props (d):
    ...
def split_props (s, def_key):
    ...
class Blank(Column):
    """class Blank"""
    def __init__ (self) -> None:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def _present (self, client_id):
        ...
class Bounds(object):
    """class Bounds"""
    def __add__ (self, o):
        ...
    def __init__ (self, left=0, top=0, right=0, bottom=0) -> None:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def __repr__ (self) -> str:
        """Return repr(self)."""
    def __str__ (self) -> str:
        """Return str(self)."""
    def __sub__ (self, o):
        ...
    def grow (self, o):
        ...
    @property
    def height (self):
        ...
    @height.setter
    def height (self, h):
        ...
    def merge (self, b):
        ...
    def shrink (self, o):
        ...
    @property
    def width (self):
        ...
    @width.setter
    def width (self, w):
        ...
class Button(Column):
    """class Button"""
    def __init__ (self, tag, message) -> None:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def _present (self, event):
        ...
    def update (self, message):
        ...
    @property
    def value (self):
        ...
    @value.setter
    def value (self, v):
        ...
class Checkbox(Column):
    """class Checkbox"""
    def __init__ (self, tag, message, value=False) -> None:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def _present (self, event):
        ...
    def on_message (self, event):
        ...
    def update (self, message):
        ...
    @property
    def value (self):
        ...
    @value.setter
    def value (self, v):
        ...
class Column(object):
    """class Column"""
    def __init__ (self, left=0, top=0, right=0, bottom=0) -> None:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def _post_present (self, event):
        ...
    def _pre_present (self, event):
        ...
    def _present (self, event):
        ...
    def calc (self, client_id):
        ...
    def get_cascade_props (self, font=False, color=False, justify=False):
        ...
    def get_color (self):
        ...
    def get_font (self):
        ...
    def get_justify (self):
        ...
    def get_variable (self, default):
        ...
    def invalidate_regions (self):
        ...
    @property
    def is_hidden (self):
        ...
    def on_message (self, event):
        ...
    def present (self, event):
        ...
    def represent (self, event):
        ...
    def set_border (self, border):
        ...
    def set_bounds (self, bounds) -> None:
        ...
    def set_col_width (self, width):
        ...
    def set_margin (self, margin):
        ...
    def set_padding (self, padding):
        ...
    def set_row_height (self, height):
        ...
    def show (self, _show):
        ...
    def update (self, props):
        ...
    def update_variable (self):
        ...
    @property
    def value (self):
        ...
    @value.setter
    def value (self, a):
        ...
class ConsoleWidget(Column):
    """class ConsoleWidget"""
    def __init__ (self, widget) -> None:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def _present (self, event):
        ...
class Dropdown(Column):
    """class Dropdown"""
    def __init__ (self, tag, props) -> None:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def _present (self, event):
        ...
    def on_message (self, event):
        ...
    def update (self, props):
        ...
    @property
    def value (self):
        ...
    @value.setter
    def value (self, v):
        ...
class Face(Column):
    """class Face"""
    def __init__ (self, tag, face) -> None:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def _present (self, event):
        ...
    def update (self, face):
        ...
    @property
    def value (self):
        ...
    @value.setter
    def value (self, v):
        ...
class GuiControl(Column):
    """class GuiControl"""
    def __init__ (self, tag, content) -> None:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def _present (self, event):
        ...
    def invalidate_regions (self):
        ...
    @property
    def is_hidden (self):
        ...
    def on_message (self, event):
        ...
    @property
    def region_tag (self, v):
        ...
    @region_tag.setter
    def region_tag (self, v):
        ...
    def set_bounds (self, bounds) -> None:
        ...
    def update (self, props):
        ...
    @property
    def value (self):
        ...
    @value.setter
    def value (self, v):
        ...
class Hole(Column):
    """class Hole"""
    def __init__ (self) -> None:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def _present (self, client_id):
        ...
class Icon(Column):
    """class Icon"""
    def __init__ (self, tag, props) -> None:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def _present (self, event):
        ...
    def update (self, props):
        ...
    @property
    def value (self):
        ...
    @value.setter
    def value (self, v):
        ...
class IconButton(Column):
    """class IconButton"""
    def __init__ (self, tag, props) -> None:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def _present (self, event):
        ...
    def update (self, props):
        ...
    @property
    def value (self):
        ...
    @value.setter
    def value (self, v):
        ...
class Image(Column):
    """class Image"""
    def __init__ (self, tag, file, mode=1) -> None:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def _present (self, event):
        ...
    def get_image_size (self):
        ...
    def update (self, file):
        ...
    @property
    def value (self):
        ...
    @value.setter
    def value (self, v):
        ...
class Layout(object):
    """class Layout"""
    def __init__ (self, tag=None, rows=None, left=0, top=0, right=100, bottom=50, region_type=<RegionType.SECTION_AREA_ABSOLUTE: 0>) -> None:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def _post_present (self, event):
        ...
    def add (self, row: sbs_utils.pages.layout.layout.Row):
        ...
    def calc (self, client_id):
        ...
    @property
    def color (self):
        ...
    @color.setter
    def color (self, v):
        ...
    @property
    def drawing_region_tag (self):
        ...
    @property
    def font (self):
        ...
    @font.setter
    def font (self, v):
        ...
    def get_content_bounds (self):
        ...
    def invalidate_all (self):
        ...
    def invalidate_children (self):
        ...
    def invalidate_regions (self):
        ...
    @property
    def is_hidden (self):
        ...
    @property
    def justify (self):
        ...
    @justify.setter
    def justify (self, v):
        ...
    def on_message (self, event):
        ...
    def present (self, event):
        ...
    def rebuild (self):
        ...
    def region_begin (self, client_id):
        ...
    def region_end (self, client_id):
        ...
    @property
    def region_tag (self):
        ...
    @region_tag.setter
    def region_tag (self, t):
        ...
    def represent (self, event):
        ...
    def resize_to_content (self):
        ...
    def set_border (self, border):
        ...
    def set_bounds (self, bounds):
        ...
    def set_col_width (self, width):
        ...
    def set_margin (self, margin):
        ...
    def set_orientation (self, s):
        ...
    def set_padding (self, padding):
        ...
    def set_row_height (self, height):
        ...
    def show (self, _show):
        ...
class LayoutPage(Page):
    """A interface class for creating GUI pages
    
        """
    def __init__ (self) -> None:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def _present (self, event):
        """Present the gui """
class RadioButton(Column):
    """class RadioButton"""
    def __init__ (self, tag, message, parent, value=False) -> None:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def _present (self, event):
        ...
    def on_message (self, event):
        ...
    @property
    def value (self):
        ...
    @value.setter
    def value (self, v):
        ...
class RadioButtonGroup(Column):
    """class RadioButtonGroup"""
    def __init__ (self, tag, buttons, value, vertical) -> None:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def _present (self, event):
        ...
    def on_message (self, event):
        ...
    def set_bounds (self, bounds) -> None:
        ...
    def update (self, props):
        ...
    @property
    def value (self):
        ...
    @value.setter
    def value (self, v):
        ...
class RegionType(IntEnum):
    """int([x]) -> integer
    int(x, base=10) -> integer
    
    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.
    
    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4"""
    REGION_ABSOLUTE : 100
    REGION_RELATIVE : 200
    SECTION_AREA_ABSOLUTE : 0
class Row(object):
    """class Row"""
    def __init__ (self, cols=None, width=0, height=0) -> None:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def _post_present (self, event):
        ...
    def add (self, col):
        ...
    def add_front (self, col):
        ...
    @property
    def bounds (self):
        ...
    def clear (self):
        ...
    @property
    def color (self):
        ...
    @color.setter
    def color (self, v):
        ...
    @property
    def font (self):
        ...
    @font.setter
    def font (self, v):
        ...
    def invalidate_regions (self):
        ...
    @property
    def justify (self):
        ...
    @justify.setter
    def justify (self, v):
        ...
    def on_message (self, event):
        ...
    def present (self, event):
        ...
    def represent (self, event):
        ...
    def set_border (self, border):
        ...
    def set_col_width (self, width):
        ...
    def set_margin (self, margin):
        ...
    def set_padding (self, padding):
        ...
    def set_row_height (self, height):
        ...
class Ship(Column):
    """class Ship"""
    def __init__ (self, tag, ship) -> None:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def _present (self, event):
        ...
    def update (self, ship):
        ...
    @property
    def value (self):
        ...
    @value.setter
    def value (self, v):
        ...
class Slider(Column):
    """class Slider"""
    def __init__ (self, tag, value, props, is_int=False) -> None:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def _present (self, event):
        ...
    def on_message (self, event):
        ...
    def update (self, props):
        ...
    @property
    def value (self):
        ...
    @value.setter
    def value (self, v):
        ...
class Text(Column):
    """class Text"""
    def __init__ (self, tag, message) -> None:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def _present (self, event):
        ...
    def update (self, message):
        ...
    @property
    def value (self):
        ...
    @value.setter
    def value (self, v):
        ...
class TextInput(Column):
    """class TextInput"""
    def __init__ (self, tag, props) -> None:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def _present (self, event):
        ...
    def on_message (self, event):
        ...
    @property
    def value (self):
        ...
    @value.setter
    def value (self, v):
        ...
